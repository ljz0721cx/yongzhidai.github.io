{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/raytaylorism/source/favicon.png","path":"favicon.png","modified":1,"renderable":1},{"_id":"themes/raytaylorism/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/raytaylorism/source/images/head2.jpg","path":"images/head2.jpg","modified":1,"renderable":1},{"_id":"themes/raytaylorism/source/js/prettify.js","path":"js/prettify.js","modified":1,"renderable":1},{"_id":"themes/raytaylorism/source/js/jquery.min.js","path":"js/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/raytaylorism/source/css/lib/prettify-tomorrow-night-eighties.css","path":"css/lib/prettify-tomorrow-night-eighties.css","modified":1,"renderable":1},{"_id":"themes/raytaylorism/source/css/images/side-user-cover.jpg","path":"css/images/side-user-cover.jpg","modified":1,"renderable":1},{"_id":"themes/raytaylorism/source/css/lib/font-awesome.min.css","path":"css/lib/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/raytaylorism/source/images/bookImg/bdlq.jpg","path":"images/bookImg/bdlq.jpg","modified":1,"renderable":1},{"_id":"themes/raytaylorism/source/images/bookImg/block_chain.jpg","path":"images/bookImg/block_chain.jpg","modified":1,"renderable":1},{"_id":"themes/raytaylorism/source/images/bookImg/java_jvm.jpg","path":"images/bookImg/java_jvm.jpg","modified":1,"renderable":1},{"_id":"themes/raytaylorism/source/images/bookImg/mysql.jpg","path":"images/bookImg/mysql.jpg","modified":1,"renderable":1},{"_id":"themes/raytaylorism/source/images/bookImg/santi.jpg","path":"images/bookImg/santi.jpg","modified":1,"renderable":1},{"_id":"themes/raytaylorism/source/images/bookImg/rljs.jpg","path":"images/bookImg/rljs.jpg","modified":1,"renderable":1},{"_id":"themes/raytaylorism/source/images/weixin2.png","path":"images/weixin2.png","modified":1,"renderable":1},{"_id":"themes/raytaylorism/source/images/zhifubao2.png","path":"images/zhifubao2.png","modified":1,"renderable":1},{"_id":"themes/raytaylorism/source/js/materialize.min.js","path":"js/materialize.min.js","modified":1,"renderable":1},{"_id":"themes/raytaylorism/source/css/lib/materialize.min.css","path":"css/lib/materialize.min.css","modified":1,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Bold.eot","path":"css/font/roboto/Roboto-Bold.eot","modified":1,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Light.eot","path":"css/font/roboto/Roboto-Light.eot","modified":1,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Bold.woff","path":"css/font/roboto/Roboto-Bold.woff","modified":1,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Bold.woff2","path":"css/font/roboto/Roboto-Bold.woff2","modified":1,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Light.woff","path":"css/font/roboto/Roboto-Light.woff","modified":1,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Medium.eot","path":"css/font/roboto/Roboto-Medium.eot","modified":1,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Light.woff2","path":"css/font/roboto/Roboto-Light.woff2","modified":1,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Medium.woff2","path":"css/font/roboto/Roboto-Medium.woff2","modified":1,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Regular.eot","path":"css/font/roboto/Roboto-Regular.eot","modified":1,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Medium.woff","path":"css/font/roboto/Roboto-Medium.woff","modified":1,"renderable":1},{"_id":"themes/raytaylorism/source/images/bg2.jpg","path":"images/bg2.jpg","modified":1,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Regular.woff2","path":"css/font/roboto/Roboto-Regular.woff2","modified":1,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Regular.woff","path":"css/font/roboto/Roboto-Regular.woff","modified":1,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/font-awesome/fontawesome-webfont.eot","path":"css/font/font-awesome/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/font-awesome/FontAwesome.otf","path":"css/font/font-awesome/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/font-awesome/fontawesome-webfont.woff2","path":"css/font/font-awesome/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/font-awesome/fontawesome-webfont.woff","path":"css/font/font-awesome/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Bold.ttf","path":"css/font/roboto/Roboto-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Light.ttf","path":"css/font/roboto/Roboto-Light.ttf","modified":1,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Medium.ttf","path":"css/font/roboto/Roboto-Medium.ttf","modified":1,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Regular.ttf","path":"css/font/roboto/Roboto-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/raytaylorism/source/images/bg1.jpg","path":"images/bg1.jpg","modified":1,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/font-awesome/fontawesome-webfont.ttf","path":"css/font/font-awesome/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/font-awesome/fontawesome-webfont.svg","path":"css/font/font-awesome/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/raytaylorism/source/images/bg31.jpg","path":"images/bg31.jpg","modified":1,"renderable":1},{"_id":"themes/raytaylorism/source/images/bg3.jpg","path":"images/bg3.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/raytaylorism/.DS_Store","hash":"3e5d239e09136fbfdea6a13a0f4f3ef6e853b283","modified":1516157878000},{"_id":"themes/raytaylorism/Gruntfile.js","hash":"f0c204fc7b3343417cc1a0fdca12ab089394b654","modified":1516157878000},{"_id":"themes/raytaylorism/LICENSE","hash":"391dd84c2091363936603d63cc71ba1628a13c86","modified":1516157878000},{"_id":"themes/raytaylorism/_config.yml","hash":"d8f37f2f9bb64bfd52fe842b52c3873db0675347","modified":1516293068000},{"_id":"themes/raytaylorism/README.md","hash":"9e5d5bbf2cebd80c9a8737c390b038a7e1565a93","modified":1516157878000},{"_id":"themes/raytaylorism/log.md","hash":"e6b93891f941c723524b143b69b0d303064db54b","modified":1516157878000},{"_id":"source/CNAME","hash":"cc2f79d8524cbd4bdd5e2ca9e979b9b27776c09f","modified":1516157878000},{"_id":"source/.DS_Store","hash":"d5be01fd3cd00777743b2614ccae85e610a8fecc","modified":1516290760000},{"_id":"themes/raytaylorism/_data/about.json","hash":"ad37c7a373e24ba9fb26630b0e761cabb3431b90","modified":1516157878000},{"_id":"themes/raytaylorism/_data/hint.json","hash":"178fe345ea95511364ed70da86186cb834947993","modified":1516157878000},{"_id":"themes/raytaylorism/_data/link.json","hash":"b865125d0440e6717ee3d88d1b518a4ebdb32d61","modified":1516157878000},{"_id":"themes/raytaylorism/_data/reading.json","hash":"e8045e22b2d499a5d813320a8c2b1bccdbedd46d","modified":1516157878000},{"_id":"themes/raytaylorism/_data/slider.json","hash":"361373b57cfb5371027af42000bbaec4e03333a3","modified":1516157878000},{"_id":"themes/raytaylorism/_md/.DS_Store","hash":"c78c4302cf17691ddd0de43250a3c03dad1d8e70","modified":1516159387000},{"_id":"themes/raytaylorism/source/.DS_Store","hash":"afd79b5fe873e4ee0e0fed3ad6932f7ddd12f548","modified":1516157878000},{"_id":"themes/raytaylorism/source/favicon.png","hash":"99f338235a578a0677eaa2bf67b722226e9c49a2","modified":1516157878000},{"_id":"themes/raytaylorism/languages/default.yml","hash":"936a72db42d299cd5e912198b9ace4fd64c476fd","modified":1516157878000},{"_id":"themes/raytaylorism/languages/zh-CN.yml","hash":"c5fcb3d2b353d9747238ca78106953301f9a2018","modified":1516157878000},{"_id":"themes/raytaylorism/languages/zh-TW.yml","hash":"ae281c898cea81f4c897c0a69c45e2ce6a4314a6","modified":1516157878000},{"_id":"themes/raytaylorism/layout/.DS_Store","hash":"c65c9d1aa3e98324aaca09da74ae56a88212485c","modified":1516157878000},{"_id":"themes/raytaylorism/layout/archive.ejs","hash":"0a21af8903e95c6d8bb7554b089ac219e8708ad7","modified":1516157878000},{"_id":"themes/raytaylorism/layout/about.ejs","hash":"54e74d61dba41f173f111e32deeb58447260f0e3","modified":1516157878000},{"_id":"themes/raytaylorism/layout/index.ejs","hash":"34cbcb6c75e2eef622fea6fecebfe15fb7522a95","modified":1516157878000},{"_id":"themes/raytaylorism/layout/layout.ejs","hash":"0fbced6bf0129f550ad66d57735d269b70728b49","modified":1516157878000},{"_id":"themes/raytaylorism/layout/reading.ejs","hash":"52906ee0e7e679d417d5bc385e054e16e9ff0256","modified":1516157878000},{"_id":"themes/raytaylorism/layout/page.ejs","hash":"90441f114859ce63ef7c7d93d668dbe5939995c2","modified":1516161744000},{"_id":"themes/raytaylorism/layout/tag.ejs","hash":"42ecab14917abd40c0a38e6ab629f089352a24b1","modified":1516157878000},{"_id":"themes/raytaylorism/layout/post.ejs","hash":"8e550fd95ef761909294ed3a4aa428ff0509fbf0","modified":1516161753000},{"_id":"source/_data/hint.json","hash":"178fe345ea95511364ed70da86186cb834947993","modified":1516157878000},{"_id":"source/_data/about.json","hash":"3b564d408ac338230665dd8462845067803c4e94","modified":1516157878000},{"_id":"source/_data/link.json","hash":"1f166868472b3e319bd679a3ebd15778558aa943","modified":1516157878000},{"_id":"source/_posts/java-loc5.md","hash":"bead265457370dacb5731b5c98a72a872ea635fd","modified":1516437858000},{"_id":"source/_data/reading.json","hash":"0e99a3cf0d723b4410f1610094f246331644fdd9","modified":1516157878000},{"_id":"source/_data/slider.json","hash":"da70ec3292d155c269ed235129de59d433dd7d65","modified":1516157878000},{"_id":"source/_posts/.DS_Store","hash":"6e94129abec4965d5b678ab3712ec2caee2ce5e7","modified":1516437739000},{"_id":"source/_posts/java-lock1.md","hash":"5fef38e7dbff0bd727ac81c1a79b2ed6a6d4ee0e","modified":1516434406000},{"_id":"source/_posts/java-lock2.md","hash":"6104edd42207df4a80b91d09499a10ca800657b8","modified":1516435464000},{"_id":"source/_posts/java-lock3.md","hash":"276523d174fb559e7e2afeb972c647d64e4d6d76","modified":1516437873000},{"_id":"source/_posts/java-lock4.md","hash":"4f6b9020a26a02e95d650f34399b0b867143d940","modified":1516437865000},{"_id":"source/_posts/szhbmnmnb.md","hash":"13d8e26cf968e43e653b21b0c18d94e9324ffd7f","modified":1516332165000},{"_id":"source/_posts/szhbyhezsw.md","hash":"f0138f78aad32d1e2814f93eb5a40d1f5ee99ddd","modified":1516291688000},{"_id":"source/about/index.md","hash":"e0cb9efe9824d117777f44bedae256c375a2f38b","modified":1516157878000},{"_id":"source/reading/index.md","hash":"ffe64363f79a74ca022f15447a03a96808c64794","modified":1516157878000},{"_id":"source/about/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1516157878000},{"_id":"themes/raytaylorism/_md/reading/index.md","hash":"ffe64363f79a74ca022f15447a03a96808c64794","modified":1516157878000},{"_id":"themes/raytaylorism/_md/about/index.md","hash":"ee081f0766b1bbdd72b9a254a934033878dd1571","modified":1516157878000},{"_id":"themes/raytaylorism/source/css/.DS_Store","hash":"6dc6634f748395c047288ecc3e5155b085da706f","modified":1516162646000},{"_id":"themes/raytaylorism/source/css/style.styl","hash":"3286e6810884bd5614615419db1ea9802ab7afd3","modified":1516165638000},{"_id":"themes/raytaylorism/source/images/.DS_Store","hash":"2a60f59bb6ffd658d445fd25d0bc5866c70b7d2b","modified":1516291320000},{"_id":"themes/raytaylorism/source/images/head2.jpg","hash":"2820398878f601c7bd07f1d8035ea49ff8ff4197","modified":1516157878000},{"_id":"themes/raytaylorism/source/js/prettify.js","hash":"d24b1da342b5c2d0582f0922118aaf0b2a6840d5","modified":1516157878000},{"_id":"themes/raytaylorism/layout/_partial/.DS_Store","hash":"d8e896a0a9d18a7333db88aba1df948043829b3b","modified":1516161784000},{"_id":"themes/raytaylorism/layout/_partial/after_footer.ejs","hash":"77476565bc85987d7656751cbc27b473223b0186","modified":1516157878000},{"_id":"themes/raytaylorism/layout/_partial/archive.ejs","hash":"6fc4dc05d153dbf1dd955df4ff19c380692f87e9","modified":1516157878000},{"_id":"themes/raytaylorism/layout/_partial/article.ejs","hash":"b5eb2959e905c6c7de9926bd6415116bb00ba006","modified":1516165646000},{"_id":"themes/raytaylorism/layout/_partial/archive_title.ejs","hash":"37c38ef6972ddd92668ea08983f4b34230b39d52","modified":1516157878000},{"_id":"themes/raytaylorism/layout/_partial/construction.ejs","hash":"21190b5a0d567ed4ea5d5289459690b72c1452f0","modified":1516157878000},{"_id":"themes/raytaylorism/layout/_partial/feature_guide.ejs","hash":"752d5c0a4a6f2f2228ae99bb6bede195080a15d8","modified":1516157878000},{"_id":"themes/raytaylorism/layout/_partial/footer.ejs","hash":"842244a751b5a57fc034a4d2a29ab1c7fbfeb0d1","modified":1516157878000},{"_id":"themes/raytaylorism/layout/_partial/float.ejs","hash":"42ad838e39c007226eb4151292a459173e30d8ea","modified":1516157878000},{"_id":"themes/raytaylorism/layout/_partial/head.ejs","hash":"406c0bdb3ef224bb5ec375123426a0babae2724a","modified":1516157878000},{"_id":"themes/raytaylorism/layout/_partial/pagenav.ejs","hash":"e7ada8faaee878ea4dde267d1b420bb45421670d","modified":1516157878000},{"_id":"themes/raytaylorism/layout/_partial/pagination.ejs","hash":"247c1507971b3e41ed539dd7f8d15af8e21c0d58","modified":1516157878000},{"_id":"themes/raytaylorism/layout/_partial/header.ejs","hash":"426eeb374b409a6ab6eb8e21a7213b6a6147d6f9","modified":1516157878000},{"_id":"themes/raytaylorism/layout/_partial/menu_drawer.ejs","hash":"28a46dd851b971216c788ace1ca5609d961c2446","modified":1516157878000},{"_id":"themes/raytaylorism/layout/_partial/search.ejs","hash":"1285a8ecb670f6460b31c0fbca9af13b202f5838","modified":1516157878000},{"_id":"themes/raytaylorism/layout/_partial/side_nav.ejs","hash":"b12e72453fb981924d17fa48904af6951f07450f","modified":1516157878000},{"_id":"themes/raytaylorism/layout/_partial/simple_article.ejs","hash":"fdcbb516a3745d0a70c94e565d53510d9f47693c","modified":1516157878000},{"_id":"themes/raytaylorism/layout/_partial/slider.ejs","hash":"bb7b53f6ca9c852808d955fb074f88112e51ea59","modified":1516157878000},{"_id":"themes/raytaylorism/layout/_widget/category.ejs","hash":"fb2d42083c97dfaba2717fb2e63e744259ec4530","modified":1516157878000},{"_id":"themes/raytaylorism/layout/_widget/blogroll.ejs","hash":"cf42209342e51e1729dcc9b01b1e5497f152844f","modified":1516157878000},{"_id":"themes/raytaylorism/layout/_widget/recent_posts.ejs","hash":"0025878eb4cbf17ddc909f82497e9c73e4091c20","modified":1516157878000},{"_id":"themes/raytaylorism/layout/_widget/tagcloud.ejs","hash":"1da338304f94f042606b73e235e9c725628c34ad","modified":1516157878000},{"_id":"themes/raytaylorism/layout/_widget/tag.ejs","hash":"31b93c078a03af98de504eeb0153f9c0dbc74ed9","modified":1516157878000},{"_id":"source/_posts/java-lock2/image5.png","hash":"fd154ef782bb70e69c49f478244e4f2d5b26e87f","modified":1516434645000},{"_id":"source/_posts/java-lock2/test1.png","hash":"e95f8d65bee48b55d5f73f8d29cad646a24c1d91","modified":1516434597000},{"_id":"source/_posts/java-lock2/image4.png","hash":"c86c01c1256c7adc842a3dc3ad2a7e1e98216f1f","modified":1516434635000},{"_id":"source/_posts/java-lock4/img1.png","hash":"7c0d8c174a3479106dd808506a2a578fcefcc74e","modified":1516436737000},{"_id":"source/_posts/java-lock4/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1516437000000},{"_id":"source/_posts/java-lock4/img10.png","hash":"05ac9352a0e5f2d666e54e7e8da507ccb7664458","modified":1516436928000},{"_id":"source/_posts/java-lock4/img2.png","hash":"f144646a29b3be4ad97eb0d9733a5007b62a8ec9","modified":1516436760000},{"_id":"source/_posts/szhbmnmnb/img1.jpeg","hash":"de0e84d91619ad4fd6cbfd8c282566251da9bad9","modified":1516331485000},{"_id":"source/_posts/szhbmnmnb/img4.jpeg","hash":"624c8c0b2f593e9a8ad3a7ed15cbcd6a75c5eb3c","modified":1516331679000},{"_id":"source/_posts/szhbmnmnb/img3.jpeg","hash":"f0f739aed6bd3deb2f9f629a14486dd4d71ddd7a","modified":1516331651000},{"_id":"source/_posts/szhbyhezsw/.DS_Store","hash":"70ff0a192d8f2628574c8330c046b4e8967af76d","modified":1516291216000},{"_id":"source/_posts/szhbyhezsw/bitebi.jpeg","hash":"e3e0edb8aa13ddf7814de16364d1303190416f5c","modified":1516007316000},{"_id":"themes/raytaylorism/source/js/jquery.min.js","hash":"69bb69e25ca7d5ef0935317584e6153f3fd9a88c","modified":1516157878000},{"_id":"source/_posts/java-loc5/imag1.png","hash":"bc27807baea3f70ffe422294a1c7d616b86e269a","modified":1516437689000},{"_id":"source/_posts/java-lock2/image2.png","hash":"f65e78061ed8ae2ad40566eead4dba5ccd5cd1f1","modified":1516434613000},{"_id":"source/_posts/java-lock2/image3.png","hash":"b50956d1f5b3acf03c507caa761db1728746b205","modified":1516434625000},{"_id":"source/_posts/java-lock3/imag1.png","hash":"383aea192c01b851c8c6ac2a76ea8282ba309756","modified":1516435904000},{"_id":"source/_posts/java-lock3/imag2.png","hash":"cde6854cec8b0dda0327088aae5c5f1d28e36f3f","modified":1516435918000},{"_id":"source/_posts/java-lock4/img6.png","hash":"2f17d3b7bbf9e876c45e7256a52f6a2e889a9838","modified":1516436882000},{"_id":"source/_posts/szhbmnmnb/img2.jpeg","hash":"389f52665ad815908545f1571594ec5601f64f5c","modified":1516331611000},{"_id":"themes/raytaylorism/source/css/_base/layout.styl","hash":"14a747f9fce53f586d11ed67a597a8e71a802d17","modified":1516157878000},{"_id":"themes/raytaylorism/source/css/_base/icons.css","hash":"ab167f1694ffe10c3c51d18a633efd41be121555","modified":1516157878000},{"_id":"themes/raytaylorism/source/css/_base/lib_customize.styl","hash":"5f25b295a3ad99991952f864573c0f1ccc6a1591","modified":1516157878000},{"_id":"themes/raytaylorism/source/css/_base/variable.styl","hash":"6812c6940c7c59b9fab5b41e6b832e89416d11c5","modified":1516157878000},{"_id":"themes/raytaylorism/source/css/lib/prettify-tomorrow-night-eighties.css","hash":"35e07bd7a4585363060edd558a0e9939e7e68323","modified":1516157878000},{"_id":"themes/raytaylorism/source/css/images/side-user-cover.jpg","hash":"d8d73a64d6d5af83a27e6af1d4fedef808955ba0","modified":1516157878000},{"_id":"themes/raytaylorism/source/css/lib/font-awesome.min.css","hash":"683d12731b7429d32ec7de00a6706602e403013f","modified":1516157878000},{"_id":"themes/raytaylorism/source/css/_partial/about.styl","hash":"b0f80e89e7518d49190b79985c10c8a7b24bfa19","modified":1516157878000},{"_id":"themes/raytaylorism/source/css/_partial/archive.styl","hash":"d912cf297c10e78bd90f3210d596ec87a16f74ad","modified":1516157878000},{"_id":"themes/raytaylorism/source/css/_partial/article.styl","hash":"0b3e513741555799544e0216c6595e534ff72377","modified":1516295323000},{"_id":"themes/raytaylorism/source/css/_partial/comment.styl","hash":"bfa4d7caedffffab18b29f70db9cbf2a15a5f24b","modified":1516157878000},{"_id":"themes/raytaylorism/source/css/_partial/copyright.styl","hash":"02179256607bd9018606e09207dca5b6de6a42ae","modified":1516168137000},{"_id":"themes/raytaylorism/source/css/_partial/footer.styl","hash":"92e1c226202782e5d429fbe72b98ae4e07fc0233","modified":1516157878000},{"_id":"themes/raytaylorism/source/css/_partial/header.styl","hash":"534686e8e9de54e8dd99eb1b064f5ad3a0199a4e","modified":1516157878000},{"_id":"themes/raytaylorism/source/css/_partial/index.styl","hash":"27918d50e5a69899f184280d9e0048576ac3c85d","modified":1516157878000},{"_id":"themes/raytaylorism/source/css/_partial/link_context.styl","hash":"cd403f732319354781c552d26d37bad7c4450ad5","modified":1516157878000},{"_id":"themes/raytaylorism/source/css/_partial/other.styl","hash":"710eea97e5c98a1426d1a3c0fc8f648279c7a82d","modified":1516157878000},{"_id":"themes/raytaylorism/source/css/_partial/reading.styl","hash":"7abecdfc7fd21f7d11f1568d430418296b34945a","modified":1516157878000},{"_id":"themes/raytaylorism/source/css/_partial/side_nav.styl","hash":"b239b6b55e87e86d038d6aa821beeb66a9cbaf39","modified":1516157878000},{"_id":"themes/raytaylorism/source/css/_partial/search.styl","hash":"caef055a95598415656c417e662264397363704b","modified":1516157878000},{"_id":"themes/raytaylorism/source/css/_partial/slider.styl","hash":"8933a67e92680dbdfd6af7c2ecaa8d86346df907","modified":1516157878000},{"_id":"themes/raytaylorism/source/css/_partial/syntax.styl","hash":"20df0f8a54729980094514fc726b51591ada1ad7","modified":1516157878000},{"_id":"themes/raytaylorism/source/css/_partial/tablecontents.styl","hash":"e04fa0e7664065077750a7223ae3390cc84a4c56","modified":1516157878000},{"_id":"themes/raytaylorism/source/images/bookImg/bdlq.jpg","hash":"9c939f93d9904357927d744053a7bb2f0c4de419","modified":1516157878000},{"_id":"themes/raytaylorism/source/images/bookImg/block_chain.jpg","hash":"bdeced77e810b3735825575ef0c3b1b1521bf7a1","modified":1516157878000},{"_id":"themes/raytaylorism/source/images/bookImg/java_jvm.jpg","hash":"ec3cc28588792a97e6d096a35bc0882731d48523","modified":1516157878000},{"_id":"themes/raytaylorism/source/images/bookImg/mysql.jpg","hash":"19feb18fa6da070c679624cfce3299b64fab4fea","modified":1516157878000},{"_id":"themes/raytaylorism/source/images/bookImg/santi.jpg","hash":"ce7caeceb3eb3fb347cf425ddd0ad8a07c49fbed","modified":1516157878000},{"_id":"themes/raytaylorism/source/images/bookImg/rljs.jpg","hash":"8cd1ad99125cac7b88fc795b0a4cb7a08354b43d","modified":1516157878000},{"_id":"themes/raytaylorism/source/images/weixin2.png","hash":"9f54a219c41bfea3a767a97e3bda8d73b32a2579","modified":1516157878000},{"_id":"themes/raytaylorism/source/images/zhifubao2.png","hash":"7ed37726ff86f69d0f4ab6d0669e15821f32ff67","modified":1516157878000},{"_id":"themes/raytaylorism/source/js/materialize.min.js","hash":"c9308fbe808a149aa11061af40a4be5f391cccee","modified":1516157878000},{"_id":"themes/raytaylorism/layout/_partial/plugin/analytics.ejs","hash":"b88303620558f833c6d7505af762d12e21f90f90","modified":1516157878000},{"_id":"themes/raytaylorism/layout/_partial/plugin/google_code_prettify.ejs","hash":"3aecf1e3e706417131918e3f489557e2d5f438af","modified":1516157878000},{"_id":"themes/raytaylorism/layout/_partial/plugin/comment.ejs","hash":"347fa78d6d8786adde1b8523c1415eab62bb7e30","modified":1516293077000},{"_id":"themes/raytaylorism/layout/_partial/plugin/main_javascript.ejs","hash":"cc246117386c6cbde13e3b4316ba5e85af659df6","modified":1516157878000},{"_id":"themes/raytaylorism/layout/_partial/plugin/mathjax.ejs","hash":"f0e5e249d2bd6dc2a72baf0f71d2d67463c7b3ad","modified":1516157878000},{"_id":"themes/raytaylorism/layout/_partial/post/category.ejs","hash":"f48f487dc952f5703d9bc7737fc6eb2e6b439608","modified":1516157878000},{"_id":"themes/raytaylorism/layout/_partial/plugin/page_stat.ejs","hash":"25a44cc3f4828efcd0e1c914f25fe9a49bffc253","modified":1516157878000},{"_id":"themes/raytaylorism/layout/_partial/plugin/reward.ejs","hash":"fde8d42347f72f3b3594c36b1f3c94c6d90a31b6","modified":1516157878000},{"_id":"themes/raytaylorism/layout/_partial/plugin/noscript.ejs","hash":"182650c8be93b093997ac4d5fe14af2f835b98d9","modified":1516157878000},{"_id":"themes/raytaylorism/layout/_partial/post/prevnext.ejs","hash":"dbb790cf454fda546c82a411a3b50ebb0129a1e8","modified":1516157878000},{"_id":"themes/raytaylorism/layout/_partial/post/readtimes.ejs","hash":"c829d0598f9906f663a8ace1c86f2aa6024d642c","modified":1516157878000},{"_id":"themes/raytaylorism/layout/_partial/post/copyright.ejs","hash":"8da16276a4cef519764b72c09c18d3fb2a50be63","modified":1516182885000},{"_id":"themes/raytaylorism/layout/_partial/post/gallery.ejs","hash":"0adb673358b42b9ac52b2c1f72b92368cdcf5f2e","modified":1516157878000},{"_id":"themes/raytaylorism/layout/_partial/post/tablecontents.ejs","hash":"a851061909d4e27321d1792a262f55385529fb2d","modified":1516157878000},{"_id":"themes/raytaylorism/layout/_partial/post/tag.ejs","hash":"36cbf8f85f93be441d47d1a4a0584afd85480d4f","modified":1516157878000},{"_id":"themes/raytaylorism/layout/_partial/post/title.ejs","hash":"c6c44ea53bbfd3838c7bf7cc236c6db1a4b9460e","modified":1516157878000},{"_id":"themes/raytaylorism/layout/_partial/post/time.ejs","hash":"e11498240ece670129a2fbfb2fed16ff315344d4","modified":1516157878000},{"_id":"source/_posts/java-lock4/img5.png","hash":"05a6773ea992ca4e41f9a8345e6a5b86795192a7","modified":1516436869000},{"_id":"source/_posts/java-lock4/img7.png","hash":"3966bb0eafb12bff815e3cccdbd3f2d9e078e03f","modified":1516436893000},{"_id":"themes/raytaylorism/source/css/lib/materialize.min.css","hash":"41d1676b73eec020eaeb9b507dcbcd30069ae8cb","modified":1516157878000},{"_id":"source/_posts/java-lock4/img12.png","hash":"51f9589f0d402a98c7a09a1637dfd91e636f4b64","modified":1516436950000},{"_id":"source/_posts/java-lock4/img4.png","hash":"3c02e669ddc8dcf8dd434420ef8feef519303c22","modified":1516436781000},{"_id":"source/_posts/java-lock4/img9.png","hash":"234d3524a472f80a51d0bef9ac333cc17c458f93","modified":1516436915000},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1516157878000},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1516157878000},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1516157878000},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1516157878000},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1516157878000},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1516157878000},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1516157878000},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1516157878000},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1516157878000},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1516157878000},{"_id":"themes/raytaylorism/source/images/bg2.jpg","hash":"2606f604687cdb6c77fe8b2e8ee2dfe83719fc03","modified":1516157878000},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1516157878000},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1516157878000},{"_id":"source/_posts/java-lock4/img3.png","hash":"dac144240111019637595e98e244f60f417b69a5","modified":1516436772000},{"_id":"source/_posts/java-lock4/img8.png","hash":"5b545b4e65bc3b1b024a30a76dc09aab061a8046","modified":1516436904000},{"_id":"themes/raytaylorism/source/css/font/font-awesome/fontawesome-webfont.eot","hash":"986eed8dca049714e43eeebcb3932741a4bec76d","modified":1516157878000},{"_id":"themes/raytaylorism/source/css/font/font-awesome/FontAwesome.otf","hash":"42c179eef588854b5ec151bcf6a3f58aa8b79b11","modified":1516157878000},{"_id":"themes/raytaylorism/source/css/font/font-awesome/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1516157878000},{"_id":"themes/raytaylorism/source/css/font/font-awesome/fontawesome-webfont.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1516157878000},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1516157878000},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1516157878000},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1516157878000},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1516157878000},{"_id":"themes/raytaylorism/source/images/bg1.jpg","hash":"defe0b5e32552f64506022201bd17c690a8b2ca7","modified":1516157878000},{"_id":"source/_posts/java-lock4/img11.png","hash":"8e616d0db9552e0644f0de102a50ea4037969436","modified":1516436937000},{"_id":"themes/raytaylorism/source/css/font/font-awesome/fontawesome-webfont.ttf","hash":"6484f1af6b485d5096b71b344e67f4164c33dd1f","modified":1516157878000},{"_id":"themes/raytaylorism/source/css/font/font-awesome/fontawesome-webfont.svg","hash":"b06b5c8f67fd632cdc62a33b62ae4f74194131b3","modified":1516157878000},{"_id":"themes/raytaylorism/source/images/bg31.jpg","hash":"083924780eaedcbf6e21f2bee15c7f895505f5eb","modified":1516157878000},{"_id":"themes/raytaylorism/source/images/bg3.jpg","hash":"1cd0260c171dd7e9a6fbb871380442484ecfd015","modified":1516157878000}],"Category":[{"name":"技术","_id":"cjcn41j960002cfs66i761t57"},{"name":"Java","parent":"cjcn41j960002cfs66i761t57","_id":"cjcn41j9r000ecfs65xcuvm4b"},{"name":"区块链","_id":"cjcn41j9v000pcfs6h9q3hnqh"}],"Data":[{"_id":"hint","data":{"new":{"selector":[".menu-reading",".menu-about"]}}},{"_id":"about","data":{"avatar":"/images/head2.jpg","name":"清泉","tag":"互联网/Java/区块链/金融","desc":"不甘心只懂技术的技术男","skills":{"Java/JVM":9,"Javascript":7,"Go":6,"invisible-split-line-1":-1,"区块链":8,"金融理财":7},"reward":["/images/weixin2.png","/images/zhifubao2.png"]}},{"_id":"link","data":{"social":{"weibo":"https://weibo.com/u/6182358871?is_all=1","github":"https://github.com/yongzhidai","rss":"/atom.xml"},"extern":{"博客园博客":"http://www.cnblogs.com/metoy/","博客园博客(备)":"http://www.cnblogs.com/qingquanzi/","知乎":"https://www.zhihu.com/people/yongzhi.dyz"}}},{"_id":"reading","data":{"define":{"readed":"技术类","reading":"金融类","wanted":"其它"},"contents":{"readed":[{"title":"深入理解Java虚拟机（第2版）","cover":"/images/bookImg/java_jvm.jpg","review":"JVM入门必读","score":"8.9","doubanLink":"https://book.douban.com/subject/24722612/"},{"title":"深入浅出MySQL","cover":"/images/bookImg/mysql.jpg","review":"内容通俗易懂，比较不错。","score":"7.7","doubanLink":"https://book.douban.com/subject/25817684/"},{"title":"区块链技术指南","cover":"/images/bookImg/block_chain.jpg","review":"区块链学习指南！","score":"6.3","doubanLink":"https://book.douban.com/subject/26959322/"}],"reading":[{"title":"彼得·林奇的成功投资","cover":"/images/bookImg/bdlq.jpg","review":"","score":"8.7","doubanLink":"https://book.douban.com/subject/1958714/"}],"wanted":[{"title":"人类简史","cover":"/images/bookImg/rljs.jpg","review":"","score":"9.1","doubanLink":"https://book.douban.com/subject/25985021/"},{"title":"三体","cover":"/images/bookImg/santi.jpg","review":"","score":"8.8","doubanLink":"https://book.douban.com/subject/2567698/"}]}}},{"_id":"slider","data":[{"image":"/images/bg1.jpg","align":"center","title":"欢迎你，朋友！","subtitle":"","link":"/"},{"image":"/images/bg2.jpg","align":"left","title":"我的知识星球圈子","subtitle":"点击微信扫码加入","link":"https://t.zsxq.com/EUn6IIE"},{"image":"/images/bg3.jpg","align":"right","title":"我的微信公众号","subtitle":"","link":null}]}],"Page":[{"title":"读书","layout":"reading","_content":"","source":"reading/index.md","raw":"title: 读书\nlayout: reading\n---\n","date":"2018-01-17T02:57:58.000Z","updated":"2018-01-17T02:57:58.000Z","path":"reading/index.html","comments":1,"_id":"cjcn41jao001pcfs6odvzk1cp","content":"","site":{"data":{"hint":{"new":{"selector":[".menu-reading",".menu-about"]}},"about":{"avatar":"/images/head2.jpg","name":"清泉","tag":"互联网/Java/区块链/金融","desc":"不甘心只懂技术的技术男","skills":{"Java/JVM":9,"Javascript":7,"Go":6,"invisible-split-line-1":-1,"区块链":8,"金融理财":7},"reward":["/images/weixin2.png","/images/zhifubao2.png"]},"link":{"social":{"weibo":"https://weibo.com/u/6182358871?is_all=1","github":"https://github.com/yongzhidai","rss":"/atom.xml"},"extern":{"博客园博客":"http://www.cnblogs.com/metoy/","博客园博客(备)":"http://www.cnblogs.com/qingquanzi/","知乎":"https://www.zhihu.com/people/yongzhi.dyz"}},"reading":{"define":{"readed":"技术类","reading":"金融类","wanted":"其它"},"contents":{"readed":[{"title":"深入理解Java虚拟机（第2版）","cover":"/images/bookImg/java_jvm.jpg","review":"JVM入门必读","score":"8.9","doubanLink":"https://book.douban.com/subject/24722612/"},{"title":"深入浅出MySQL","cover":"/images/bookImg/mysql.jpg","review":"内容通俗易懂，比较不错。","score":"7.7","doubanLink":"https://book.douban.com/subject/25817684/"},{"title":"区块链技术指南","cover":"/images/bookImg/block_chain.jpg","review":"区块链学习指南！","score":"6.3","doubanLink":"https://book.douban.com/subject/26959322/"}],"reading":[{"title":"彼得·林奇的成功投资","cover":"/images/bookImg/bdlq.jpg","review":"","score":"8.7","doubanLink":"https://book.douban.com/subject/1958714/"}],"wanted":[{"title":"人类简史","cover":"/images/bookImg/rljs.jpg","review":"","score":"9.1","doubanLink":"https://book.douban.com/subject/25985021/"},{"title":"三体","cover":"/images/bookImg/santi.jpg","review":"","score":"8.8","doubanLink":"https://book.douban.com/subject/2567698/"}]}},"slider":[{"image":"/images/bg1.jpg","align":"center","title":"欢迎你，朋友！","subtitle":"","link":"/"},{"image":"/images/bg2.jpg","align":"left","title":"我的知识星球圈子","subtitle":"点击微信扫码加入","link":"https://t.zsxq.com/EUn6IIE"},{"image":"/images/bg3.jpg","align":"right","title":"我的微信公众号","subtitle":"","link":null}]}},"excerpt":"","more":""},{"title":"关于","layout":"about","_content":"大家好，我是清泉。欢迎来到我的个人技术博客。\n\n本人多年从事互联网开发，以Java后端开发为主，其它为辅。\n先后在某上市游戏公司做页游服务端开发，也曾在创业公司做移动APP后端架构设计，目前在阿里巴巴从事资深研发的工作。","source":"about/index.md","raw":"title: 关于\nlayout: about\n---\n大家好，我是清泉。欢迎来到我的个人技术博客。\n\n本人多年从事互联网开发，以Java后端开发为主，其它为辅。\n先后在某上市游戏公司做页游服务端开发，也曾在创业公司做移动APP后端架构设计，目前在阿里巴巴从事资深研发的工作。","date":"2018-01-17T02:57:58.000Z","updated":"2018-01-17T02:57:58.000Z","path":"about/index.html","comments":1,"_id":"cjcn41jap001qcfs6gd5opq7n","content":"<p>大家好，我是清泉。欢迎来到我的个人技术博客。</p>\n<p>本人多年从事互联网开发，以Java后端开发为主，其它为辅。<br>先后在某上市游戏公司做页游服务端开发，也曾在创业公司做移动APP后端架构设计，目前在阿里巴巴从事资深研发的工作。</p>\n","site":{"data":{"hint":{"new":{"selector":[".menu-reading",".menu-about"]}},"about":{"avatar":"/images/head2.jpg","name":"清泉","tag":"互联网/Java/区块链/金融","desc":"不甘心只懂技术的技术男","skills":{"Java/JVM":9,"Javascript":7,"Go":6,"invisible-split-line-1":-1,"区块链":8,"金融理财":7},"reward":["/images/weixin2.png","/images/zhifubao2.png"]},"link":{"social":{"weibo":"https://weibo.com/u/6182358871?is_all=1","github":"https://github.com/yongzhidai","rss":"/atom.xml"},"extern":{"博客园博客":"http://www.cnblogs.com/metoy/","博客园博客(备)":"http://www.cnblogs.com/qingquanzi/","知乎":"https://www.zhihu.com/people/yongzhi.dyz"}},"reading":{"define":{"readed":"技术类","reading":"金融类","wanted":"其它"},"contents":{"readed":[{"title":"深入理解Java虚拟机（第2版）","cover":"/images/bookImg/java_jvm.jpg","review":"JVM入门必读","score":"8.9","doubanLink":"https://book.douban.com/subject/24722612/"},{"title":"深入浅出MySQL","cover":"/images/bookImg/mysql.jpg","review":"内容通俗易懂，比较不错。","score":"7.7","doubanLink":"https://book.douban.com/subject/25817684/"},{"title":"区块链技术指南","cover":"/images/bookImg/block_chain.jpg","review":"区块链学习指南！","score":"6.3","doubanLink":"https://book.douban.com/subject/26959322/"}],"reading":[{"title":"彼得·林奇的成功投资","cover":"/images/bookImg/bdlq.jpg","review":"","score":"8.7","doubanLink":"https://book.douban.com/subject/1958714/"}],"wanted":[{"title":"人类简史","cover":"/images/bookImg/rljs.jpg","review":"","score":"9.1","doubanLink":"https://book.douban.com/subject/25985021/"},{"title":"三体","cover":"/images/bookImg/santi.jpg","review":"","score":"8.8","doubanLink":"https://book.douban.com/subject/2567698/"}]}},"slider":[{"image":"/images/bg1.jpg","align":"center","title":"欢迎你，朋友！","subtitle":"","link":"/"},{"image":"/images/bg2.jpg","align":"left","title":"我的知识星球圈子","subtitle":"点击微信扫码加入","link":"https://t.zsxq.com/EUn6IIE"},{"image":"/images/bg3.jpg","align":"right","title":"我的微信公众号","subtitle":"","link":null}]}},"excerpt":"","more":"<p>大家好，我是清泉。欢迎来到我的个人技术博客。</p>\n<p>本人多年从事互联网开发，以Java后端开发为主，其它为辅。<br>先后在某上市游戏公司做页游服务端开发，也曾在创业公司做移动APP后端架构设计，目前在阿里巴巴从事资深研发的工作。</p>\n"}],"Post":[{"title":"自己动手写把”锁”之---终极篇","date":"2018-01-10T08:05:41.000Z","_content":"锁是整个Java并发包的实现基础，通过学习本系列文章，将对你理解Java并发包的本质有很大的帮助。\n<!--more-->\n\n前边几篇中，我已经把实现锁用到的技术，进行了一一讲述。这其中有原子性、内存模型、LockSupport还有CAS，掌握了这些技术，即使没有本篇，你也完全有能力自己写一把锁出来。但为了本系列的完整性，我在这里还是把最后这一篇补上。\n\n先说一下锁的运行流程：多个线程抢占同一把锁，只有一个线程能抢占成功，抢占成功的线程继续执行下边的逻辑，抢占失败的线程进入阻塞等待。抢占成功的线程执行完毕后，释放锁，并从等待的线程中挑一个唤醒，让它继续竞争锁。\n\n转变成程序实现：我们首先定一个state变量，state=0表示未被加锁，state=1表示被加锁。多个线程在抢占锁时，竞争将state变量从0修改为1，修改成功的线程则加锁成功。state从0修改为1的过程，这里使用cas操作，以保证只有一个线程加锁成功，同时state需要用volatile修饰，已解决线程可见的问题。加锁成功的线程执行完业务逻辑后，将state从1修改回0，同时从等待的线程中选择一个线程唤醒。所以加锁失败的线程，在加锁失败时需要将自己放到一个集合中，以等待被唤醒。这个集合需要支持多线程并发安全，在这里我通过一个链表来实现，通过CAS操作来实现并发安全。\n\n把思路说清楚了，咱们看下代码实现。\n\n首先咱们实现一个ThreadList，这是一个链表结合，用来存放等待的处于等待唤醒的线程：\n\n```\npublic class ThreadList{\n    private volatile Node head = null;\n    private static  long headOffset;\n    private static Unsafe unsafe;\n    static {\n        try {\n            Constructor<Unsafe> constructor = Unsafe.class.getDeclaredConstructor(new Class<?>[0]);\n            constructor.setAccessible(true);\n            unsafe = constructor.newInstance(new Object[0]);\n            headOffset = unsafe.objectFieldOffset(ThreadList.class.getDeclaredField(\"head\"));\n        }catch (Exception e){\n        }\n    }\n    /**\n     *\n     * @param thread\n     * @return 是否只有当前一个线程在等待\n     */\n    public boolean insert(Thread thread){\n        Node node = new Node(thread);\n        for(;;){\n            Node first = getHead();\n            node.setNext(first);\n            if(unsafe.compareAndSwapObject(this, headOffset,first,node)){\n                return first==null?true:false;\n            }\n        }\n    }\n    public Thread pop(){\n        Node first = null;\n        for(;;){\n            first = getHead();\n            Node next = null;\n            if(first!=null){\n                next = first.getNext();\n            }\n            if(unsafe.compareAndSwapObject(this, headOffset,first,next)){\n                break;\n            }\n        }\n        return first==null?null:first.getThread();\n    }\n    private Node getHead(){\n        return this.head;\n    }\n    private static class Node{\n        volatile Node next;\n        volatile Thread thread;\n        public Node(Thread thread){\n            this.thread = thread;\n        }\n        public void setNext(Node next){\n            this.next = next;\n        }\n        public Node getNext(){\n            return next;\n        }\n        public Thread getThread(){\n            return this.thread;\n        }\n    }\n}\n```\n\n加锁失败的线程，调用insert方法将自己放入这个集合中，insert方法里将线程封装到Node中，然后使用cas操作将node添加到列表的头部。同样为了线程可见的问题，Node里的thread和next都用volatile修饰。\n加锁成功的线程，调用pop方法获得一个线程，进行唤醒，这里边同样使用了cas操作来保证线程安全。\n\n接下来在看看锁的实现：\n\n```\npublic class MyLock {\n    private volatile int state = 0;\n    private ThreadList threadList = new ThreadList();\n    private static  long stateOffset;\n    private static Unsafe unsafe;\n    static {\n       try {\n           Constructor<Unsafe> constructor = Unsafe.class.getDeclaredConstructor(new Class<?>[0]);\n           constructor.setAccessible(true);\n           unsafe = constructor.newInstance(new Object[0]);\n           stateOffset = unsafe.objectFieldOffset(MyLock.class.getDeclaredField(\"state\"));\n       }catch (Exception e){\n       }\n\n    }\n    public void lock(){\n        if(compareAndSetState(0,1)){\n        }else{\n            addNodeAndWait();\n        }\n    }\n    public void unLock(){\n        compareAndSetState(1,0);\n        Thread thread = threadList.pop();\n        if(thread != null){\n            LockSupport.unpark(thread);\n        }\n    }\n    private void addNodeAndWait(){\n        //如果当前只有一个等待线程时，重新获取一下锁，防止永远不被唤醒。\n        boolean isOnlyOne = threadList.insert(Thread.currentThread());\n        if(isOnlyOne && compareAndSetState(0,1)){\n            return;\n        }\n        LockSupport.park(this);//线程被挂起\n        if(compareAndSetState(0,1)){//线程被唤醒后继续竞争锁\n            return;\n        }else{\n            addNodeAndWait();\n        }\n    }\n    private boolean compareAndSetState(int expect,int update){\n        return unsafe.compareAndSwapInt(this,stateOffset,expect,update);\n    }\n}\n```\n\n线程调用lock方法进行加锁，cas将state从0修改1，修改成功则加锁成功，lock方法返回，否则调用addNodeAndWait方法将线程加入ThreadList队列，并使用LockSupport将线程挂起。(ThreadList的insert方法，返回一个boolean类型的值，用来处理一个特殊情况的，稍后再说。)\n\n获得锁的线程执行完业务逻辑后，调用unLock方法释放锁，即通过cas操作将state修改回0，同时从ThreadList拿出一个等待线程，调用LockSupport的unpark方法，来将它唤醒。\n\n\n将我们在《自己动手写把\"锁\"---锁的作用》的例子修改为如下，来测试下咱们的锁的效果：\n\n\n```\npublic class TestMyLock {\n    private static  List<Integer> list = new ArrayList<>();\n    private static MyLock myLock = new MyLock();\n    public static void main(String[] args){\n        Thread t1 = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                for(int i=0;i<10000;i++){\n                    add(i);\n                }\n            }\n        });\n        Thread t2 = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                print();\n            }\n        });\n        t1.start();\n        t2.start();\n    }\n    private static void add(int i){\n        myLock.lock();\n        list.add(i);\n        myLock.unLock();\n    }\n    private static void print(){\n        myLock.lock();\n        Iterator<Integer> iterator = list.iterator();\n        while (iterator.hasNext()){\n            System.out.println(iterator.next());\n        }\n        myLock.unLock();\n    }\n}\n```\n\nok,正常运行了，不在报错。\n\n到这里咱们的一个简单地锁已经实现了。接下来我再把上边的，一个没讲的细节说一下。即如下这段代码：\n\n```\nboolean isOnlyOne = threadList.insert(Thread.currentThread());\n        if(isOnlyOne && compareAndSetState(0,1)){\n            return;\n        }\n```\n\nThreadList的insert方法，在插入成功后，会判断当前链表中是否只有自己一个线程在等待，如果是则返回true。从而进入后边的if语句。这个逻辑的用意就是：如果只有自己一个线程在等待时，则试着通过cas操作重新获取锁，如果获取失败才进入阻塞等待。它是用来解决以下边界情况：\n\n![image](java-loc5/imag1.png)\n\n在只有线程A和线程B两个线程的时候，如果没有以上判断逻辑，线程B将有可能会永远处于阻塞不被唤醒。","source":"_posts/java-loc5.md","raw":"---\ntitle: 自己动手写把”锁”之---终极篇\ncategories:\n  - 技术\n  - Java\ntags:\n  - 锁\ndate: 2018-01-10 16:05:41\n---\n锁是整个Java并发包的实现基础，通过学习本系列文章，将对你理解Java并发包的本质有很大的帮助。\n<!--more-->\n\n前边几篇中，我已经把实现锁用到的技术，进行了一一讲述。这其中有原子性、内存模型、LockSupport还有CAS，掌握了这些技术，即使没有本篇，你也完全有能力自己写一把锁出来。但为了本系列的完整性，我在这里还是把最后这一篇补上。\n\n先说一下锁的运行流程：多个线程抢占同一把锁，只有一个线程能抢占成功，抢占成功的线程继续执行下边的逻辑，抢占失败的线程进入阻塞等待。抢占成功的线程执行完毕后，释放锁，并从等待的线程中挑一个唤醒，让它继续竞争锁。\n\n转变成程序实现：我们首先定一个state变量，state=0表示未被加锁，state=1表示被加锁。多个线程在抢占锁时，竞争将state变量从0修改为1，修改成功的线程则加锁成功。state从0修改为1的过程，这里使用cas操作，以保证只有一个线程加锁成功，同时state需要用volatile修饰，已解决线程可见的问题。加锁成功的线程执行完业务逻辑后，将state从1修改回0，同时从等待的线程中选择一个线程唤醒。所以加锁失败的线程，在加锁失败时需要将自己放到一个集合中，以等待被唤醒。这个集合需要支持多线程并发安全，在这里我通过一个链表来实现，通过CAS操作来实现并发安全。\n\n把思路说清楚了，咱们看下代码实现。\n\n首先咱们实现一个ThreadList，这是一个链表结合，用来存放等待的处于等待唤醒的线程：\n\n```\npublic class ThreadList{\n    private volatile Node head = null;\n    private static  long headOffset;\n    private static Unsafe unsafe;\n    static {\n        try {\n            Constructor<Unsafe> constructor = Unsafe.class.getDeclaredConstructor(new Class<?>[0]);\n            constructor.setAccessible(true);\n            unsafe = constructor.newInstance(new Object[0]);\n            headOffset = unsafe.objectFieldOffset(ThreadList.class.getDeclaredField(\"head\"));\n        }catch (Exception e){\n        }\n    }\n    /**\n     *\n     * @param thread\n     * @return 是否只有当前一个线程在等待\n     */\n    public boolean insert(Thread thread){\n        Node node = new Node(thread);\n        for(;;){\n            Node first = getHead();\n            node.setNext(first);\n            if(unsafe.compareAndSwapObject(this, headOffset,first,node)){\n                return first==null?true:false;\n            }\n        }\n    }\n    public Thread pop(){\n        Node first = null;\n        for(;;){\n            first = getHead();\n            Node next = null;\n            if(first!=null){\n                next = first.getNext();\n            }\n            if(unsafe.compareAndSwapObject(this, headOffset,first,next)){\n                break;\n            }\n        }\n        return first==null?null:first.getThread();\n    }\n    private Node getHead(){\n        return this.head;\n    }\n    private static class Node{\n        volatile Node next;\n        volatile Thread thread;\n        public Node(Thread thread){\n            this.thread = thread;\n        }\n        public void setNext(Node next){\n            this.next = next;\n        }\n        public Node getNext(){\n            return next;\n        }\n        public Thread getThread(){\n            return this.thread;\n        }\n    }\n}\n```\n\n加锁失败的线程，调用insert方法将自己放入这个集合中，insert方法里将线程封装到Node中，然后使用cas操作将node添加到列表的头部。同样为了线程可见的问题，Node里的thread和next都用volatile修饰。\n加锁成功的线程，调用pop方法获得一个线程，进行唤醒，这里边同样使用了cas操作来保证线程安全。\n\n接下来在看看锁的实现：\n\n```\npublic class MyLock {\n    private volatile int state = 0;\n    private ThreadList threadList = new ThreadList();\n    private static  long stateOffset;\n    private static Unsafe unsafe;\n    static {\n       try {\n           Constructor<Unsafe> constructor = Unsafe.class.getDeclaredConstructor(new Class<?>[0]);\n           constructor.setAccessible(true);\n           unsafe = constructor.newInstance(new Object[0]);\n           stateOffset = unsafe.objectFieldOffset(MyLock.class.getDeclaredField(\"state\"));\n       }catch (Exception e){\n       }\n\n    }\n    public void lock(){\n        if(compareAndSetState(0,1)){\n        }else{\n            addNodeAndWait();\n        }\n    }\n    public void unLock(){\n        compareAndSetState(1,0);\n        Thread thread = threadList.pop();\n        if(thread != null){\n            LockSupport.unpark(thread);\n        }\n    }\n    private void addNodeAndWait(){\n        //如果当前只有一个等待线程时，重新获取一下锁，防止永远不被唤醒。\n        boolean isOnlyOne = threadList.insert(Thread.currentThread());\n        if(isOnlyOne && compareAndSetState(0,1)){\n            return;\n        }\n        LockSupport.park(this);//线程被挂起\n        if(compareAndSetState(0,1)){//线程被唤醒后继续竞争锁\n            return;\n        }else{\n            addNodeAndWait();\n        }\n    }\n    private boolean compareAndSetState(int expect,int update){\n        return unsafe.compareAndSwapInt(this,stateOffset,expect,update);\n    }\n}\n```\n\n线程调用lock方法进行加锁，cas将state从0修改1，修改成功则加锁成功，lock方法返回，否则调用addNodeAndWait方法将线程加入ThreadList队列，并使用LockSupport将线程挂起。(ThreadList的insert方法，返回一个boolean类型的值，用来处理一个特殊情况的，稍后再说。)\n\n获得锁的线程执行完业务逻辑后，调用unLock方法释放锁，即通过cas操作将state修改回0，同时从ThreadList拿出一个等待线程，调用LockSupport的unpark方法，来将它唤醒。\n\n\n将我们在《自己动手写把\"锁\"---锁的作用》的例子修改为如下，来测试下咱们的锁的效果：\n\n\n```\npublic class TestMyLock {\n    private static  List<Integer> list = new ArrayList<>();\n    private static MyLock myLock = new MyLock();\n    public static void main(String[] args){\n        Thread t1 = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                for(int i=0;i<10000;i++){\n                    add(i);\n                }\n            }\n        });\n        Thread t2 = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                print();\n            }\n        });\n        t1.start();\n        t2.start();\n    }\n    private static void add(int i){\n        myLock.lock();\n        list.add(i);\n        myLock.unLock();\n    }\n    private static void print(){\n        myLock.lock();\n        Iterator<Integer> iterator = list.iterator();\n        while (iterator.hasNext()){\n            System.out.println(iterator.next());\n        }\n        myLock.unLock();\n    }\n}\n```\n\nok,正常运行了，不在报错。\n\n到这里咱们的一个简单地锁已经实现了。接下来我再把上边的，一个没讲的细节说一下。即如下这段代码：\n\n```\nboolean isOnlyOne = threadList.insert(Thread.currentThread());\n        if(isOnlyOne && compareAndSetState(0,1)){\n            return;\n        }\n```\n\nThreadList的insert方法，在插入成功后，会判断当前链表中是否只有自己一个线程在等待，如果是则返回true。从而进入后边的if语句。这个逻辑的用意就是：如果只有自己一个线程在等待时，则试着通过cas操作重新获取锁，如果获取失败才进入阻塞等待。它是用来解决以下边界情况：\n\n![image](java-loc5/imag1.png)\n\n在只有线程A和线程B两个线程的时候，如果没有以上判断逻辑，线程B将有可能会永远处于阻塞不被唤醒。","slug":"java-loc5","published":1,"updated":"2018-01-20T08:44:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcn41j8y0000cfs6ie9fdkg3","content":"<p>锁是整个Java并发包的实现基础，通过学习本系列文章，将对你理解Java并发包的本质有很大的帮助。<br><a id=\"more\"></a></p>\n<p>前边几篇中，我已经把实现锁用到的技术，进行了一一讲述。这其中有原子性、内存模型、LockSupport还有CAS，掌握了这些技术，即使没有本篇，你也完全有能力自己写一把锁出来。但为了本系列的完整性，我在这里还是把最后这一篇补上。</p>\n<p>先说一下锁的运行流程：多个线程抢占同一把锁，只有一个线程能抢占成功，抢占成功的线程继续执行下边的逻辑，抢占失败的线程进入阻塞等待。抢占成功的线程执行完毕后，释放锁，并从等待的线程中挑一个唤醒，让它继续竞争锁。</p>\n<p>转变成程序实现：我们首先定一个state变量，state=0表示未被加锁，state=1表示被加锁。多个线程在抢占锁时，竞争将state变量从0修改为1，修改成功的线程则加锁成功。state从0修改为1的过程，这里使用cas操作，以保证只有一个线程加锁成功，同时state需要用volatile修饰，已解决线程可见的问题。加锁成功的线程执行完业务逻辑后，将state从1修改回0，同时从等待的线程中选择一个线程唤醒。所以加锁失败的线程，在加锁失败时需要将自己放到一个集合中，以等待被唤醒。这个集合需要支持多线程并发安全，在这里我通过一个链表来实现，通过CAS操作来实现并发安全。</p>\n<p>把思路说清楚了，咱们看下代码实现。</p>\n<p>首先咱们实现一个ThreadList，这是一个链表结合，用来存放等待的处于等待唤醒的线程：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ThreadList&#123;</span><br><span class=\"line\">    private volatile Node head = null;</span><br><span class=\"line\">    private static  long headOffset;</span><br><span class=\"line\">    private static Unsafe unsafe;</span><br><span class=\"line\">    static &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            Constructor&lt;Unsafe&gt; constructor = Unsafe.class.getDeclaredConstructor(new Class&lt;?&gt;[0]);</span><br><span class=\"line\">            constructor.setAccessible(true);</span><br><span class=\"line\">            unsafe = constructor.newInstance(new Object[0]);</span><br><span class=\"line\">            headOffset = unsafe.objectFieldOffset(ThreadList.class.getDeclaredField(&quot;head&quot;));</span><br><span class=\"line\">        &#125;catch (Exception e)&#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param thread</span><br><span class=\"line\">     * @return 是否只有当前一个线程在等待</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public boolean insert(Thread thread)&#123;</span><br><span class=\"line\">        Node node = new Node(thread);</span><br><span class=\"line\">        for(;;)&#123;</span><br><span class=\"line\">            Node first = getHead();</span><br><span class=\"line\">            node.setNext(first);</span><br><span class=\"line\">            if(unsafe.compareAndSwapObject(this, headOffset,first,node))&#123;</span><br><span class=\"line\">                return first==null?true:false;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public Thread pop()&#123;</span><br><span class=\"line\">        Node first = null;</span><br><span class=\"line\">        for(;;)&#123;</span><br><span class=\"line\">            first = getHead();</span><br><span class=\"line\">            Node next = null;</span><br><span class=\"line\">            if(first!=null)&#123;</span><br><span class=\"line\">                next = first.getNext();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if(unsafe.compareAndSwapObject(this, headOffset,first,next))&#123;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return first==null?null:first.getThread();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    private Node getHead()&#123;</span><br><span class=\"line\">        return this.head;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    private static class Node&#123;</span><br><span class=\"line\">        volatile Node next;</span><br><span class=\"line\">        volatile Thread thread;</span><br><span class=\"line\">        public Node(Thread thread)&#123;</span><br><span class=\"line\">            this.thread = thread;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        public void setNext(Node next)&#123;</span><br><span class=\"line\">            this.next = next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        public Node getNext()&#123;</span><br><span class=\"line\">            return next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        public Thread getThread()&#123;</span><br><span class=\"line\">            return this.thread;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>加锁失败的线程，调用insert方法将自己放入这个集合中，insert方法里将线程封装到Node中，然后使用cas操作将node添加到列表的头部。同样为了线程可见的问题，Node里的thread和next都用volatile修饰。<br>加锁成功的线程，调用pop方法获得一个线程，进行唤醒，这里边同样使用了cas操作来保证线程安全。</p>\n<p>接下来在看看锁的实现：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class MyLock &#123;</span><br><span class=\"line\">    private volatile int state = 0;</span><br><span class=\"line\">    private ThreadList threadList = new ThreadList();</span><br><span class=\"line\">    private static  long stateOffset;</span><br><span class=\"line\">    private static Unsafe unsafe;</span><br><span class=\"line\">    static &#123;</span><br><span class=\"line\">       try &#123;</span><br><span class=\"line\">           Constructor&lt;Unsafe&gt; constructor = Unsafe.class.getDeclaredConstructor(new Class&lt;?&gt;[0]);</span><br><span class=\"line\">           constructor.setAccessible(true);</span><br><span class=\"line\">           unsafe = constructor.newInstance(new Object[0]);</span><br><span class=\"line\">           stateOffset = unsafe.objectFieldOffset(MyLock.class.getDeclaredField(&quot;state&quot;));</span><br><span class=\"line\">       &#125;catch (Exception e)&#123;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public void lock()&#123;</span><br><span class=\"line\">        if(compareAndSetState(0,1))&#123;</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            addNodeAndWait();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public void unLock()&#123;</span><br><span class=\"line\">        compareAndSetState(1,0);</span><br><span class=\"line\">        Thread thread = threadList.pop();</span><br><span class=\"line\">        if(thread != null)&#123;</span><br><span class=\"line\">            LockSupport.unpark(thread);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    private void addNodeAndWait()&#123;</span><br><span class=\"line\">        //如果当前只有一个等待线程时，重新获取一下锁，防止永远不被唤醒。</span><br><span class=\"line\">        boolean isOnlyOne = threadList.insert(Thread.currentThread());</span><br><span class=\"line\">        if(isOnlyOne &amp;&amp; compareAndSetState(0,1))&#123;</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        LockSupport.park(this);//线程被挂起</span><br><span class=\"line\">        if(compareAndSetState(0,1))&#123;//线程被唤醒后继续竞争锁</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            addNodeAndWait();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    private boolean compareAndSetState(int expect,int update)&#123;</span><br><span class=\"line\">        return unsafe.compareAndSwapInt(this,stateOffset,expect,update);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>线程调用lock方法进行加锁，cas将state从0修改1，修改成功则加锁成功，lock方法返回，否则调用addNodeAndWait方法将线程加入ThreadList队列，并使用LockSupport将线程挂起。(ThreadList的insert方法，返回一个boolean类型的值，用来处理一个特殊情况的，稍后再说。)</p>\n<p>获得锁的线程执行完业务逻辑后，调用unLock方法释放锁，即通过cas操作将state修改回0，同时从ThreadList拿出一个等待线程，调用LockSupport的unpark方法，来将它唤醒。</p>\n<p>将我们在《自己动手写把”锁”—锁的作用》的例子修改为如下，来测试下咱们的锁的效果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TestMyLock &#123;</span><br><span class=\"line\">    private static  List&lt;Integer&gt; list = new ArrayList&lt;&gt;();</span><br><span class=\"line\">    private static MyLock myLock = new MyLock();</span><br><span class=\"line\">    public static void main(String[] args)&#123;</span><br><span class=\"line\">        Thread t1 = new Thread(new Runnable() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void run() &#123;</span><br><span class=\"line\">                for(int i=0;i&lt;10000;i++)&#123;</span><br><span class=\"line\">                    add(i);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        Thread t2 = new Thread(new Runnable() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void run() &#123;</span><br><span class=\"line\">                print();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\">        t2.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    private static void add(int i)&#123;</span><br><span class=\"line\">        myLock.lock();</span><br><span class=\"line\">        list.add(i);</span><br><span class=\"line\">        myLock.unLock();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    private static void print()&#123;</span><br><span class=\"line\">        myLock.lock();</span><br><span class=\"line\">        Iterator&lt;Integer&gt; iterator = list.iterator();</span><br><span class=\"line\">        while (iterator.hasNext())&#123;</span><br><span class=\"line\">            System.out.println(iterator.next());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        myLock.unLock();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ok,正常运行了，不在报错。</p>\n<p>到这里咱们的一个简单地锁已经实现了。接下来我再把上边的，一个没讲的细节说一下。即如下这段代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">boolean isOnlyOne = threadList.insert(Thread.currentThread());</span><br><span class=\"line\">        if(isOnlyOne &amp;&amp; compareAndSetState(0,1))&#123;</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<p>ThreadList的insert方法，在插入成功后，会判断当前链表中是否只有自己一个线程在等待，如果是则返回true。从而进入后边的if语句。这个逻辑的用意就是：如果只有自己一个线程在等待时，则试着通过cas操作重新获取锁，如果获取失败才进入阻塞等待。它是用来解决以下边界情况：</p>\n<p><img src=\"/2018/01/10/java-loc5/imag1.png\" alt=\"image\"></p>\n<p>在只有线程A和线程B两个线程的时候，如果没有以上判断逻辑，线程B将有可能会永远处于阻塞不被唤醒。</p>\n","site":{"data":{"hint":{"new":{"selector":[".menu-reading",".menu-about"]}},"about":{"avatar":"/images/head2.jpg","name":"清泉","tag":"互联网/Java/区块链/金融","desc":"不甘心只懂技术的技术男","skills":{"Java/JVM":9,"Javascript":7,"Go":6,"invisible-split-line-1":-1,"区块链":8,"金融理财":7},"reward":["/images/weixin2.png","/images/zhifubao2.png"]},"link":{"social":{"weibo":"https://weibo.com/u/6182358871?is_all=1","github":"https://github.com/yongzhidai","rss":"/atom.xml"},"extern":{"博客园博客":"http://www.cnblogs.com/metoy/","博客园博客(备)":"http://www.cnblogs.com/qingquanzi/","知乎":"https://www.zhihu.com/people/yongzhi.dyz"}},"reading":{"define":{"readed":"技术类","reading":"金融类","wanted":"其它"},"contents":{"readed":[{"title":"深入理解Java虚拟机（第2版）","cover":"/images/bookImg/java_jvm.jpg","review":"JVM入门必读","score":"8.9","doubanLink":"https://book.douban.com/subject/24722612/"},{"title":"深入浅出MySQL","cover":"/images/bookImg/mysql.jpg","review":"内容通俗易懂，比较不错。","score":"7.7","doubanLink":"https://book.douban.com/subject/25817684/"},{"title":"区块链技术指南","cover":"/images/bookImg/block_chain.jpg","review":"区块链学习指南！","score":"6.3","doubanLink":"https://book.douban.com/subject/26959322/"}],"reading":[{"title":"彼得·林奇的成功投资","cover":"/images/bookImg/bdlq.jpg","review":"","score":"8.7","doubanLink":"https://book.douban.com/subject/1958714/"}],"wanted":[{"title":"人类简史","cover":"/images/bookImg/rljs.jpg","review":"","score":"9.1","doubanLink":"https://book.douban.com/subject/25985021/"},{"title":"三体","cover":"/images/bookImg/santi.jpg","review":"","score":"8.8","doubanLink":"https://book.douban.com/subject/2567698/"}]}},"slider":[{"image":"/images/bg1.jpg","align":"center","title":"欢迎你，朋友！","subtitle":"","link":"/"},{"image":"/images/bg2.jpg","align":"left","title":"我的知识星球圈子","subtitle":"点击微信扫码加入","link":"https://t.zsxq.com/EUn6IIE"},{"image":"/images/bg3.jpg","align":"right","title":"我的微信公众号","subtitle":"","link":null}]}},"excerpt":"<p>锁是整个Java并发包的实现基础，通过学习本系列文章，将对你理解Java并发包的本质有很大的帮助。<br></p>","more":"<p></p>\n<p>前边几篇中，我已经把实现锁用到的技术，进行了一一讲述。这其中有原子性、内存模型、LockSupport还有CAS，掌握了这些技术，即使没有本篇，你也完全有能力自己写一把锁出来。但为了本系列的完整性，我在这里还是把最后这一篇补上。</p>\n<p>先说一下锁的运行流程：多个线程抢占同一把锁，只有一个线程能抢占成功，抢占成功的线程继续执行下边的逻辑，抢占失败的线程进入阻塞等待。抢占成功的线程执行完毕后，释放锁，并从等待的线程中挑一个唤醒，让它继续竞争锁。</p>\n<p>转变成程序实现：我们首先定一个state变量，state=0表示未被加锁，state=1表示被加锁。多个线程在抢占锁时，竞争将state变量从0修改为1，修改成功的线程则加锁成功。state从0修改为1的过程，这里使用cas操作，以保证只有一个线程加锁成功，同时state需要用volatile修饰，已解决线程可见的问题。加锁成功的线程执行完业务逻辑后，将state从1修改回0，同时从等待的线程中选择一个线程唤醒。所以加锁失败的线程，在加锁失败时需要将自己放到一个集合中，以等待被唤醒。这个集合需要支持多线程并发安全，在这里我通过一个链表来实现，通过CAS操作来实现并发安全。</p>\n<p>把思路说清楚了，咱们看下代码实现。</p>\n<p>首先咱们实现一个ThreadList，这是一个链表结合，用来存放等待的处于等待唤醒的线程：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ThreadList&#123;</span><br><span class=\"line\">    private volatile Node head = null;</span><br><span class=\"line\">    private static  long headOffset;</span><br><span class=\"line\">    private static Unsafe unsafe;</span><br><span class=\"line\">    static &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            Constructor&lt;Unsafe&gt; constructor = Unsafe.class.getDeclaredConstructor(new Class&lt;?&gt;[0]);</span><br><span class=\"line\">            constructor.setAccessible(true);</span><br><span class=\"line\">            unsafe = constructor.newInstance(new Object[0]);</span><br><span class=\"line\">            headOffset = unsafe.objectFieldOffset(ThreadList.class.getDeclaredField(&quot;head&quot;));</span><br><span class=\"line\">        &#125;catch (Exception e)&#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param thread</span><br><span class=\"line\">     * @return 是否只有当前一个线程在等待</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public boolean insert(Thread thread)&#123;</span><br><span class=\"line\">        Node node = new Node(thread);</span><br><span class=\"line\">        for(;;)&#123;</span><br><span class=\"line\">            Node first = getHead();</span><br><span class=\"line\">            node.setNext(first);</span><br><span class=\"line\">            if(unsafe.compareAndSwapObject(this, headOffset,first,node))&#123;</span><br><span class=\"line\">                return first==null?true:false;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public Thread pop()&#123;</span><br><span class=\"line\">        Node first = null;</span><br><span class=\"line\">        for(;;)&#123;</span><br><span class=\"line\">            first = getHead();</span><br><span class=\"line\">            Node next = null;</span><br><span class=\"line\">            if(first!=null)&#123;</span><br><span class=\"line\">                next = first.getNext();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if(unsafe.compareAndSwapObject(this, headOffset,first,next))&#123;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return first==null?null:first.getThread();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    private Node getHead()&#123;</span><br><span class=\"line\">        return this.head;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    private static class Node&#123;</span><br><span class=\"line\">        volatile Node next;</span><br><span class=\"line\">        volatile Thread thread;</span><br><span class=\"line\">        public Node(Thread thread)&#123;</span><br><span class=\"line\">            this.thread = thread;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        public void setNext(Node next)&#123;</span><br><span class=\"line\">            this.next = next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        public Node getNext()&#123;</span><br><span class=\"line\">            return next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        public Thread getThread()&#123;</span><br><span class=\"line\">            return this.thread;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>加锁失败的线程，调用insert方法将自己放入这个集合中，insert方法里将线程封装到Node中，然后使用cas操作将node添加到列表的头部。同样为了线程可见的问题，Node里的thread和next都用volatile修饰。<br>加锁成功的线程，调用pop方法获得一个线程，进行唤醒，这里边同样使用了cas操作来保证线程安全。</p>\n<p>接下来在看看锁的实现：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class MyLock &#123;</span><br><span class=\"line\">    private volatile int state = 0;</span><br><span class=\"line\">    private ThreadList threadList = new ThreadList();</span><br><span class=\"line\">    private static  long stateOffset;</span><br><span class=\"line\">    private static Unsafe unsafe;</span><br><span class=\"line\">    static &#123;</span><br><span class=\"line\">       try &#123;</span><br><span class=\"line\">           Constructor&lt;Unsafe&gt; constructor = Unsafe.class.getDeclaredConstructor(new Class&lt;?&gt;[0]);</span><br><span class=\"line\">           constructor.setAccessible(true);</span><br><span class=\"line\">           unsafe = constructor.newInstance(new Object[0]);</span><br><span class=\"line\">           stateOffset = unsafe.objectFieldOffset(MyLock.class.getDeclaredField(&quot;state&quot;));</span><br><span class=\"line\">       &#125;catch (Exception e)&#123;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public void lock()&#123;</span><br><span class=\"line\">        if(compareAndSetState(0,1))&#123;</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            addNodeAndWait();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public void unLock()&#123;</span><br><span class=\"line\">        compareAndSetState(1,0);</span><br><span class=\"line\">        Thread thread = threadList.pop();</span><br><span class=\"line\">        if(thread != null)&#123;</span><br><span class=\"line\">            LockSupport.unpark(thread);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    private void addNodeAndWait()&#123;</span><br><span class=\"line\">        //如果当前只有一个等待线程时，重新获取一下锁，防止永远不被唤醒。</span><br><span class=\"line\">        boolean isOnlyOne = threadList.insert(Thread.currentThread());</span><br><span class=\"line\">        if(isOnlyOne &amp;&amp; compareAndSetState(0,1))&#123;</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        LockSupport.park(this);//线程被挂起</span><br><span class=\"line\">        if(compareAndSetState(0,1))&#123;//线程被唤醒后继续竞争锁</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            addNodeAndWait();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    private boolean compareAndSetState(int expect,int update)&#123;</span><br><span class=\"line\">        return unsafe.compareAndSwapInt(this,stateOffset,expect,update);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>线程调用lock方法进行加锁，cas将state从0修改1，修改成功则加锁成功，lock方法返回，否则调用addNodeAndWait方法将线程加入ThreadList队列，并使用LockSupport将线程挂起。(ThreadList的insert方法，返回一个boolean类型的值，用来处理一个特殊情况的，稍后再说。)</p>\n<p>获得锁的线程执行完业务逻辑后，调用unLock方法释放锁，即通过cas操作将state修改回0，同时从ThreadList拿出一个等待线程，调用LockSupport的unpark方法，来将它唤醒。</p>\n<p>将我们在《自己动手写把”锁”—锁的作用》的例子修改为如下，来测试下咱们的锁的效果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TestMyLock &#123;</span><br><span class=\"line\">    private static  List&lt;Integer&gt; list = new ArrayList&lt;&gt;();</span><br><span class=\"line\">    private static MyLock myLock = new MyLock();</span><br><span class=\"line\">    public static void main(String[] args)&#123;</span><br><span class=\"line\">        Thread t1 = new Thread(new Runnable() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void run() &#123;</span><br><span class=\"line\">                for(int i=0;i&lt;10000;i++)&#123;</span><br><span class=\"line\">                    add(i);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        Thread t2 = new Thread(new Runnable() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void run() &#123;</span><br><span class=\"line\">                print();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\">        t2.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    private static void add(int i)&#123;</span><br><span class=\"line\">        myLock.lock();</span><br><span class=\"line\">        list.add(i);</span><br><span class=\"line\">        myLock.unLock();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    private static void print()&#123;</span><br><span class=\"line\">        myLock.lock();</span><br><span class=\"line\">        Iterator&lt;Integer&gt; iterator = list.iterator();</span><br><span class=\"line\">        while (iterator.hasNext())&#123;</span><br><span class=\"line\">            System.out.println(iterator.next());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        myLock.unLock();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ok,正常运行了，不在报错。</p>\n<p>到这里咱们的一个简单地锁已经实现了。接下来我再把上边的，一个没讲的细节说一下。即如下这段代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">boolean isOnlyOne = threadList.insert(Thread.currentThread());</span><br><span class=\"line\">        if(isOnlyOne &amp;&amp; compareAndSetState(0,1))&#123;</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<p>ThreadList的insert方法，在插入成功后，会判断当前链表中是否只有自己一个线程在等待，如果是则返回true。从而进入后边的if语句。这个逻辑的用意就是：如果只有自己一个线程在等待时，则试着通过cas操作重新获取锁，如果获取失败才进入阻塞等待。它是用来解决以下边界情况：</p>\n<p><img src=\"/2018/01/10/java-loc5/imag1.png\" alt=\"image\"></p>\n<p>在只有线程A和线程B两个线程的时候，如果没有以上判断逻辑，线程B将有可能会永远处于阻塞不被唤醒。</p>"},{"title":"自己动手写把”锁”之---锁的作用","date":"2017-12-31T07:38:42.000Z","_content":"### 前序\n这是一个系列文章，前边几篇比较基础，主要为了后续做准备。熟悉的朋友可以直接跳过看后续的文章。\n\n本主题很重要，学完这个系列，你将会对Java并包有一个透彻的原理性的认识。线程池技术、阻塞队列、信号量、原子性操作等等所用的基础技术都会在这系列的文章中讲到。大家可以提前学习下CountDownLatch的使用，在学完这系列文章后，我将会布置一个作业：自己动手实现一个CountDownLatch。\n<!--more-->\n### 正文\n都知道，现在处理器的核数越来越多，为充分利用其计算资源，服务端编程通常会用上多线程技术。利用多线程技术可以同时进行计算任务，从而提高的服务的并发度。\n\n但是，当多线程对同一块内存资源进行操作时，如果不对线程进行“排队”，其结果将是混乱不堪预测额。\n\n这里说的“排队”就是通常说的线程同步。当一个线程在操作这个资源时，后来的线程等待上一个线程操作完才能开始。\n\n举个代码栗子：\n\n```\npublic class TestMyLock {\n    private static  List<Integer> list = new ArrayList<>();\n    public static void main(String[] args){\n        Thread t1 = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                for(int i=0;i<10000;i++){\n                    add(i);\n                }\n            }\n        });\n        Thread t2 = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                print();\n            }\n        });\n        t1.start();\n        t2.start();\n    }\n    private static void add(int i){\n        list.add(i);\n    }\n    private static void print(){\n        Iterator<Integer> iterator = list.iterator();\n        while (iterator.hasNext()){\n            System.out.println(iterator.next());\n        }\n    }\n}\n```\n以上我们创建了两个线程：t1和t2。t1循环一万次向list里边添加数字，t2遍历list并将内容打印到控制台。\n执行后得到如下错误：\n\n原因很简单，就是两个线程同时操作list而没有进行线程同步导致的报错。我们修改下代码再来看一下。\nadd和print方法修改为如下：\n\n```\nprivate synchronized static void add(int i){\n    list.add(i);\n}\nprivate synchronized static void print(){\n    Iterator<Integer> iterator = list.iterator();\n    while (iterator.hasNext()){\n        System.out.println(iterator.next());\n    }\n}\n```\n我们仅仅是在add和print方法前加入了synchronized修饰词，程序便可以正常执行了\n\nsynchronized关键字是Java内置的同步锁。两个线程会竞争对synchronized绑定的同步对象加锁，加锁失败的线程会阻塞等待加锁成功的线程执行完毕。由于add和print方法都是静态方法，这里synchronized绑定的同步对象就是TestMyLock.class。\n\n\n","source":"_posts/java-lock1.md","raw":"---\ntitle: 自己动手写把”锁”之---锁的作用\ncategories:\n  - 技术\n  - Java\ntags:\n  - synchronized\n  - 同步\n  - 多线程\ndate: 2017-12-31 15:38:42\n---\n### 前序\n这是一个系列文章，前边几篇比较基础，主要为了后续做准备。熟悉的朋友可以直接跳过看后续的文章。\n\n本主题很重要，学完这个系列，你将会对Java并包有一个透彻的原理性的认识。线程池技术、阻塞队列、信号量、原子性操作等等所用的基础技术都会在这系列的文章中讲到。大家可以提前学习下CountDownLatch的使用，在学完这系列文章后，我将会布置一个作业：自己动手实现一个CountDownLatch。\n<!--more-->\n### 正文\n都知道，现在处理器的核数越来越多，为充分利用其计算资源，服务端编程通常会用上多线程技术。利用多线程技术可以同时进行计算任务，从而提高的服务的并发度。\n\n但是，当多线程对同一块内存资源进行操作时，如果不对线程进行“排队”，其结果将是混乱不堪预测额。\n\n这里说的“排队”就是通常说的线程同步。当一个线程在操作这个资源时，后来的线程等待上一个线程操作完才能开始。\n\n举个代码栗子：\n\n```\npublic class TestMyLock {\n    private static  List<Integer> list = new ArrayList<>();\n    public static void main(String[] args){\n        Thread t1 = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                for(int i=0;i<10000;i++){\n                    add(i);\n                }\n            }\n        });\n        Thread t2 = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                print();\n            }\n        });\n        t1.start();\n        t2.start();\n    }\n    private static void add(int i){\n        list.add(i);\n    }\n    private static void print(){\n        Iterator<Integer> iterator = list.iterator();\n        while (iterator.hasNext()){\n            System.out.println(iterator.next());\n        }\n    }\n}\n```\n以上我们创建了两个线程：t1和t2。t1循环一万次向list里边添加数字，t2遍历list并将内容打印到控制台。\n执行后得到如下错误：\n\n原因很简单，就是两个线程同时操作list而没有进行线程同步导致的报错。我们修改下代码再来看一下。\nadd和print方法修改为如下：\n\n```\nprivate synchronized static void add(int i){\n    list.add(i);\n}\nprivate synchronized static void print(){\n    Iterator<Integer> iterator = list.iterator();\n    while (iterator.hasNext()){\n        System.out.println(iterator.next());\n    }\n}\n```\n我们仅仅是在add和print方法前加入了synchronized修饰词，程序便可以正常执行了\n\nsynchronized关键字是Java内置的同步锁。两个线程会竞争对synchronized绑定的同步对象加锁，加锁失败的线程会阻塞等待加锁成功的线程执行完毕。由于add和print方法都是静态方法，这里synchronized绑定的同步对象就是TestMyLock.class。\n\n\n","slug":"java-lock1","published":1,"updated":"2018-01-20T07:46:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcn41j940001cfs6fd96hmcm","content":"<h3 id=\"前序\"><a href=\"#前序\" class=\"headerlink\" title=\"前序\"></a>前序</h3><p>这是一个系列文章，前边几篇比较基础，主要为了后续做准备。熟悉的朋友可以直接跳过看后续的文章。</p>\n<p>本主题很重要，学完这个系列，你将会对Java并包有一个透彻的原理性的认识。线程池技术、阻塞队列、信号量、原子性操作等等所用的基础技术都会在这系列的文章中讲到。大家可以提前学习下CountDownLatch的使用，在学完这系列文章后，我将会布置一个作业：自己动手实现一个CountDownLatch。<br><a id=\"more\"></a></p>\n<h3 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h3><p>都知道，现在处理器的核数越来越多，为充分利用其计算资源，服务端编程通常会用上多线程技术。利用多线程技术可以同时进行计算任务，从而提高的服务的并发度。</p>\n<p>但是，当多线程对同一块内存资源进行操作时，如果不对线程进行“排队”，其结果将是混乱不堪预测额。</p>\n<p>这里说的“排队”就是通常说的线程同步。当一个线程在操作这个资源时，后来的线程等待上一个线程操作完才能开始。</p>\n<p>举个代码栗子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TestMyLock &#123;</span><br><span class=\"line\">    private static  List&lt;Integer&gt; list = new ArrayList&lt;&gt;();</span><br><span class=\"line\">    public static void main(String[] args)&#123;</span><br><span class=\"line\">        Thread t1 = new Thread(new Runnable() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void run() &#123;</span><br><span class=\"line\">                for(int i=0;i&lt;10000;i++)&#123;</span><br><span class=\"line\">                    add(i);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        Thread t2 = new Thread(new Runnable() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void run() &#123;</span><br><span class=\"line\">                print();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\">        t2.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    private static void add(int i)&#123;</span><br><span class=\"line\">        list.add(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    private static void print()&#123;</span><br><span class=\"line\">        Iterator&lt;Integer&gt; iterator = list.iterator();</span><br><span class=\"line\">        while (iterator.hasNext())&#123;</span><br><span class=\"line\">            System.out.println(iterator.next());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上我们创建了两个线程：t1和t2。t1循环一万次向list里边添加数字，t2遍历list并将内容打印到控制台。<br>执行后得到如下错误：</p>\n<p>原因很简单，就是两个线程同时操作list而没有进行线程同步导致的报错。我们修改下代码再来看一下。<br>add和print方法修改为如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private synchronized static void add(int i)&#123;</span><br><span class=\"line\">    list.add(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">private synchronized static void print()&#123;</span><br><span class=\"line\">    Iterator&lt;Integer&gt; iterator = list.iterator();</span><br><span class=\"line\">    while (iterator.hasNext())&#123;</span><br><span class=\"line\">        System.out.println(iterator.next());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们仅仅是在add和print方法前加入了synchronized修饰词，程序便可以正常执行了</p>\n<p>synchronized关键字是Java内置的同步锁。两个线程会竞争对synchronized绑定的同步对象加锁，加锁失败的线程会阻塞等待加锁成功的线程执行完毕。由于add和print方法都是静态方法，这里synchronized绑定的同步对象就是TestMyLock.class。</p>\n","site":{"data":{"hint":{"new":{"selector":[".menu-reading",".menu-about"]}},"about":{"avatar":"/images/head2.jpg","name":"清泉","tag":"互联网/Java/区块链/金融","desc":"不甘心只懂技术的技术男","skills":{"Java/JVM":9,"Javascript":7,"Go":6,"invisible-split-line-1":-1,"区块链":8,"金融理财":7},"reward":["/images/weixin2.png","/images/zhifubao2.png"]},"link":{"social":{"weibo":"https://weibo.com/u/6182358871?is_all=1","github":"https://github.com/yongzhidai","rss":"/atom.xml"},"extern":{"博客园博客":"http://www.cnblogs.com/metoy/","博客园博客(备)":"http://www.cnblogs.com/qingquanzi/","知乎":"https://www.zhihu.com/people/yongzhi.dyz"}},"reading":{"define":{"readed":"技术类","reading":"金融类","wanted":"其它"},"contents":{"readed":[{"title":"深入理解Java虚拟机（第2版）","cover":"/images/bookImg/java_jvm.jpg","review":"JVM入门必读","score":"8.9","doubanLink":"https://book.douban.com/subject/24722612/"},{"title":"深入浅出MySQL","cover":"/images/bookImg/mysql.jpg","review":"内容通俗易懂，比较不错。","score":"7.7","doubanLink":"https://book.douban.com/subject/25817684/"},{"title":"区块链技术指南","cover":"/images/bookImg/block_chain.jpg","review":"区块链学习指南！","score":"6.3","doubanLink":"https://book.douban.com/subject/26959322/"}],"reading":[{"title":"彼得·林奇的成功投资","cover":"/images/bookImg/bdlq.jpg","review":"","score":"8.7","doubanLink":"https://book.douban.com/subject/1958714/"}],"wanted":[{"title":"人类简史","cover":"/images/bookImg/rljs.jpg","review":"","score":"9.1","doubanLink":"https://book.douban.com/subject/25985021/"},{"title":"三体","cover":"/images/bookImg/santi.jpg","review":"","score":"8.8","doubanLink":"https://book.douban.com/subject/2567698/"}]}},"slider":[{"image":"/images/bg1.jpg","align":"center","title":"欢迎你，朋友！","subtitle":"","link":"/"},{"image":"/images/bg2.jpg","align":"left","title":"我的知识星球圈子","subtitle":"点击微信扫码加入","link":"https://t.zsxq.com/EUn6IIE"},{"image":"/images/bg3.jpg","align":"right","title":"我的微信公众号","subtitle":"","link":null}]}},"excerpt":"<h3 id=\"前序\"><a href=\"#前序\" class=\"headerlink\" title=\"前序\"></a>前序</h3><p>这是一个系列文章，前边几篇比较基础，主要为了后续做准备。熟悉的朋友可以直接跳过看后续的文章。</p>\n<p>本主题很重要，学完这个系列，你将会对Java并包有一个透彻的原理性的认识。线程池技术、阻塞队列、信号量、原子性操作等等所用的基础技术都会在这系列的文章中讲到。大家可以提前学习下CountDownLatch的使用，在学完这系列文章后，我将会布置一个作业：自己动手实现一个CountDownLatch。<br></p>","more":"<p></p>\n<h3 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h3><p>都知道，现在处理器的核数越来越多，为充分利用其计算资源，服务端编程通常会用上多线程技术。利用多线程技术可以同时进行计算任务，从而提高的服务的并发度。</p>\n<p>但是，当多线程对同一块内存资源进行操作时，如果不对线程进行“排队”，其结果将是混乱不堪预测额。</p>\n<p>这里说的“排队”就是通常说的线程同步。当一个线程在操作这个资源时，后来的线程等待上一个线程操作完才能开始。</p>\n<p>举个代码栗子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TestMyLock &#123;</span><br><span class=\"line\">    private static  List&lt;Integer&gt; list = new ArrayList&lt;&gt;();</span><br><span class=\"line\">    public static void main(String[] args)&#123;</span><br><span class=\"line\">        Thread t1 = new Thread(new Runnable() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void run() &#123;</span><br><span class=\"line\">                for(int i=0;i&lt;10000;i++)&#123;</span><br><span class=\"line\">                    add(i);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        Thread t2 = new Thread(new Runnable() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void run() &#123;</span><br><span class=\"line\">                print();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\">        t2.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    private static void add(int i)&#123;</span><br><span class=\"line\">        list.add(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    private static void print()&#123;</span><br><span class=\"line\">        Iterator&lt;Integer&gt; iterator = list.iterator();</span><br><span class=\"line\">        while (iterator.hasNext())&#123;</span><br><span class=\"line\">            System.out.println(iterator.next());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上我们创建了两个线程：t1和t2。t1循环一万次向list里边添加数字，t2遍历list并将内容打印到控制台。<br>执行后得到如下错误：</p>\n<p>原因很简单，就是两个线程同时操作list而没有进行线程同步导致的报错。我们修改下代码再来看一下。<br>add和print方法修改为如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private synchronized static void add(int i)&#123;</span><br><span class=\"line\">    list.add(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">private synchronized static void print()&#123;</span><br><span class=\"line\">    Iterator&lt;Integer&gt; iterator = list.iterator();</span><br><span class=\"line\">    while (iterator.hasNext())&#123;</span><br><span class=\"line\">        System.out.println(iterator.next());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们仅仅是在add和print方法前加入了synchronized修饰词，程序便可以正常执行了</p>\n<p>synchronized关键字是Java内置的同步锁。两个线程会竞争对synchronized绑定的同步对象加锁，加锁失败的线程会阻塞等待加锁成功的线程执行完毕。由于add和print方法都是静态方法，这里synchronized绑定的同步对象就是TestMyLock.class。</p>"},{"title":"自己动手写把”锁”之---JMM和volatile","date":"2018-01-02T07:38:47.000Z","_content":"## 一、JAVA内存模型\n关于Java内存模型的文章，网上真的数不胜数。在这里我就不打算说的很详细、很严谨了。只力求大家能更好的理解和运用，为后边的技术点做铺垫。\n<!--more-->\n内存模型并不是Java独有的概念，而是我们的计算机硬件平台的一个概念。内存模型描述了程序中变量如何在从内存读出、以及何时写会内存的底层细节。\n\n我们知道，程序运行其实就是CPU和内存的频繁交互的过程。随着CPU的快速发展，CPU的执行速度越来越快，但是内存却很难跟上CPU的执行速度，为了解决这一矛盾，CPU厂商就为每颗CPU加了高速缓存，用来缓解这个速度不匹配的问题。因此，CPU和内存的交互变成了这个样子：\n\n![image](java-lok2/test1.png)\n\n以上只是在CPU和内存之间加了个高速缓存，其实也还没什么问题。那内存模型这个概念是怎么产生的呢？继续往下看。\n\nCPU虽然在不停的发展，但单个CPU的主频速度不可能无限制的增长，为了进一步提高计算性能就引入了多核技术。由于每个cpu都有自己的高速缓存，当多个CPU操作同一个内存数据时，就产生了缓存不一致的问题。如下图：\n\n![image](java-lok2/image2.png)\n\n为了解决这个不一致的问题，就需要处理器在运行时要遵循某些协议，这类协议包括MSI、MESI、MOSI等等。到这里就有了内存模型这个概念，它就是用来描述数据在各个高级缓存以及内存之间的交互细节。不同的硬件处理器架构，就会有不同的内存模型。所以用c/c++开发多线程程序时，就需要考虑不同操作平台下的内存模型。\n\n所幸我们是学Java的，Java平台为了屏蔽不同硬件平台的不同内存模型给开发人员带来的成本，引入了Java内存模型，即JAVA Memory Model，简称JMM。\n\n要想深入掌握JAVA多线程并发编程，Java内存模型是必须要了解的。Java内存模型定义了多线程之间共享变量的可见性以及如何在需要的时候对共享变量进行同步。直白点说就是：同一个变量，被多个cpu上执行的多个线程访问，每个cpu的高速缓存都缓存了这个变量，当某个线程修改了高速缓存里的变量，何时通知给其他的cpu线程让它可见，以及何时将变量同步回内存(主存)。如下图：\n\n![image](java-lok2/image3.png)\n\nJava虚拟机的内存模型和计算机硬件的内存模型基本一致。在Java内存模型中，分为线程私有的本地内存和线程共享的主内存，线程在读写变量时会把主内存里的变量缓存到本地内存，换句话说，本地内存存放了主内存中变量的副本。主内存和本地内存其实是一种逻辑上的划分，并不是实际的物理内存。\n\n这里需要强调一下，这里的变量指的是分配到堆上的变量，即线程之间可以共享的变量。本地变量是线程私有的，所以不会有可见性问题。\n\n## 二、volatile\nJava内存模型中说到了线程间共享变量的可见性问题。可见性问题其实就是缓存不一致的问题。如下图：\n\n![image](java-lok2/image4.png)\n\n线程B读取变量X，并缓存到了自己的本地内存中，线程A也将变量X缓存到本地内存中并修改为2，这时线程B并不知道变量X修改为2。这就是线程间不可见的问题。为了解决这个问题，就引入了volatile关键字，被volatile修饰的变量将不会在本地内存缓存，线程直接通过主内存来读写变量。虽然解决了不可见的问题，但也是以牺牲性能为代价的。\n\nvolatile关键字相信你已经理解了，但是在Java中volatile并不仅仅是这个功能。在这里我通过与c语言中的volatile对比扩展下。\n有的时候我们可能会面临这么个场景，线程1执行某些业务逻辑，线程2判断线程1是否执行完，执行完了则线程2执行另一个逻辑，如下伪代码：\n\n![image](java-lok2/image5.png)\n\n我们通过一个flag变量来标识线程1是否执行完相关逻辑，为了保证flag的改变对线程2可见，这里使用了volatile关键字修饰。如果这个伪代码采用Java实现，这是没问题的，如果c实现，则就会有坑。\n这个坑主要是源于指令重排。为了提高执行效率减少内存的交互，编译器会根据情况对执行的指令做一个重排序。所以线程1中执行相关业务逻辑后，再将flag设置为true的逻辑，极有可能重排为：先设置flag=true然后再执行相关业务逻辑。这也是c语言为啥不提倡使用volatile的原因。\n\n但是为什么在Java中就不会有这个坑呢，难道Java没有指令重排序吗？\n当然不是，Java也会有重排序，不过Java对volatile做了如下的极大增强：\n- 所有对volatile变量的写操作之前的针对其他变量的读写操作，经过编译器、cpu优化后，都不会被重排到对voltile变量的写操作之后。\n- 所有对volatile变量的读操作之后的针对其他变量的读写操作，经过编译器、cpu优化后，都不会被重排到对voltile变量的读操作之前。\n\n面试中，有面试官比较喜欢问这么一个问题：能否用volatile修饰的整数变量n，通过n++操作实现计数的功能？这个问题就是考查应试者对volatile的理解。我这里简单地说一下。\n答案肯定是不能。volatile实现的是线程间共享变量的可见性，并不是原子性操作。++操作其实可以拆分为这么几个步骤：\n- [ ] 读取主内存里的变量\n- [ ]  cpu完成变量的++,然后写会主内存。\n\n所以可以想象这么一个执行顺序：\n- [ ] 线程A读取volatile变量X=0\n- [ ] 线程B读取volatile变量X=0\n- [ ] 线程A完成++操作，然后将X=1写回主存。\n- [ ] 线程B也完成++操作将X=1写回主存。\n\n在这么一个执行顺序下，对X进行了++两次，但值却只增加了1。\n\n关于如何实现原子性操作，我将在下一节进行讨论。\n\n\n","source":"_posts/java-lock2.md","raw":"---\ntitle: 自己动手写把”锁”之---JMM和volatile\ncategories:\n  - 技术\n  - Java\ntags:\n  - 内存模型\n  - 可见性\n  - volatile\ndate: 2018-01-02 15:38:47\n---\n## 一、JAVA内存模型\n关于Java内存模型的文章，网上真的数不胜数。在这里我就不打算说的很详细、很严谨了。只力求大家能更好的理解和运用，为后边的技术点做铺垫。\n<!--more-->\n内存模型并不是Java独有的概念，而是我们的计算机硬件平台的一个概念。内存模型描述了程序中变量如何在从内存读出、以及何时写会内存的底层细节。\n\n我们知道，程序运行其实就是CPU和内存的频繁交互的过程。随着CPU的快速发展，CPU的执行速度越来越快，但是内存却很难跟上CPU的执行速度，为了解决这一矛盾，CPU厂商就为每颗CPU加了高速缓存，用来缓解这个速度不匹配的问题。因此，CPU和内存的交互变成了这个样子：\n\n![image](java-lok2/test1.png)\n\n以上只是在CPU和内存之间加了个高速缓存，其实也还没什么问题。那内存模型这个概念是怎么产生的呢？继续往下看。\n\nCPU虽然在不停的发展，但单个CPU的主频速度不可能无限制的增长，为了进一步提高计算性能就引入了多核技术。由于每个cpu都有自己的高速缓存，当多个CPU操作同一个内存数据时，就产生了缓存不一致的问题。如下图：\n\n![image](java-lok2/image2.png)\n\n为了解决这个不一致的问题，就需要处理器在运行时要遵循某些协议，这类协议包括MSI、MESI、MOSI等等。到这里就有了内存模型这个概念，它就是用来描述数据在各个高级缓存以及内存之间的交互细节。不同的硬件处理器架构，就会有不同的内存模型。所以用c/c++开发多线程程序时，就需要考虑不同操作平台下的内存模型。\n\n所幸我们是学Java的，Java平台为了屏蔽不同硬件平台的不同内存模型给开发人员带来的成本，引入了Java内存模型，即JAVA Memory Model，简称JMM。\n\n要想深入掌握JAVA多线程并发编程，Java内存模型是必须要了解的。Java内存模型定义了多线程之间共享变量的可见性以及如何在需要的时候对共享变量进行同步。直白点说就是：同一个变量，被多个cpu上执行的多个线程访问，每个cpu的高速缓存都缓存了这个变量，当某个线程修改了高速缓存里的变量，何时通知给其他的cpu线程让它可见，以及何时将变量同步回内存(主存)。如下图：\n\n![image](java-lok2/image3.png)\n\nJava虚拟机的内存模型和计算机硬件的内存模型基本一致。在Java内存模型中，分为线程私有的本地内存和线程共享的主内存，线程在读写变量时会把主内存里的变量缓存到本地内存，换句话说，本地内存存放了主内存中变量的副本。主内存和本地内存其实是一种逻辑上的划分，并不是实际的物理内存。\n\n这里需要强调一下，这里的变量指的是分配到堆上的变量，即线程之间可以共享的变量。本地变量是线程私有的，所以不会有可见性问题。\n\n## 二、volatile\nJava内存模型中说到了线程间共享变量的可见性问题。可见性问题其实就是缓存不一致的问题。如下图：\n\n![image](java-lok2/image4.png)\n\n线程B读取变量X，并缓存到了自己的本地内存中，线程A也将变量X缓存到本地内存中并修改为2，这时线程B并不知道变量X修改为2。这就是线程间不可见的问题。为了解决这个问题，就引入了volatile关键字，被volatile修饰的变量将不会在本地内存缓存，线程直接通过主内存来读写变量。虽然解决了不可见的问题，但也是以牺牲性能为代价的。\n\nvolatile关键字相信你已经理解了，但是在Java中volatile并不仅仅是这个功能。在这里我通过与c语言中的volatile对比扩展下。\n有的时候我们可能会面临这么个场景，线程1执行某些业务逻辑，线程2判断线程1是否执行完，执行完了则线程2执行另一个逻辑，如下伪代码：\n\n![image](java-lok2/image5.png)\n\n我们通过一个flag变量来标识线程1是否执行完相关逻辑，为了保证flag的改变对线程2可见，这里使用了volatile关键字修饰。如果这个伪代码采用Java实现，这是没问题的，如果c实现，则就会有坑。\n这个坑主要是源于指令重排。为了提高执行效率减少内存的交互，编译器会根据情况对执行的指令做一个重排序。所以线程1中执行相关业务逻辑后，再将flag设置为true的逻辑，极有可能重排为：先设置flag=true然后再执行相关业务逻辑。这也是c语言为啥不提倡使用volatile的原因。\n\n但是为什么在Java中就不会有这个坑呢，难道Java没有指令重排序吗？\n当然不是，Java也会有重排序，不过Java对volatile做了如下的极大增强：\n- 所有对volatile变量的写操作之前的针对其他变量的读写操作，经过编译器、cpu优化后，都不会被重排到对voltile变量的写操作之后。\n- 所有对volatile变量的读操作之后的针对其他变量的读写操作，经过编译器、cpu优化后，都不会被重排到对voltile变量的读操作之前。\n\n面试中，有面试官比较喜欢问这么一个问题：能否用volatile修饰的整数变量n，通过n++操作实现计数的功能？这个问题就是考查应试者对volatile的理解。我这里简单地说一下。\n答案肯定是不能。volatile实现的是线程间共享变量的可见性，并不是原子性操作。++操作其实可以拆分为这么几个步骤：\n- [ ] 读取主内存里的变量\n- [ ]  cpu完成变量的++,然后写会主内存。\n\n所以可以想象这么一个执行顺序：\n- [ ] 线程A读取volatile变量X=0\n- [ ] 线程B读取volatile变量X=0\n- [ ] 线程A完成++操作，然后将X=1写回主存。\n- [ ] 线程B也完成++操作将X=1写回主存。\n\n在这么一个执行顺序下，对X进行了++两次，但值却只增加了1。\n\n关于如何实现原子性操作，我将在下一节进行讨论。\n\n\n","slug":"java-lock2","published":1,"updated":"2018-01-20T08:04:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcn41j990004cfs6mt0my1b4","content":"<h2 id=\"一、JAVA内存模型\"><a href=\"#一、JAVA内存模型\" class=\"headerlink\" title=\"一、JAVA内存模型\"></a>一、JAVA内存模型</h2><p>关于Java内存模型的文章，网上真的数不胜数。在这里我就不打算说的很详细、很严谨了。只力求大家能更好的理解和运用，为后边的技术点做铺垫。<br><a id=\"more\"></a><br>内存模型并不是Java独有的概念，而是我们的计算机硬件平台的一个概念。内存模型描述了程序中变量如何在从内存读出、以及何时写会内存的底层细节。</p>\n<p>我们知道，程序运行其实就是CPU和内存的频繁交互的过程。随着CPU的快速发展，CPU的执行速度越来越快，但是内存却很难跟上CPU的执行速度，为了解决这一矛盾，CPU厂商就为每颗CPU加了高速缓存，用来缓解这个速度不匹配的问题。因此，CPU和内存的交互变成了这个样子：</p>\n<p><img src=\"/2018/01/02/java-lock2/test1.png\" alt=\"image\"></p>\n<p>以上只是在CPU和内存之间加了个高速缓存，其实也还没什么问题。那内存模型这个概念是怎么产生的呢？继续往下看。</p>\n<p>CPU虽然在不停的发展，但单个CPU的主频速度不可能无限制的增长，为了进一步提高计算性能就引入了多核技术。由于每个cpu都有自己的高速缓存，当多个CPU操作同一个内存数据时，就产生了缓存不一致的问题。如下图：</p>\n<p><img src=\"/2018/01/02/java-lock2/image2.png\" alt=\"image\"></p>\n<p>为了解决这个不一致的问题，就需要处理器在运行时要遵循某些协议，这类协议包括MSI、MESI、MOSI等等。到这里就有了内存模型这个概念，它就是用来描述数据在各个高级缓存以及内存之间的交互细节。不同的硬件处理器架构，就会有不同的内存模型。所以用c/c++开发多线程程序时，就需要考虑不同操作平台下的内存模型。</p>\n<p>所幸我们是学Java的，Java平台为了屏蔽不同硬件平台的不同内存模型给开发人员带来的成本，引入了Java内存模型，即JAVA Memory Model，简称JMM。</p>\n<p>要想深入掌握JAVA多线程并发编程，Java内存模型是必须要了解的。Java内存模型定义了多线程之间共享变量的可见性以及如何在需要的时候对共享变量进行同步。直白点说就是：同一个变量，被多个cpu上执行的多个线程访问，每个cpu的高速缓存都缓存了这个变量，当某个线程修改了高速缓存里的变量，何时通知给其他的cpu线程让它可见，以及何时将变量同步回内存(主存)。如下图：</p>\n<p><img src=\"/2018/01/02/java-lock2/image3.png\" alt=\"image\"></p>\n<p>Java虚拟机的内存模型和计算机硬件的内存模型基本一致。在Java内存模型中，分为线程私有的本地内存和线程共享的主内存，线程在读写变量时会把主内存里的变量缓存到本地内存，换句话说，本地内存存放了主内存中变量的副本。主内存和本地内存其实是一种逻辑上的划分，并不是实际的物理内存。</p>\n<p>这里需要强调一下，这里的变量指的是分配到堆上的变量，即线程之间可以共享的变量。本地变量是线程私有的，所以不会有可见性问题。</p>\n<h2 id=\"二、volatile\"><a href=\"#二、volatile\" class=\"headerlink\" title=\"二、volatile\"></a>二、volatile</h2><p>Java内存模型中说到了线程间共享变量的可见性问题。可见性问题其实就是缓存不一致的问题。如下图：</p>\n<p><img src=\"/2018/01/02/java-lock2/image4.png\" alt=\"image\"></p>\n<p>线程B读取变量X，并缓存到了自己的本地内存中，线程A也将变量X缓存到本地内存中并修改为2，这时线程B并不知道变量X修改为2。这就是线程间不可见的问题。为了解决这个问题，就引入了volatile关键字，被volatile修饰的变量将不会在本地内存缓存，线程直接通过主内存来读写变量。虽然解决了不可见的问题，但也是以牺牲性能为代价的。</p>\n<p>volatile关键字相信你已经理解了，但是在Java中volatile并不仅仅是这个功能。在这里我通过与c语言中的volatile对比扩展下。<br>有的时候我们可能会面临这么个场景，线程1执行某些业务逻辑，线程2判断线程1是否执行完，执行完了则线程2执行另一个逻辑，如下伪代码：</p>\n<p><img src=\"/2018/01/02/java-lock2/image5.png\" alt=\"image\"></p>\n<p>我们通过一个flag变量来标识线程1是否执行完相关逻辑，为了保证flag的改变对线程2可见，这里使用了volatile关键字修饰。如果这个伪代码采用Java实现，这是没问题的，如果c实现，则就会有坑。<br>这个坑主要是源于指令重排。为了提高执行效率减少内存的交互，编译器会根据情况对执行的指令做一个重排序。所以线程1中执行相关业务逻辑后，再将flag设置为true的逻辑，极有可能重排为：先设置flag=true然后再执行相关业务逻辑。这也是c语言为啥不提倡使用volatile的原因。</p>\n<p>但是为什么在Java中就不会有这个坑呢，难道Java没有指令重排序吗？<br>当然不是，Java也会有重排序，不过Java对volatile做了如下的极大增强：</p>\n<ul>\n<li>所有对volatile变量的写操作之前的针对其他变量的读写操作，经过编译器、cpu优化后，都不会被重排到对voltile变量的写操作之后。</li>\n<li>所有对volatile变量的读操作之后的针对其他变量的读写操作，经过编译器、cpu优化后，都不会被重排到对voltile变量的读操作之前。</li>\n</ul>\n<p>面试中，有面试官比较喜欢问这么一个问题：能否用volatile修饰的整数变量n，通过n++操作实现计数的功能？这个问题就是考查应试者对volatile的理解。我这里简单地说一下。<br>答案肯定是不能。volatile实现的是线程间共享变量的可见性，并不是原子性操作。++操作其实可以拆分为这么几个步骤：</p>\n<ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 读取主内存里的变量</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> cpu完成变量的++,然后写会主内存。</li>\n</ul>\n<p>所以可以想象这么一个执行顺序：</p>\n<ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 线程A读取volatile变量X=0</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 线程B读取volatile变量X=0</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 线程A完成++操作，然后将X=1写回主存。</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 线程B也完成++操作将X=1写回主存。</li>\n</ul>\n<p>在这么一个执行顺序下，对X进行了++两次，但值却只增加了1。</p>\n<p>关于如何实现原子性操作，我将在下一节进行讨论。</p>\n","site":{"data":{"hint":{"new":{"selector":[".menu-reading",".menu-about"]}},"about":{"avatar":"/images/head2.jpg","name":"清泉","tag":"互联网/Java/区块链/金融","desc":"不甘心只懂技术的技术男","skills":{"Java/JVM":9,"Javascript":7,"Go":6,"invisible-split-line-1":-1,"区块链":8,"金融理财":7},"reward":["/images/weixin2.png","/images/zhifubao2.png"]},"link":{"social":{"weibo":"https://weibo.com/u/6182358871?is_all=1","github":"https://github.com/yongzhidai","rss":"/atom.xml"},"extern":{"博客园博客":"http://www.cnblogs.com/metoy/","博客园博客(备)":"http://www.cnblogs.com/qingquanzi/","知乎":"https://www.zhihu.com/people/yongzhi.dyz"}},"reading":{"define":{"readed":"技术类","reading":"金融类","wanted":"其它"},"contents":{"readed":[{"title":"深入理解Java虚拟机（第2版）","cover":"/images/bookImg/java_jvm.jpg","review":"JVM入门必读","score":"8.9","doubanLink":"https://book.douban.com/subject/24722612/"},{"title":"深入浅出MySQL","cover":"/images/bookImg/mysql.jpg","review":"内容通俗易懂，比较不错。","score":"7.7","doubanLink":"https://book.douban.com/subject/25817684/"},{"title":"区块链技术指南","cover":"/images/bookImg/block_chain.jpg","review":"区块链学习指南！","score":"6.3","doubanLink":"https://book.douban.com/subject/26959322/"}],"reading":[{"title":"彼得·林奇的成功投资","cover":"/images/bookImg/bdlq.jpg","review":"","score":"8.7","doubanLink":"https://book.douban.com/subject/1958714/"}],"wanted":[{"title":"人类简史","cover":"/images/bookImg/rljs.jpg","review":"","score":"9.1","doubanLink":"https://book.douban.com/subject/25985021/"},{"title":"三体","cover":"/images/bookImg/santi.jpg","review":"","score":"8.8","doubanLink":"https://book.douban.com/subject/2567698/"}]}},"slider":[{"image":"/images/bg1.jpg","align":"center","title":"欢迎你，朋友！","subtitle":"","link":"/"},{"image":"/images/bg2.jpg","align":"left","title":"我的知识星球圈子","subtitle":"点击微信扫码加入","link":"https://t.zsxq.com/EUn6IIE"},{"image":"/images/bg3.jpg","align":"right","title":"我的微信公众号","subtitle":"","link":null}]}},"excerpt":"<h2 id=\"一、JAVA内存模型\"><a href=\"#一、JAVA内存模型\" class=\"headerlink\" title=\"一、JAVA内存模型\"></a>一、JAVA内存模型</h2><p>关于Java内存模型的文章，网上真的数不胜数。在这里我就不打算说的很详细、很严谨了。只力求大家能更好的理解和运用，为后边的技术点做铺垫。<br></p>","more":"<br>内存模型并不是Java独有的概念，而是我们的计算机硬件平台的一个概念。内存模型描述了程序中变量如何在从内存读出、以及何时写会内存的底层细节。<p></p>\n<p>我们知道，程序运行其实就是CPU和内存的频繁交互的过程。随着CPU的快速发展，CPU的执行速度越来越快，但是内存却很难跟上CPU的执行速度，为了解决这一矛盾，CPU厂商就为每颗CPU加了高速缓存，用来缓解这个速度不匹配的问题。因此，CPU和内存的交互变成了这个样子：</p>\n<p><img src=\"/2018/01/02/java-lock2/test1.png\" alt=\"image\"></p>\n<p>以上只是在CPU和内存之间加了个高速缓存，其实也还没什么问题。那内存模型这个概念是怎么产生的呢？继续往下看。</p>\n<p>CPU虽然在不停的发展，但单个CPU的主频速度不可能无限制的增长，为了进一步提高计算性能就引入了多核技术。由于每个cpu都有自己的高速缓存，当多个CPU操作同一个内存数据时，就产生了缓存不一致的问题。如下图：</p>\n<p><img src=\"/2018/01/02/java-lock2/image2.png\" alt=\"image\"></p>\n<p>为了解决这个不一致的问题，就需要处理器在运行时要遵循某些协议，这类协议包括MSI、MESI、MOSI等等。到这里就有了内存模型这个概念，它就是用来描述数据在各个高级缓存以及内存之间的交互细节。不同的硬件处理器架构，就会有不同的内存模型。所以用c/c++开发多线程程序时，就需要考虑不同操作平台下的内存模型。</p>\n<p>所幸我们是学Java的，Java平台为了屏蔽不同硬件平台的不同内存模型给开发人员带来的成本，引入了Java内存模型，即JAVA Memory Model，简称JMM。</p>\n<p>要想深入掌握JAVA多线程并发编程，Java内存模型是必须要了解的。Java内存模型定义了多线程之间共享变量的可见性以及如何在需要的时候对共享变量进行同步。直白点说就是：同一个变量，被多个cpu上执行的多个线程访问，每个cpu的高速缓存都缓存了这个变量，当某个线程修改了高速缓存里的变量，何时通知给其他的cpu线程让它可见，以及何时将变量同步回内存(主存)。如下图：</p>\n<p><img src=\"/2018/01/02/java-lock2/image3.png\" alt=\"image\"></p>\n<p>Java虚拟机的内存模型和计算机硬件的内存模型基本一致。在Java内存模型中，分为线程私有的本地内存和线程共享的主内存，线程在读写变量时会把主内存里的变量缓存到本地内存，换句话说，本地内存存放了主内存中变量的副本。主内存和本地内存其实是一种逻辑上的划分，并不是实际的物理内存。</p>\n<p>这里需要强调一下，这里的变量指的是分配到堆上的变量，即线程之间可以共享的变量。本地变量是线程私有的，所以不会有可见性问题。</p>\n<h2 id=\"二、volatile\"><a href=\"#二、volatile\" class=\"headerlink\" title=\"二、volatile\"></a>二、volatile</h2><p>Java内存模型中说到了线程间共享变量的可见性问题。可见性问题其实就是缓存不一致的问题。如下图：</p>\n<p><img src=\"/2018/01/02/java-lock2/image4.png\" alt=\"image\"></p>\n<p>线程B读取变量X，并缓存到了自己的本地内存中，线程A也将变量X缓存到本地内存中并修改为2，这时线程B并不知道变量X修改为2。这就是线程间不可见的问题。为了解决这个问题，就引入了volatile关键字，被volatile修饰的变量将不会在本地内存缓存，线程直接通过主内存来读写变量。虽然解决了不可见的问题，但也是以牺牲性能为代价的。</p>\n<p>volatile关键字相信你已经理解了，但是在Java中volatile并不仅仅是这个功能。在这里我通过与c语言中的volatile对比扩展下。<br>有的时候我们可能会面临这么个场景，线程1执行某些业务逻辑，线程2判断线程1是否执行完，执行完了则线程2执行另一个逻辑，如下伪代码：</p>\n<p><img src=\"/2018/01/02/java-lock2/image5.png\" alt=\"image\"></p>\n<p>我们通过一个flag变量来标识线程1是否执行完相关逻辑，为了保证flag的改变对线程2可见，这里使用了volatile关键字修饰。如果这个伪代码采用Java实现，这是没问题的，如果c实现，则就会有坑。<br>这个坑主要是源于指令重排。为了提高执行效率减少内存的交互，编译器会根据情况对执行的指令做一个重排序。所以线程1中执行相关业务逻辑后，再将flag设置为true的逻辑，极有可能重排为：先设置flag=true然后再执行相关业务逻辑。这也是c语言为啥不提倡使用volatile的原因。</p>\n<p>但是为什么在Java中就不会有这个坑呢，难道Java没有指令重排序吗？<br>当然不是，Java也会有重排序，不过Java对volatile做了如下的极大增强：</p>\n<ul>\n<li>所有对volatile变量的写操作之前的针对其他变量的读写操作，经过编译器、cpu优化后，都不会被重排到对voltile变量的写操作之后。</li>\n<li>所有对volatile变量的读操作之后的针对其他变量的读写操作，经过编译器、cpu优化后，都不会被重排到对voltile变量的读操作之前。</li>\n</ul>\n<p>面试中，有面试官比较喜欢问这么一个问题：能否用volatile修饰的整数变量n，通过n++操作实现计数的功能？这个问题就是考查应试者对volatile的理解。我这里简单地说一下。<br>答案肯定是不能。volatile实现的是线程间共享变量的可见性，并不是原子性操作。++操作其实可以拆分为这么几个步骤：</p>\n<ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 读取主内存里的变量</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> cpu完成变量的++,然后写会主内存。</li>\n</ul>\n<p>所以可以想象这么一个执行顺序：</p>\n<ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 线程A读取volatile变量X=0</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 线程B读取volatile变量X=0</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 线程A完成++操作，然后将X=1写回主存。</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 线程B也完成++操作将X=1写回主存。</li>\n</ul>\n<p>在这么一个执行顺序下，对X进行了++两次，但值却只增加了1。</p>\n<p>关于如何实现原子性操作，我将在下一节进行讨论。</p>"},{"title":"自己动手写把”锁”之---原子性操作","date":"2018-01-06T08:05:34.000Z","_content":"所谓的原子性，就是在执行过程中不会被线程调度机制打断的操作，这种操作从开始就一直运行到结束，中间不存在任何上下文切换。\n<!--more-->\n\n还是以上篇讲到的x++操作为例。这是一个典型的‘读改写’的操作，在多线程的情况下，必须需要硬件的支持来保证‘读改写’的原子性，底层原理可以简单理解，通过锁总线的方式来实现。不过这里咱们不说硬件，咱们先研究下Java是如何原子性实现++操作的。\n\n在Java中，如果要实现一个在多线程下正常工作的累加计数器，首先想到的就是并发包里的AtomicXXX类，如一下例子代码：\n\n\n```\npublic class TestAtomic {\n    private static AtomicInteger couter = new AtomicInteger(0);\n    public static void main(String[] args)throws Exception {\n        Thread t1 = new Thread(new Runnable() {\n            public void run() {\n                for(int i=0;i<1000;i++)\n                    incr();\n            }\n        });\n        Thread t2 = new Thread(new Runnable() {\n            public void run() {\n                for(int i=0;i<1000;i++)\n                    incr();\n            }\n        });\n        t1.start();\n        t2.start();\n        t1.join();\n        t2.join();\n        System.out.println(couter.get());\n    }\n    public static void incr(){\n        couter.incrementAndGet();\n    }\n}\n```\n\n这里我们通过AtomicInteger实现累加器，两个线程各执行了一千次++操作，最后正常输出结果2000。\n\n通过分析AtomicInteger的源码，我们可以发现，其内部用来保存具体数值的变量是这么定义的：\n\n```\nprivate volatile int value;\n```\n\n它通过volatile来实现了value在多线程之间的可见性，即线程A改变了value的值，线程B读取value时读到的是被修改后的值。\n\n但是之前也说到了，volatile修饰的变量，仅通过++操作是无法实现原子性的，原因上篇说了这里就不多说了。\n\n再来看看如果实现多线程间的原子性++操作，进入AtomicInteger的incrementAndGet方法，他通过调用Unsafe的getAndAddInt方法来实现：\n\n```\npublic final int incrementAndGet() {\n    return unsafe.getAndAddInt(this, valueOffset, 1) + 1;\n}\n```\n\n\n\nUnsafe是Java提供用来访问系统底层的工具类，它大致有这几个能力：\n- 直接分队释放堆外内存。Java的直接内存就是通过这个来实现。\n- 线程的挂起和恢复。后边咱们要说的LockSupport就是通过这个实现。\n- CAS操作。即Compare And Swap，简单地说就是比较并交换。在保证‘读改写’一致性上极其有用。它在写操作时会先比较当前内存里的值是否和改之前读的值是否一致，如果一致则修改成功，不一致则修改失败。\n\nUnsafe在CAS操作一个变量时，用到了这个变量在类中的偏移位置。如AtomicInteger操作value变量时通过如下代码先得到valueOffset：\n\n```\nstatic {\n    try {\n        valueOffset = unsafe.objectFieldOffset\n            (AtomicInteger.class.getDeclaredField(\"value\"));\n    } catch (Exception ex) { throw new Error(ex); }\n}\n\n```\n\n\n进入到Unsafe的getAndAddInt方法：\n\n```\nint var5;\ndo {\n    var5 = this.getIntVolatile(var1, var2);\n} while(!this.compareAndSwapInt(var1, var2, var5, var5 + var4));\n\nreturn var5;\n```\n\n这里不断读取value变量的值，然后通过compareAndSwapInt操作，即CAS操作，将修改后的值写回去，直到修改成功退出循环。\n\n说到这里应该把AtomicInteger实现原子性++的操作说清楚了。比较简单，总结起来就两点：\n1. 通过volatile实现变量value的变更对线程可见\n2. 通过Unsafe的CAS操作，避免了一个线程的修改覆盖另一个线程的修改，从而实现结果上的一致性。\n\n\n这里我们不妨再看看Unsafe的comareAndSwapInt方法的实现，这个方法定义如下：\n\n```\npublic final native boolean compareAndSwapInt(Object var1, long var2, int var4, int var5);\n```\n\n这是一个用native修饰的本地方法，通过openjdk的源码可以找到其本地实现代码：\n\n![image](java-lok2/imag1.png)\n\n这里可以看到，它是先计算出了要修改的变量地址，然后调用Atomic的cmpxchg方法实现cas操作。我们继续跟踪cmpxchg方法：\n\n![image](java-lok2/imag2.png)\n\n这是x86平台下的源码实现，可以看到它用了cmpxchgl汇编指令。也就是说，原子性操作是要硬件层面的支持。\n\n","source":"_posts/java-lock3.md","raw":"---\ntitle: 自己动手写把”锁”之---原子性操作\ncategories:\n  - 技术\n  - Java\ntags:\n  - cas\n  - 原子性\ndate: 2018-01-06 16:05:34\n---\n所谓的原子性，就是在执行过程中不会被线程调度机制打断的操作，这种操作从开始就一直运行到结束，中间不存在任何上下文切换。\n<!--more-->\n\n还是以上篇讲到的x++操作为例。这是一个典型的‘读改写’的操作，在多线程的情况下，必须需要硬件的支持来保证‘读改写’的原子性，底层原理可以简单理解，通过锁总线的方式来实现。不过这里咱们不说硬件，咱们先研究下Java是如何原子性实现++操作的。\n\n在Java中，如果要实现一个在多线程下正常工作的累加计数器，首先想到的就是并发包里的AtomicXXX类，如一下例子代码：\n\n\n```\npublic class TestAtomic {\n    private static AtomicInteger couter = new AtomicInteger(0);\n    public static void main(String[] args)throws Exception {\n        Thread t1 = new Thread(new Runnable() {\n            public void run() {\n                for(int i=0;i<1000;i++)\n                    incr();\n            }\n        });\n        Thread t2 = new Thread(new Runnable() {\n            public void run() {\n                for(int i=0;i<1000;i++)\n                    incr();\n            }\n        });\n        t1.start();\n        t2.start();\n        t1.join();\n        t2.join();\n        System.out.println(couter.get());\n    }\n    public static void incr(){\n        couter.incrementAndGet();\n    }\n}\n```\n\n这里我们通过AtomicInteger实现累加器，两个线程各执行了一千次++操作，最后正常输出结果2000。\n\n通过分析AtomicInteger的源码，我们可以发现，其内部用来保存具体数值的变量是这么定义的：\n\n```\nprivate volatile int value;\n```\n\n它通过volatile来实现了value在多线程之间的可见性，即线程A改变了value的值，线程B读取value时读到的是被修改后的值。\n\n但是之前也说到了，volatile修饰的变量，仅通过++操作是无法实现原子性的，原因上篇说了这里就不多说了。\n\n再来看看如果实现多线程间的原子性++操作，进入AtomicInteger的incrementAndGet方法，他通过调用Unsafe的getAndAddInt方法来实现：\n\n```\npublic final int incrementAndGet() {\n    return unsafe.getAndAddInt(this, valueOffset, 1) + 1;\n}\n```\n\n\n\nUnsafe是Java提供用来访问系统底层的工具类，它大致有这几个能力：\n- 直接分队释放堆外内存。Java的直接内存就是通过这个来实现。\n- 线程的挂起和恢复。后边咱们要说的LockSupport就是通过这个实现。\n- CAS操作。即Compare And Swap，简单地说就是比较并交换。在保证‘读改写’一致性上极其有用。它在写操作时会先比较当前内存里的值是否和改之前读的值是否一致，如果一致则修改成功，不一致则修改失败。\n\nUnsafe在CAS操作一个变量时，用到了这个变量在类中的偏移位置。如AtomicInteger操作value变量时通过如下代码先得到valueOffset：\n\n```\nstatic {\n    try {\n        valueOffset = unsafe.objectFieldOffset\n            (AtomicInteger.class.getDeclaredField(\"value\"));\n    } catch (Exception ex) { throw new Error(ex); }\n}\n\n```\n\n\n进入到Unsafe的getAndAddInt方法：\n\n```\nint var5;\ndo {\n    var5 = this.getIntVolatile(var1, var2);\n} while(!this.compareAndSwapInt(var1, var2, var5, var5 + var4));\n\nreturn var5;\n```\n\n这里不断读取value变量的值，然后通过compareAndSwapInt操作，即CAS操作，将修改后的值写回去，直到修改成功退出循环。\n\n说到这里应该把AtomicInteger实现原子性++的操作说清楚了。比较简单，总结起来就两点：\n1. 通过volatile实现变量value的变更对线程可见\n2. 通过Unsafe的CAS操作，避免了一个线程的修改覆盖另一个线程的修改，从而实现结果上的一致性。\n\n\n这里我们不妨再看看Unsafe的comareAndSwapInt方法的实现，这个方法定义如下：\n\n```\npublic final native boolean compareAndSwapInt(Object var1, long var2, int var4, int var5);\n```\n\n这是一个用native修饰的本地方法，通过openjdk的源码可以找到其本地实现代码：\n\n![image](java-lok2/imag1.png)\n\n这里可以看到，它是先计算出了要修改的变量地址，然后调用Atomic的cmpxchg方法实现cas操作。我们继续跟踪cmpxchg方法：\n\n![image](java-lok2/imag2.png)\n\n这是x86平台下的源码实现，可以看到它用了cmpxchgl汇编指令。也就是说，原子性操作是要硬件层面的支持。\n\n","slug":"java-lock3","published":1,"updated":"2018-01-20T08:44:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcn41j9b0005cfs6qgdbuvcq","content":"<p>所谓的原子性，就是在执行过程中不会被线程调度机制打断的操作，这种操作从开始就一直运行到结束，中间不存在任何上下文切换。<br><a id=\"more\"></a></p>\n<p>还是以上篇讲到的x++操作为例。这是一个典型的‘读改写’的操作，在多线程的情况下，必须需要硬件的支持来保证‘读改写’的原子性，底层原理可以简单理解，通过锁总线的方式来实现。不过这里咱们不说硬件，咱们先研究下Java是如何原子性实现++操作的。</p>\n<p>在Java中，如果要实现一个在多线程下正常工作的累加计数器，首先想到的就是并发包里的AtomicXXX类，如一下例子代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TestAtomic &#123;</span><br><span class=\"line\">    private static AtomicInteger couter = new AtomicInteger(0);</span><br><span class=\"line\">    public static void main(String[] args)throws Exception &#123;</span><br><span class=\"line\">        Thread t1 = new Thread(new Runnable() &#123;</span><br><span class=\"line\">            public void run() &#123;</span><br><span class=\"line\">                for(int i=0;i&lt;1000;i++)</span><br><span class=\"line\">                    incr();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        Thread t2 = new Thread(new Runnable() &#123;</span><br><span class=\"line\">            public void run() &#123;</span><br><span class=\"line\">                for(int i=0;i&lt;1000;i++)</span><br><span class=\"line\">                    incr();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\">        t2.start();</span><br><span class=\"line\">        t1.join();</span><br><span class=\"line\">        t2.join();</span><br><span class=\"line\">        System.out.println(couter.get());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public static void incr()&#123;</span><br><span class=\"line\">        couter.incrementAndGet();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里我们通过AtomicInteger实现累加器，两个线程各执行了一千次++操作，最后正常输出结果2000。</p>\n<p>通过分析AtomicInteger的源码，我们可以发现，其内部用来保存具体数值的变量是这么定义的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private volatile int value;</span><br></pre></td></tr></table></figure>\n<p>它通过volatile来实现了value在多线程之间的可见性，即线程A改变了value的值，线程B读取value时读到的是被修改后的值。</p>\n<p>但是之前也说到了，volatile修饰的变量，仅通过++操作是无法实现原子性的，原因上篇说了这里就不多说了。</p>\n<p>再来看看如果实现多线程间的原子性++操作，进入AtomicInteger的incrementAndGet方法，他通过调用Unsafe的getAndAddInt方法来实现：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public final int incrementAndGet() &#123;</span><br><span class=\"line\">    return unsafe.getAndAddInt(this, valueOffset, 1) + 1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Unsafe是Java提供用来访问系统底层的工具类，它大致有这几个能力：</p>\n<ul>\n<li>直接分队释放堆外内存。Java的直接内存就是通过这个来实现。</li>\n<li>线程的挂起和恢复。后边咱们要说的LockSupport就是通过这个实现。</li>\n<li>CAS操作。即Compare And Swap，简单地说就是比较并交换。在保证‘读改写’一致性上极其有用。它在写操作时会先比较当前内存里的值是否和改之前读的值是否一致，如果一致则修改成功，不一致则修改失败。</li>\n</ul>\n<p>Unsafe在CAS操作一个变量时，用到了这个变量在类中的偏移位置。如AtomicInteger操作value变量时通过如下代码先得到valueOffset：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static &#123;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        valueOffset = unsafe.objectFieldOffset</span><br><span class=\"line\">            (AtomicInteger.class.getDeclaredField(&quot;value&quot;));</span><br><span class=\"line\">    &#125; catch (Exception ex) &#123; throw new Error(ex); &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>进入到Unsafe的getAndAddInt方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int var5;</span><br><span class=\"line\">do &#123;</span><br><span class=\"line\">    var5 = this.getIntVolatile(var1, var2);</span><br><span class=\"line\">&#125; while(!this.compareAndSwapInt(var1, var2, var5, var5 + var4));</span><br><span class=\"line\"></span><br><span class=\"line\">return var5;</span><br></pre></td></tr></table></figure>\n<p>这里不断读取value变量的值，然后通过compareAndSwapInt操作，即CAS操作，将修改后的值写回去，直到修改成功退出循环。</p>\n<p>说到这里应该把AtomicInteger实现原子性++的操作说清楚了。比较简单，总结起来就两点：</p>\n<ol>\n<li>通过volatile实现变量value的变更对线程可见</li>\n<li>通过Unsafe的CAS操作，避免了一个线程的修改覆盖另一个线程的修改，从而实现结果上的一致性。</li>\n</ol>\n<p>这里我们不妨再看看Unsafe的comareAndSwapInt方法的实现，这个方法定义如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public final native boolean compareAndSwapInt(Object var1, long var2, int var4, int var5);</span><br></pre></td></tr></table></figure>\n<p>这是一个用native修饰的本地方法，通过openjdk的源码可以找到其本地实现代码：</p>\n<p><img src=\"/2018/01/06/java-lock3/imag1.png\" alt=\"image\"></p>\n<p>这里可以看到，它是先计算出了要修改的变量地址，然后调用Atomic的cmpxchg方法实现cas操作。我们继续跟踪cmpxchg方法：</p>\n<p><img src=\"/2018/01/06/java-lock3/imag2.png\" alt=\"image\"></p>\n<p>这是x86平台下的源码实现，可以看到它用了cmpxchgl汇编指令。也就是说，原子性操作是要硬件层面的支持。</p>\n","site":{"data":{"hint":{"new":{"selector":[".menu-reading",".menu-about"]}},"about":{"avatar":"/images/head2.jpg","name":"清泉","tag":"互联网/Java/区块链/金融","desc":"不甘心只懂技术的技术男","skills":{"Java/JVM":9,"Javascript":7,"Go":6,"invisible-split-line-1":-1,"区块链":8,"金融理财":7},"reward":["/images/weixin2.png","/images/zhifubao2.png"]},"link":{"social":{"weibo":"https://weibo.com/u/6182358871?is_all=1","github":"https://github.com/yongzhidai","rss":"/atom.xml"},"extern":{"博客园博客":"http://www.cnblogs.com/metoy/","博客园博客(备)":"http://www.cnblogs.com/qingquanzi/","知乎":"https://www.zhihu.com/people/yongzhi.dyz"}},"reading":{"define":{"readed":"技术类","reading":"金融类","wanted":"其它"},"contents":{"readed":[{"title":"深入理解Java虚拟机（第2版）","cover":"/images/bookImg/java_jvm.jpg","review":"JVM入门必读","score":"8.9","doubanLink":"https://book.douban.com/subject/24722612/"},{"title":"深入浅出MySQL","cover":"/images/bookImg/mysql.jpg","review":"内容通俗易懂，比较不错。","score":"7.7","doubanLink":"https://book.douban.com/subject/25817684/"},{"title":"区块链技术指南","cover":"/images/bookImg/block_chain.jpg","review":"区块链学习指南！","score":"6.3","doubanLink":"https://book.douban.com/subject/26959322/"}],"reading":[{"title":"彼得·林奇的成功投资","cover":"/images/bookImg/bdlq.jpg","review":"","score":"8.7","doubanLink":"https://book.douban.com/subject/1958714/"}],"wanted":[{"title":"人类简史","cover":"/images/bookImg/rljs.jpg","review":"","score":"9.1","doubanLink":"https://book.douban.com/subject/25985021/"},{"title":"三体","cover":"/images/bookImg/santi.jpg","review":"","score":"8.8","doubanLink":"https://book.douban.com/subject/2567698/"}]}},"slider":[{"image":"/images/bg1.jpg","align":"center","title":"欢迎你，朋友！","subtitle":"","link":"/"},{"image":"/images/bg2.jpg","align":"left","title":"我的知识星球圈子","subtitle":"点击微信扫码加入","link":"https://t.zsxq.com/EUn6IIE"},{"image":"/images/bg3.jpg","align":"right","title":"我的微信公众号","subtitle":"","link":null}]}},"excerpt":"<p>所谓的原子性，就是在执行过程中不会被线程调度机制打断的操作，这种操作从开始就一直运行到结束，中间不存在任何上下文切换。<br></p>","more":"<p></p>\n<p>还是以上篇讲到的x++操作为例。这是一个典型的‘读改写’的操作，在多线程的情况下，必须需要硬件的支持来保证‘读改写’的原子性，底层原理可以简单理解，通过锁总线的方式来实现。不过这里咱们不说硬件，咱们先研究下Java是如何原子性实现++操作的。</p>\n<p>在Java中，如果要实现一个在多线程下正常工作的累加计数器，首先想到的就是并发包里的AtomicXXX类，如一下例子代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TestAtomic &#123;</span><br><span class=\"line\">    private static AtomicInteger couter = new AtomicInteger(0);</span><br><span class=\"line\">    public static void main(String[] args)throws Exception &#123;</span><br><span class=\"line\">        Thread t1 = new Thread(new Runnable() &#123;</span><br><span class=\"line\">            public void run() &#123;</span><br><span class=\"line\">                for(int i=0;i&lt;1000;i++)</span><br><span class=\"line\">                    incr();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        Thread t2 = new Thread(new Runnable() &#123;</span><br><span class=\"line\">            public void run() &#123;</span><br><span class=\"line\">                for(int i=0;i&lt;1000;i++)</span><br><span class=\"line\">                    incr();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\">        t2.start();</span><br><span class=\"line\">        t1.join();</span><br><span class=\"line\">        t2.join();</span><br><span class=\"line\">        System.out.println(couter.get());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public static void incr()&#123;</span><br><span class=\"line\">        couter.incrementAndGet();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里我们通过AtomicInteger实现累加器，两个线程各执行了一千次++操作，最后正常输出结果2000。</p>\n<p>通过分析AtomicInteger的源码，我们可以发现，其内部用来保存具体数值的变量是这么定义的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private volatile int value;</span><br></pre></td></tr></table></figure>\n<p>它通过volatile来实现了value在多线程之间的可见性，即线程A改变了value的值，线程B读取value时读到的是被修改后的值。</p>\n<p>但是之前也说到了，volatile修饰的变量，仅通过++操作是无法实现原子性的，原因上篇说了这里就不多说了。</p>\n<p>再来看看如果实现多线程间的原子性++操作，进入AtomicInteger的incrementAndGet方法，他通过调用Unsafe的getAndAddInt方法来实现：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public final int incrementAndGet() &#123;</span><br><span class=\"line\">    return unsafe.getAndAddInt(this, valueOffset, 1) + 1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Unsafe是Java提供用来访问系统底层的工具类，它大致有这几个能力：</p>\n<ul>\n<li>直接分队释放堆外内存。Java的直接内存就是通过这个来实现。</li>\n<li>线程的挂起和恢复。后边咱们要说的LockSupport就是通过这个实现。</li>\n<li>CAS操作。即Compare And Swap，简单地说就是比较并交换。在保证‘读改写’一致性上极其有用。它在写操作时会先比较当前内存里的值是否和改之前读的值是否一致，如果一致则修改成功，不一致则修改失败。</li>\n</ul>\n<p>Unsafe在CAS操作一个变量时，用到了这个变量在类中的偏移位置。如AtomicInteger操作value变量时通过如下代码先得到valueOffset：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static &#123;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        valueOffset = unsafe.objectFieldOffset</span><br><span class=\"line\">            (AtomicInteger.class.getDeclaredField(&quot;value&quot;));</span><br><span class=\"line\">    &#125; catch (Exception ex) &#123; throw new Error(ex); &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>进入到Unsafe的getAndAddInt方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int var5;</span><br><span class=\"line\">do &#123;</span><br><span class=\"line\">    var5 = this.getIntVolatile(var1, var2);</span><br><span class=\"line\">&#125; while(!this.compareAndSwapInt(var1, var2, var5, var5 + var4));</span><br><span class=\"line\"></span><br><span class=\"line\">return var5;</span><br></pre></td></tr></table></figure>\n<p>这里不断读取value变量的值，然后通过compareAndSwapInt操作，即CAS操作，将修改后的值写回去，直到修改成功退出循环。</p>\n<p>说到这里应该把AtomicInteger实现原子性++的操作说清楚了。比较简单，总结起来就两点：</p>\n<ol>\n<li>通过volatile实现变量value的变更对线程可见</li>\n<li>通过Unsafe的CAS操作，避免了一个线程的修改覆盖另一个线程的修改，从而实现结果上的一致性。</li>\n</ol>\n<p>这里我们不妨再看看Unsafe的comareAndSwapInt方法的实现，这个方法定义如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public final native boolean compareAndSwapInt(Object var1, long var2, int var4, int var5);</span><br></pre></td></tr></table></figure>\n<p>这是一个用native修饰的本地方法，通过openjdk的源码可以找到其本地实现代码：</p>\n<p><img src=\"/2018/01/06/java-lock3/imag1.png\" alt=\"image\"></p>\n<p>这里可以看到，它是先计算出了要修改的变量地址，然后调用Atomic的cmpxchg方法实现cas操作。我们继续跟踪cmpxchg方法：</p>\n<p><img src=\"/2018/01/06/java-lock3/imag2.png\" alt=\"image\"></p>\n<p>这是x86平台下的源码实现，可以看到它用了cmpxchgl汇编指令。也就是说，原子性操作是要硬件层面的支持。</p>"},{"title":"自己动手写把“锁”之---LockSupport介绍","date":"2018-01-07T08:05:37.000Z","_content":"本篇是《自己动手写把\"锁\"》系列技术铺垫的最后一个知识点。本篇主要讲解LockSupport工具类，它用来实现线程的挂起和唤醒。\n\nLockSupport是Java6引入的一个工具类，它简单灵活，应用广泛。\n<!--more--> \n### 一、简单 \n俗话说，没有比较就没有伤害。这里咱们还是通过对比来介绍LockSupport的简单。\n在没有LockSupport之前，线程的挂起和唤醒咱们都是通过Object的wait和notify/notifyAll方法实现。\n写一段例子代码，线程A执行一段业务逻辑后调用wait阻塞住自己。主线程调用notify方法唤醒线程A，线程A然后打印自己执行的结果。\n\n```\npublic class TestObjWait {\n\n    public static void main(String[] args)throws Exception {\n        final Object obj = new Object();\n        Thread A = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                int sum = 0;\n                for(int i=0;i<10;i++){\n                    sum+=i;\n                }\n                try {\n                    obj.wait();\n                }catch (Exception e){\n                    e.printStackTrace();\n                }\n                System.out.println(sum);\n            }\n        });\n        A.start();\n        //睡眠一秒钟，保证线程A已经计算完成，阻塞在wait方法\n        Thread.sleep(1000);\n        obj.notify();\n    }\n}\n```\n\n执行这段代码，不难发现这个错误：\n\n```\nException in thread \"main\" java.lang.IllegalMonitorStateException\n    at java.lang.Object.notify(Native Method)\n```\n\n原因很简单，wait和notify/notifyAll方法只能在同步代码块里用(这个有的面试官也会考察)。所以将代码修改为如下就可正常运行了：\n\n```\npublic class TestObjWait {\n\n    public static void main(String[] args)throws Exception {\n        final Object obj = new Object();\n        Thread A = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                int sum = 0;\n                for(int i=0;i<10;i++){\n                    sum+=i;\n                }\n                try {\n                    synchronized (obj){\n                        obj.wait();\n                    }\n                }catch (Exception e){\n                    e.printStackTrace();\n                }\n                System.out.println(sum);\n            }\n        });\n        A.start();\n        //睡眠一秒钟，保证线程A已经计算完成，阻塞在wait方法\n        Thread.sleep(1000);\n        synchronized (obj){\n            obj.notify();\n        }\n    }\n}\n```\n\n \n那如果咱们换成LockSupport呢？简单得很，看代码：\n\n```\npublic class TestObjWait {\n\n    public static void main(String[] args)throws Exception {\n        Thread A = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                int sum = 0;\n                for(int i=0;i<10;i++){\n                    sum+=i;\n                }\n                LockSupport.park();\n                System.out.println(sum);\n            }\n        });\n        A.start();\n        //睡眠一秒钟，保证线程A已经计算完成，阻塞在wait方法\n        Thread.sleep(1000);\n        LockSupport.unpark(A);\n    }\n}\n```\n\n直接调用就可以了，没有说非得在同步代码块里才能用。简单吧。\n\n### 二、灵活\n如果只是LockSupport在使用起来比Object的wait/notify简单，那还真没必要专门讲解下LockSupport。最主要的是灵活性。\n上边的例子代码中，主线程调用了Thread.sleep(1000)方法来等待线程A计算完成进入wait状态。如果去掉Thread.sleep()调用，代码如下：\n\n```\npublic class TestObjWait {\n\n    public static void main(String[] args)throws Exception {\n        final Object obj = new Object();\n        Thread A = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                int sum = 0;\n                for(int i=0;i<10;i++){\n                    sum+=i;\n                }\n                try {\n                    synchronized (obj){\n                        obj.wait();\n                    }\n                }catch (Exception e){\n                    e.printStackTrace();\n                }\n                System.out.println(sum);\n            }\n        });\n        A.start();\n        //睡眠一秒钟，保证线程A已经计算完成，阻塞在wait方法\n        //Thread.sleep(1000);\n        synchronized (obj){\n            obj.notify();\n        }\n    }\n}\n```\n\n \n多运行几次上边的代码，有的时候能够正常打印结果并退出程序，但有的时候线程无法打印结果阻塞住了。原因就在于：主线程调用完notify后，线程A才进入wait方法，导致线程A一直阻塞住。由于线程A不是后台线程，所以整个程序无法退出。\n\n那如果换做LockSupport呢？LockSupport就支持主线程先调用unpark后，线程A再调用park而不被阻塞吗？是的，没错。代码如下：\n\n```\npublic class TestObjWait {\n\n    public static void main(String[] args)throws Exception {\n        final Object obj = new Object();\n        Thread A = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                int sum = 0;\n                for(int i=0;i<10;i++){\n                    sum+=i;\n                }\n                LockSupport.park();\n                System.out.println(sum);\n            }\n        });\n        A.start();\n        //睡眠一秒钟，保证线程A已经计算完成，阻塞在wait方法\n        //Thread.sleep(1000);\n        LockSupport.unpark(A);\n    }\n}\n```\n\n \n不管你执行多少次，这段代码都能正常打印结果并退出。这就是LockSupport最大的灵活所在。\n \n**总结一下，LockSupport比Object的wait/notify有两大优势**：\n- LockSupport不需要在同步代码块里 。所以线程间也不需要维护一个共享的同步对象，实现了线程间的解耦。\n- unpark函数可以先于park调用，所以不需要担心线程间的执行的先后顺序。\n \n### 三、应用广泛\nLockSupport在Java的工具类用应用很广泛，咱们这里找几个例子感受感受。以Java里最常用的类ThreadPoolExecutor为例。先看如下代码：\n\n```\npublic class TestObjWait {\n\n    public static void main(String[] args)throws Exception {\n        ArrayBlockingQueue<Runnable> queue = new ArrayBlockingQueue<Runnable>(1000);\n        ThreadPoolExecutor poolExecutor = new ThreadPoolExecutor(5,5,1000, TimeUnit.SECONDS,queue);\n\n        Future<String> future = poolExecutor.submit(new Callable<String>() {\n            @Override\n            public String call() throws Exception {\n                TimeUnit.SECONDS.sleep(5);\n                return \"hello\";\n            }\n        });\n        String result = future.get();\n        System.out.println(result);\n    }\n}\n```\n\n 代码中我们向线程池中扔了一个任务，然后调用Future的get方法，同步阻塞等待线程池的执行结果。\n这里就要问了：**get方法是如何组塞住当前线程？线程池执行完任务后又是如何唤醒线程的呢？**\n\n咱们跟着源码一步步分析，先看线程池的submit方法的实现：\n\n![image](java-lock4/img1.png)\n\n在submit方法里，线程池将我们提交的基于Callable实现的任务，封装为基于RunnableFuture实现的任务，然后将任务提交到线程池执行，并向当前线程返回RunnableFutrue。\n\n进入newTaskFor方法，就一句话：\n\n```\nreturn new FutureTask<T>(callable);\n```\n\n所以，咱们主线程调用future的get方法就是FutureTask的get方法，线程池执行的任务对象也是FutureTask的实例。\n\n接下来看看FutureTask的get方法的实现：\n\n![image](java-lock4/img2.png)\n\n比较简单，就是判断下当前任务是否执行完毕，如果执行完毕直接返回任务结果，否则进入awaitDone方法阻塞等待。\n\n![image](java-lock4/img3.png)\n\nawaitDone方法里，首先会用到上节讲到的cas操作，将线程封装为WaitNode，保存下来，以供后续唤醒线程时用。再就是调用了LockSupport的park/parkNanos组塞住当前线程。\n \n上边已经说完了阻塞等待任务结果的逻辑，接下来再看看线程池执行完任务，唤醒等待线程的逻辑实现。\n\n前边说了，咱们提交的基于Callable实现的任务，已经被封装为FutureTask任务提交给了线程池执行，任务的执行就是FutureTask的run方法执行。如下是FutureTask的run方法：\n\n![image](java-lock4/img4.png)\n\nc.call()就是执行我们提交的任务，任务执行完后调用了set方法，进入set方法发现set方法调用了finishCompletion方法，想必唤醒线程的工作就在这里边了，看看代码实现吧：\n\n![image](java-lock4/img5.png)\n\n没错就在这里边，先是通过cas操作将所有等待的线程拿出来，然后便使用LockSupport的unpark唤醒每个线程。\n \n在使用线程池的过程中，不知道你有没有这么一个疑问：线程池里没有任务时，线程池里的线程在干嘛呢？\n\n看过我的这篇文章《线程池的工作原理与源码解读》的读者一定知道，线程会调用队列的take方法阻塞等待新任务。那队列的take方法是不是也跟Future的get方法实现一样呢？咱们来看看源码实现。\n\n以ArrayBlockingQueue为例，take方法实现如下：\n\n![image](java-lock6/img6.png)\n\n与想象的有点出入，他是使用了Lock的Condition的await方法实现线程阻塞。但当我们继续追下去进入await方法，发现还是使用了LockSupport：\n\n![image](java-lock4/img7.png)\n\n限于篇幅，jdk里的更多应用就不再追下去了。\n \n### 四、LockSupport的实现\n学习要知其然，还要知其所以然。接下来不妨看看LockSupport的实现。\n\n进入LockSupport的park方法，可以发现它是调用了Unsafe的park方法，这是一个本地native方法，只能通过openjdk的源码看看其本地实现了：\n\n![image](java-lock4/img8.png)\n\n它调用了线程的Parker类型对象的park方法，如下是Parker类的定义：\n\n![image](java-lock4/img9.png)\n\n类中定义了一个int类型的_counter变量，咱们上文中讲灵活性的那一节说：可以先执行unpark后执行park，就是通过这个变量实现。看下park方法的实现代码(由于方法比较长就不整体截图了)：\n\n![image](java-lock4/img10.png)\n\npark方法会调用Atomic::xchg方法，这个方法会原子性的将_counter赋值为0，并返回赋值前的值。如果调用park方法前，_counter大于0，则说明之前调用过unpark方法，所以park方法直接返回。\n接着往下看：\n\n![image](java-lock4/img11.png)\n\n实际上Parker类用Posix的mutex，condition来实现的阻塞唤醒。如果对mutex和condition不熟，可以简单理解为mutex就是Java里的synchronized，condition就是Object里的wait/notify操作。\n\npark方法里调用pthread_mutex_trylock方法，就相当于Java线程进入Java的同步代码块，然后再次判断_counter是否大于零，如果大于零则将_counter设置为零。最后调用pthread_mutex_unlock解锁，相当于Java执行完退出同步代码块。如果_counter不大于零，则继续往下执行pthread_cond_wait方法，实现当前线程的阻塞。\n \n最后再看看unpark方法的实现吧，这块就简单多了，直接上代码：\n\n![image](java-lock4/img12.png)\n\n图中的1和4就相当于Java的进入synchronized和退出synchronized的加锁解锁操作，代码2将_counter设置为1，同时判断先前_counter的值是否小于1，即这段代码：if(s<1)。如果不小于1，则就不会有线程被park，所以方法直接执行完毕，否则就会执行代码3，来唤醒被阻塞的线程。\n \n通过阅读LockSupport的本地实现，我们不难发现这么个问题：多次调用unpark方法和调用一次unpark方法效果一样，因为都是直接将_counter赋值为1，而不是加1。简单说就是：线程A连续调用两次LockSupport.unpark(B)方法唤醒线程B，然后线程B调用两次LockSupport.park()方法， 线程B依旧会被阻塞。因为两次unpark调用效果跟一次调用一样，只能让线程B的第一次调用park方法不被阻塞，第二次调用依旧会阻塞。\n \n到这里,自己实现一把“锁”用到的技术点都已经介绍完了，甚至本节还介绍了锁的具体实现，相信即使没有最后一篇介绍怎么实现“锁”，大家也能动手写个锁了。","source":"_posts/java-lock4.md","raw":"---\ntitle: 自己动手写把“锁”之---LockSupport介绍\ncategories:\n  - 技术\n  - Java\ntags:\n  - locksupport\n  - 线程池\ndate: 2018-01-07 16:05:37\n---\n本篇是《自己动手写把\"锁\"》系列技术铺垫的最后一个知识点。本篇主要讲解LockSupport工具类，它用来实现线程的挂起和唤醒。\n\nLockSupport是Java6引入的一个工具类，它简单灵活，应用广泛。\n<!--more--> \n### 一、简单 \n俗话说，没有比较就没有伤害。这里咱们还是通过对比来介绍LockSupport的简单。\n在没有LockSupport之前，线程的挂起和唤醒咱们都是通过Object的wait和notify/notifyAll方法实现。\n写一段例子代码，线程A执行一段业务逻辑后调用wait阻塞住自己。主线程调用notify方法唤醒线程A，线程A然后打印自己执行的结果。\n\n```\npublic class TestObjWait {\n\n    public static void main(String[] args)throws Exception {\n        final Object obj = new Object();\n        Thread A = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                int sum = 0;\n                for(int i=0;i<10;i++){\n                    sum+=i;\n                }\n                try {\n                    obj.wait();\n                }catch (Exception e){\n                    e.printStackTrace();\n                }\n                System.out.println(sum);\n            }\n        });\n        A.start();\n        //睡眠一秒钟，保证线程A已经计算完成，阻塞在wait方法\n        Thread.sleep(1000);\n        obj.notify();\n    }\n}\n```\n\n执行这段代码，不难发现这个错误：\n\n```\nException in thread \"main\" java.lang.IllegalMonitorStateException\n    at java.lang.Object.notify(Native Method)\n```\n\n原因很简单，wait和notify/notifyAll方法只能在同步代码块里用(这个有的面试官也会考察)。所以将代码修改为如下就可正常运行了：\n\n```\npublic class TestObjWait {\n\n    public static void main(String[] args)throws Exception {\n        final Object obj = new Object();\n        Thread A = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                int sum = 0;\n                for(int i=0;i<10;i++){\n                    sum+=i;\n                }\n                try {\n                    synchronized (obj){\n                        obj.wait();\n                    }\n                }catch (Exception e){\n                    e.printStackTrace();\n                }\n                System.out.println(sum);\n            }\n        });\n        A.start();\n        //睡眠一秒钟，保证线程A已经计算完成，阻塞在wait方法\n        Thread.sleep(1000);\n        synchronized (obj){\n            obj.notify();\n        }\n    }\n}\n```\n\n \n那如果咱们换成LockSupport呢？简单得很，看代码：\n\n```\npublic class TestObjWait {\n\n    public static void main(String[] args)throws Exception {\n        Thread A = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                int sum = 0;\n                for(int i=0;i<10;i++){\n                    sum+=i;\n                }\n                LockSupport.park();\n                System.out.println(sum);\n            }\n        });\n        A.start();\n        //睡眠一秒钟，保证线程A已经计算完成，阻塞在wait方法\n        Thread.sleep(1000);\n        LockSupport.unpark(A);\n    }\n}\n```\n\n直接调用就可以了，没有说非得在同步代码块里才能用。简单吧。\n\n### 二、灵活\n如果只是LockSupport在使用起来比Object的wait/notify简单，那还真没必要专门讲解下LockSupport。最主要的是灵活性。\n上边的例子代码中，主线程调用了Thread.sleep(1000)方法来等待线程A计算完成进入wait状态。如果去掉Thread.sleep()调用，代码如下：\n\n```\npublic class TestObjWait {\n\n    public static void main(String[] args)throws Exception {\n        final Object obj = new Object();\n        Thread A = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                int sum = 0;\n                for(int i=0;i<10;i++){\n                    sum+=i;\n                }\n                try {\n                    synchronized (obj){\n                        obj.wait();\n                    }\n                }catch (Exception e){\n                    e.printStackTrace();\n                }\n                System.out.println(sum);\n            }\n        });\n        A.start();\n        //睡眠一秒钟，保证线程A已经计算完成，阻塞在wait方法\n        //Thread.sleep(1000);\n        synchronized (obj){\n            obj.notify();\n        }\n    }\n}\n```\n\n \n多运行几次上边的代码，有的时候能够正常打印结果并退出程序，但有的时候线程无法打印结果阻塞住了。原因就在于：主线程调用完notify后，线程A才进入wait方法，导致线程A一直阻塞住。由于线程A不是后台线程，所以整个程序无法退出。\n\n那如果换做LockSupport呢？LockSupport就支持主线程先调用unpark后，线程A再调用park而不被阻塞吗？是的，没错。代码如下：\n\n```\npublic class TestObjWait {\n\n    public static void main(String[] args)throws Exception {\n        final Object obj = new Object();\n        Thread A = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                int sum = 0;\n                for(int i=0;i<10;i++){\n                    sum+=i;\n                }\n                LockSupport.park();\n                System.out.println(sum);\n            }\n        });\n        A.start();\n        //睡眠一秒钟，保证线程A已经计算完成，阻塞在wait方法\n        //Thread.sleep(1000);\n        LockSupport.unpark(A);\n    }\n}\n```\n\n \n不管你执行多少次，这段代码都能正常打印结果并退出。这就是LockSupport最大的灵活所在。\n \n**总结一下，LockSupport比Object的wait/notify有两大优势**：\n- LockSupport不需要在同步代码块里 。所以线程间也不需要维护一个共享的同步对象，实现了线程间的解耦。\n- unpark函数可以先于park调用，所以不需要担心线程间的执行的先后顺序。\n \n### 三、应用广泛\nLockSupport在Java的工具类用应用很广泛，咱们这里找几个例子感受感受。以Java里最常用的类ThreadPoolExecutor为例。先看如下代码：\n\n```\npublic class TestObjWait {\n\n    public static void main(String[] args)throws Exception {\n        ArrayBlockingQueue<Runnable> queue = new ArrayBlockingQueue<Runnable>(1000);\n        ThreadPoolExecutor poolExecutor = new ThreadPoolExecutor(5,5,1000, TimeUnit.SECONDS,queue);\n\n        Future<String> future = poolExecutor.submit(new Callable<String>() {\n            @Override\n            public String call() throws Exception {\n                TimeUnit.SECONDS.sleep(5);\n                return \"hello\";\n            }\n        });\n        String result = future.get();\n        System.out.println(result);\n    }\n}\n```\n\n 代码中我们向线程池中扔了一个任务，然后调用Future的get方法，同步阻塞等待线程池的执行结果。\n这里就要问了：**get方法是如何组塞住当前线程？线程池执行完任务后又是如何唤醒线程的呢？**\n\n咱们跟着源码一步步分析，先看线程池的submit方法的实现：\n\n![image](java-lock4/img1.png)\n\n在submit方法里，线程池将我们提交的基于Callable实现的任务，封装为基于RunnableFuture实现的任务，然后将任务提交到线程池执行，并向当前线程返回RunnableFutrue。\n\n进入newTaskFor方法，就一句话：\n\n```\nreturn new FutureTask<T>(callable);\n```\n\n所以，咱们主线程调用future的get方法就是FutureTask的get方法，线程池执行的任务对象也是FutureTask的实例。\n\n接下来看看FutureTask的get方法的实现：\n\n![image](java-lock4/img2.png)\n\n比较简单，就是判断下当前任务是否执行完毕，如果执行完毕直接返回任务结果，否则进入awaitDone方法阻塞等待。\n\n![image](java-lock4/img3.png)\n\nawaitDone方法里，首先会用到上节讲到的cas操作，将线程封装为WaitNode，保存下来，以供后续唤醒线程时用。再就是调用了LockSupport的park/parkNanos组塞住当前线程。\n \n上边已经说完了阻塞等待任务结果的逻辑，接下来再看看线程池执行完任务，唤醒等待线程的逻辑实现。\n\n前边说了，咱们提交的基于Callable实现的任务，已经被封装为FutureTask任务提交给了线程池执行，任务的执行就是FutureTask的run方法执行。如下是FutureTask的run方法：\n\n![image](java-lock4/img4.png)\n\nc.call()就是执行我们提交的任务，任务执行完后调用了set方法，进入set方法发现set方法调用了finishCompletion方法，想必唤醒线程的工作就在这里边了，看看代码实现吧：\n\n![image](java-lock4/img5.png)\n\n没错就在这里边，先是通过cas操作将所有等待的线程拿出来，然后便使用LockSupport的unpark唤醒每个线程。\n \n在使用线程池的过程中，不知道你有没有这么一个疑问：线程池里没有任务时，线程池里的线程在干嘛呢？\n\n看过我的这篇文章《线程池的工作原理与源码解读》的读者一定知道，线程会调用队列的take方法阻塞等待新任务。那队列的take方法是不是也跟Future的get方法实现一样呢？咱们来看看源码实现。\n\n以ArrayBlockingQueue为例，take方法实现如下：\n\n![image](java-lock6/img6.png)\n\n与想象的有点出入，他是使用了Lock的Condition的await方法实现线程阻塞。但当我们继续追下去进入await方法，发现还是使用了LockSupport：\n\n![image](java-lock4/img7.png)\n\n限于篇幅，jdk里的更多应用就不再追下去了。\n \n### 四、LockSupport的实现\n学习要知其然，还要知其所以然。接下来不妨看看LockSupport的实现。\n\n进入LockSupport的park方法，可以发现它是调用了Unsafe的park方法，这是一个本地native方法，只能通过openjdk的源码看看其本地实现了：\n\n![image](java-lock4/img8.png)\n\n它调用了线程的Parker类型对象的park方法，如下是Parker类的定义：\n\n![image](java-lock4/img9.png)\n\n类中定义了一个int类型的_counter变量，咱们上文中讲灵活性的那一节说：可以先执行unpark后执行park，就是通过这个变量实现。看下park方法的实现代码(由于方法比较长就不整体截图了)：\n\n![image](java-lock4/img10.png)\n\npark方法会调用Atomic::xchg方法，这个方法会原子性的将_counter赋值为0，并返回赋值前的值。如果调用park方法前，_counter大于0，则说明之前调用过unpark方法，所以park方法直接返回。\n接着往下看：\n\n![image](java-lock4/img11.png)\n\n实际上Parker类用Posix的mutex，condition来实现的阻塞唤醒。如果对mutex和condition不熟，可以简单理解为mutex就是Java里的synchronized，condition就是Object里的wait/notify操作。\n\npark方法里调用pthread_mutex_trylock方法，就相当于Java线程进入Java的同步代码块，然后再次判断_counter是否大于零，如果大于零则将_counter设置为零。最后调用pthread_mutex_unlock解锁，相当于Java执行完退出同步代码块。如果_counter不大于零，则继续往下执行pthread_cond_wait方法，实现当前线程的阻塞。\n \n最后再看看unpark方法的实现吧，这块就简单多了，直接上代码：\n\n![image](java-lock4/img12.png)\n\n图中的1和4就相当于Java的进入synchronized和退出synchronized的加锁解锁操作，代码2将_counter设置为1，同时判断先前_counter的值是否小于1，即这段代码：if(s<1)。如果不小于1，则就不会有线程被park，所以方法直接执行完毕，否则就会执行代码3，来唤醒被阻塞的线程。\n \n通过阅读LockSupport的本地实现，我们不难发现这么个问题：多次调用unpark方法和调用一次unpark方法效果一样，因为都是直接将_counter赋值为1，而不是加1。简单说就是：线程A连续调用两次LockSupport.unpark(B)方法唤醒线程B，然后线程B调用两次LockSupport.park()方法， 线程B依旧会被阻塞。因为两次unpark调用效果跟一次调用一样，只能让线程B的第一次调用park方法不被阻塞，第二次调用依旧会阻塞。\n \n到这里,自己实现一把“锁”用到的技术点都已经介绍完了，甚至本节还介绍了锁的具体实现，相信即使没有最后一篇介绍怎么实现“锁”，大家也能动手写个锁了。","slug":"java-lock4","published":1,"updated":"2018-01-20T08:44:25.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcn41j9d0006cfs6ty880dk5","content":"<p>本篇是《自己动手写把”锁”》系列技术铺垫的最后一个知识点。本篇主要讲解LockSupport工具类，它用来实现线程的挂起和唤醒。</p>\n<p>LockSupport是Java6引入的一个工具类，它简单灵活，应用广泛。<br><a id=\"more\"></a> </p>\n<h3 id=\"一、简单\"><a href=\"#一、简单\" class=\"headerlink\" title=\"一、简单\"></a>一、简单</h3><p>俗话说，没有比较就没有伤害。这里咱们还是通过对比来介绍LockSupport的简单。<br>在没有LockSupport之前，线程的挂起和唤醒咱们都是通过Object的wait和notify/notifyAll方法实现。<br>写一段例子代码，线程A执行一段业务逻辑后调用wait阻塞住自己。主线程调用notify方法唤醒线程A，线程A然后打印自己执行的结果。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TestObjWait &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args)throws Exception &#123;</span><br><span class=\"line\">        final Object obj = new Object();</span><br><span class=\"line\">        Thread A = new Thread(new Runnable() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void run() &#123;</span><br><span class=\"line\">                int sum = 0;</span><br><span class=\"line\">                for(int i=0;i&lt;10;i++)&#123;</span><br><span class=\"line\">                    sum+=i;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                try &#123;</span><br><span class=\"line\">                    obj.wait();</span><br><span class=\"line\">                &#125;catch (Exception e)&#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                System.out.println(sum);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        A.start();</span><br><span class=\"line\">        //睡眠一秒钟，保证线程A已经计算完成，阻塞在wait方法</span><br><span class=\"line\">        Thread.sleep(1000);</span><br><span class=\"line\">        obj.notify();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行这段代码，不难发现这个错误：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Exception in thread &quot;main&quot; java.lang.IllegalMonitorStateException</span><br><span class=\"line\">    at java.lang.Object.notify(Native Method)</span><br></pre></td></tr></table></figure>\n<p>原因很简单，wait和notify/notifyAll方法只能在同步代码块里用(这个有的面试官也会考察)。所以将代码修改为如下就可正常运行了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TestObjWait &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args)throws Exception &#123;</span><br><span class=\"line\">        final Object obj = new Object();</span><br><span class=\"line\">        Thread A = new Thread(new Runnable() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void run() &#123;</span><br><span class=\"line\">                int sum = 0;</span><br><span class=\"line\">                for(int i=0;i&lt;10;i++)&#123;</span><br><span class=\"line\">                    sum+=i;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                try &#123;</span><br><span class=\"line\">                    synchronized (obj)&#123;</span><br><span class=\"line\">                        obj.wait();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;catch (Exception e)&#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                System.out.println(sum);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        A.start();</span><br><span class=\"line\">        //睡眠一秒钟，保证线程A已经计算完成，阻塞在wait方法</span><br><span class=\"line\">        Thread.sleep(1000);</span><br><span class=\"line\">        synchronized (obj)&#123;</span><br><span class=\"line\">            obj.notify();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>那如果咱们换成LockSupport呢？简单得很，看代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TestObjWait &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args)throws Exception &#123;</span><br><span class=\"line\">        Thread A = new Thread(new Runnable() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void run() &#123;</span><br><span class=\"line\">                int sum = 0;</span><br><span class=\"line\">                for(int i=0;i&lt;10;i++)&#123;</span><br><span class=\"line\">                    sum+=i;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                LockSupport.park();</span><br><span class=\"line\">                System.out.println(sum);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        A.start();</span><br><span class=\"line\">        //睡眠一秒钟，保证线程A已经计算完成，阻塞在wait方法</span><br><span class=\"line\">        Thread.sleep(1000);</span><br><span class=\"line\">        LockSupport.unpark(A);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>直接调用就可以了，没有说非得在同步代码块里才能用。简单吧。</p>\n<h3 id=\"二、灵活\"><a href=\"#二、灵活\" class=\"headerlink\" title=\"二、灵活\"></a>二、灵活</h3><p>如果只是LockSupport在使用起来比Object的wait/notify简单，那还真没必要专门讲解下LockSupport。最主要的是灵活性。<br>上边的例子代码中，主线程调用了Thread.sleep(1000)方法来等待线程A计算完成进入wait状态。如果去掉Thread.sleep()调用，代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TestObjWait &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args)throws Exception &#123;</span><br><span class=\"line\">        final Object obj = new Object();</span><br><span class=\"line\">        Thread A = new Thread(new Runnable() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void run() &#123;</span><br><span class=\"line\">                int sum = 0;</span><br><span class=\"line\">                for(int i=0;i&lt;10;i++)&#123;</span><br><span class=\"line\">                    sum+=i;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                try &#123;</span><br><span class=\"line\">                    synchronized (obj)&#123;</span><br><span class=\"line\">                        obj.wait();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;catch (Exception e)&#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                System.out.println(sum);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        A.start();</span><br><span class=\"line\">        //睡眠一秒钟，保证线程A已经计算完成，阻塞在wait方法</span><br><span class=\"line\">        //Thread.sleep(1000);</span><br><span class=\"line\">        synchronized (obj)&#123;</span><br><span class=\"line\">            obj.notify();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>多运行几次上边的代码，有的时候能够正常打印结果并退出程序，但有的时候线程无法打印结果阻塞住了。原因就在于：主线程调用完notify后，线程A才进入wait方法，导致线程A一直阻塞住。由于线程A不是后台线程，所以整个程序无法退出。</p>\n<p>那如果换做LockSupport呢？LockSupport就支持主线程先调用unpark后，线程A再调用park而不被阻塞吗？是的，没错。代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TestObjWait &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args)throws Exception &#123;</span><br><span class=\"line\">        final Object obj = new Object();</span><br><span class=\"line\">        Thread A = new Thread(new Runnable() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void run() &#123;</span><br><span class=\"line\">                int sum = 0;</span><br><span class=\"line\">                for(int i=0;i&lt;10;i++)&#123;</span><br><span class=\"line\">                    sum+=i;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                LockSupport.park();</span><br><span class=\"line\">                System.out.println(sum);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        A.start();</span><br><span class=\"line\">        //睡眠一秒钟，保证线程A已经计算完成，阻塞在wait方法</span><br><span class=\"line\">        //Thread.sleep(1000);</span><br><span class=\"line\">        LockSupport.unpark(A);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>不管你执行多少次，这段代码都能正常打印结果并退出。这就是LockSupport最大的灵活所在。</p>\n<p><strong>总结一下，LockSupport比Object的wait/notify有两大优势</strong>：</p>\n<ul>\n<li>LockSupport不需要在同步代码块里 。所以线程间也不需要维护一个共享的同步对象，实现了线程间的解耦。</li>\n<li>unpark函数可以先于park调用，所以不需要担心线程间的执行的先后顺序。</li>\n</ul>\n<h3 id=\"三、应用广泛\"><a href=\"#三、应用广泛\" class=\"headerlink\" title=\"三、应用广泛\"></a>三、应用广泛</h3><p>LockSupport在Java的工具类用应用很广泛，咱们这里找几个例子感受感受。以Java里最常用的类ThreadPoolExecutor为例。先看如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TestObjWait &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args)throws Exception &#123;</span><br><span class=\"line\">        ArrayBlockingQueue&lt;Runnable&gt; queue = new ArrayBlockingQueue&lt;Runnable&gt;(1000);</span><br><span class=\"line\">        ThreadPoolExecutor poolExecutor = new ThreadPoolExecutor(5,5,1000, TimeUnit.SECONDS,queue);</span><br><span class=\"line\"></span><br><span class=\"line\">        Future&lt;String&gt; future = poolExecutor.submit(new Callable&lt;String&gt;() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public String call() throws Exception &#123;</span><br><span class=\"line\">                TimeUnit.SECONDS.sleep(5);</span><br><span class=\"line\">                return &quot;hello&quot;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        String result = future.get();</span><br><span class=\"line\">        System.out.println(result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> 代码中我们向线程池中扔了一个任务，然后调用Future的get方法，同步阻塞等待线程池的执行结果。<br>这里就要问了：<strong>get方法是如何组塞住当前线程？线程池执行完任务后又是如何唤醒线程的呢？</strong></p>\n<p>咱们跟着源码一步步分析，先看线程池的submit方法的实现：</p>\n<p><img src=\"/2018/01/07/java-lock4/img1.png\" alt=\"image\"></p>\n<p>在submit方法里，线程池将我们提交的基于Callable实现的任务，封装为基于RunnableFuture实现的任务，然后将任务提交到线程池执行，并向当前线程返回RunnableFutrue。</p>\n<p>进入newTaskFor方法，就一句话：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">return new FutureTask&lt;T&gt;(callable);</span><br></pre></td></tr></table></figure>\n<p>所以，咱们主线程调用future的get方法就是FutureTask的get方法，线程池执行的任务对象也是FutureTask的实例。</p>\n<p>接下来看看FutureTask的get方法的实现：</p>\n<p><img src=\"/2018/01/07/java-lock4/img2.png\" alt=\"image\"></p>\n<p>比较简单，就是判断下当前任务是否执行完毕，如果执行完毕直接返回任务结果，否则进入awaitDone方法阻塞等待。</p>\n<p><img src=\"/2018/01/07/java-lock4/img3.png\" alt=\"image\"></p>\n<p>awaitDone方法里，首先会用到上节讲到的cas操作，将线程封装为WaitNode，保存下来，以供后续唤醒线程时用。再就是调用了LockSupport的park/parkNanos组塞住当前线程。</p>\n<p>上边已经说完了阻塞等待任务结果的逻辑，接下来再看看线程池执行完任务，唤醒等待线程的逻辑实现。</p>\n<p>前边说了，咱们提交的基于Callable实现的任务，已经被封装为FutureTask任务提交给了线程池执行，任务的执行就是FutureTask的run方法执行。如下是FutureTask的run方法：</p>\n<p><img src=\"/2018/01/07/java-lock4/img4.png\" alt=\"image\"></p>\n<p>c.call()就是执行我们提交的任务，任务执行完后调用了set方法，进入set方法发现set方法调用了finishCompletion方法，想必唤醒线程的工作就在这里边了，看看代码实现吧：</p>\n<p><img src=\"/2018/01/07/java-lock4/img5.png\" alt=\"image\"></p>\n<p>没错就在这里边，先是通过cas操作将所有等待的线程拿出来，然后便使用LockSupport的unpark唤醒每个线程。</p>\n<p>在使用线程池的过程中，不知道你有没有这么一个疑问：线程池里没有任务时，线程池里的线程在干嘛呢？</p>\n<p>看过我的这篇文章《线程池的工作原理与源码解读》的读者一定知道，线程会调用队列的take方法阻塞等待新任务。那队列的take方法是不是也跟Future的get方法实现一样呢？咱们来看看源码实现。</p>\n<p>以ArrayBlockingQueue为例，take方法实现如下：</p>\n<p><img src=\"/2018/01/07/java-lock4/img6.png\" alt=\"image\"></p>\n<p>与想象的有点出入，他是使用了Lock的Condition的await方法实现线程阻塞。但当我们继续追下去进入await方法，发现还是使用了LockSupport：</p>\n<p><img src=\"/2018/01/07/java-lock4/img7.png\" alt=\"image\"></p>\n<p>限于篇幅，jdk里的更多应用就不再追下去了。</p>\n<h3 id=\"四、LockSupport的实现\"><a href=\"#四、LockSupport的实现\" class=\"headerlink\" title=\"四、LockSupport的实现\"></a>四、LockSupport的实现</h3><p>学习要知其然，还要知其所以然。接下来不妨看看LockSupport的实现。</p>\n<p>进入LockSupport的park方法，可以发现它是调用了Unsafe的park方法，这是一个本地native方法，只能通过openjdk的源码看看其本地实现了：</p>\n<p><img src=\"/2018/01/07/java-lock4/img8.png\" alt=\"image\"></p>\n<p>它调用了线程的Parker类型对象的park方法，如下是Parker类的定义：</p>\n<p><img src=\"/2018/01/07/java-lock4/img9.png\" alt=\"image\"></p>\n<p>类中定义了一个int类型的_counter变量，咱们上文中讲灵活性的那一节说：可以先执行unpark后执行park，就是通过这个变量实现。看下park方法的实现代码(由于方法比较长就不整体截图了)：</p>\n<p><img src=\"/2018/01/07/java-lock4/img10.png\" alt=\"image\"></p>\n<p>park方法会调用Atomic::xchg方法，这个方法会原子性的将_counter赋值为0，并返回赋值前的值。如果调用park方法前，_counter大于0，则说明之前调用过unpark方法，所以park方法直接返回。<br>接着往下看：</p>\n<p><img src=\"/2018/01/07/java-lock4/img11.png\" alt=\"image\"></p>\n<p>实际上Parker类用Posix的mutex，condition来实现的阻塞唤醒。如果对mutex和condition不熟，可以简单理解为mutex就是Java里的synchronized，condition就是Object里的wait/notify操作。</p>\n<p>park方法里调用pthread_mutex_trylock方法，就相当于Java线程进入Java的同步代码块，然后再次判断_counter是否大于零，如果大于零则将_counter设置为零。最后调用pthread_mutex_unlock解锁，相当于Java执行完退出同步代码块。如果_counter不大于零，则继续往下执行pthread_cond_wait方法，实现当前线程的阻塞。</p>\n<p>最后再看看unpark方法的实现吧，这块就简单多了，直接上代码：</p>\n<p><img src=\"/2018/01/07/java-lock4/img12.png\" alt=\"image\"></p>\n<p>图中的1和4就相当于Java的进入synchronized和退出synchronized的加锁解锁操作，代码2将_counter设置为1，同时判断先前_counter的值是否小于1，即这段代码：if(s&lt;1)。如果不小于1，则就不会有线程被park，所以方法直接执行完毕，否则就会执行代码3，来唤醒被阻塞的线程。</p>\n<p>通过阅读LockSupport的本地实现，我们不难发现这么个问题：多次调用unpark方法和调用一次unpark方法效果一样，因为都是直接将_counter赋值为1，而不是加1。简单说就是：线程A连续调用两次LockSupport.unpark(B)方法唤醒线程B，然后线程B调用两次LockSupport.park()方法， 线程B依旧会被阻塞。因为两次unpark调用效果跟一次调用一样，只能让线程B的第一次调用park方法不被阻塞，第二次调用依旧会阻塞。</p>\n<p>到这里,自己实现一把“锁”用到的技术点都已经介绍完了，甚至本节还介绍了锁的具体实现，相信即使没有最后一篇介绍怎么实现“锁”，大家也能动手写个锁了。</p>\n","site":{"data":{"hint":{"new":{"selector":[".menu-reading",".menu-about"]}},"about":{"avatar":"/images/head2.jpg","name":"清泉","tag":"互联网/Java/区块链/金融","desc":"不甘心只懂技术的技术男","skills":{"Java/JVM":9,"Javascript":7,"Go":6,"invisible-split-line-1":-1,"区块链":8,"金融理财":7},"reward":["/images/weixin2.png","/images/zhifubao2.png"]},"link":{"social":{"weibo":"https://weibo.com/u/6182358871?is_all=1","github":"https://github.com/yongzhidai","rss":"/atom.xml"},"extern":{"博客园博客":"http://www.cnblogs.com/metoy/","博客园博客(备)":"http://www.cnblogs.com/qingquanzi/","知乎":"https://www.zhihu.com/people/yongzhi.dyz"}},"reading":{"define":{"readed":"技术类","reading":"金融类","wanted":"其它"},"contents":{"readed":[{"title":"深入理解Java虚拟机（第2版）","cover":"/images/bookImg/java_jvm.jpg","review":"JVM入门必读","score":"8.9","doubanLink":"https://book.douban.com/subject/24722612/"},{"title":"深入浅出MySQL","cover":"/images/bookImg/mysql.jpg","review":"内容通俗易懂，比较不错。","score":"7.7","doubanLink":"https://book.douban.com/subject/25817684/"},{"title":"区块链技术指南","cover":"/images/bookImg/block_chain.jpg","review":"区块链学习指南！","score":"6.3","doubanLink":"https://book.douban.com/subject/26959322/"}],"reading":[{"title":"彼得·林奇的成功投资","cover":"/images/bookImg/bdlq.jpg","review":"","score":"8.7","doubanLink":"https://book.douban.com/subject/1958714/"}],"wanted":[{"title":"人类简史","cover":"/images/bookImg/rljs.jpg","review":"","score":"9.1","doubanLink":"https://book.douban.com/subject/25985021/"},{"title":"三体","cover":"/images/bookImg/santi.jpg","review":"","score":"8.8","doubanLink":"https://book.douban.com/subject/2567698/"}]}},"slider":[{"image":"/images/bg1.jpg","align":"center","title":"欢迎你，朋友！","subtitle":"","link":"/"},{"image":"/images/bg2.jpg","align":"left","title":"我的知识星球圈子","subtitle":"点击微信扫码加入","link":"https://t.zsxq.com/EUn6IIE"},{"image":"/images/bg3.jpg","align":"right","title":"我的微信公众号","subtitle":"","link":null}]}},"excerpt":"<p>本篇是《自己动手写把”锁”》系列技术铺垫的最后一个知识点。本篇主要讲解LockSupport工具类，它用来实现线程的挂起和唤醒。</p>\n<p>LockSupport是Java6引入的一个工具类，它简单灵活，应用广泛。<br></p>","more":"<p></p>\n<h3 id=\"一、简单\"><a href=\"#一、简单\" class=\"headerlink\" title=\"一、简单\"></a>一、简单</h3><p>俗话说，没有比较就没有伤害。这里咱们还是通过对比来介绍LockSupport的简单。<br>在没有LockSupport之前，线程的挂起和唤醒咱们都是通过Object的wait和notify/notifyAll方法实现。<br>写一段例子代码，线程A执行一段业务逻辑后调用wait阻塞住自己。主线程调用notify方法唤醒线程A，线程A然后打印自己执行的结果。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TestObjWait &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args)throws Exception &#123;</span><br><span class=\"line\">        final Object obj = new Object();</span><br><span class=\"line\">        Thread A = new Thread(new Runnable() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void run() &#123;</span><br><span class=\"line\">                int sum = 0;</span><br><span class=\"line\">                for(int i=0;i&lt;10;i++)&#123;</span><br><span class=\"line\">                    sum+=i;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                try &#123;</span><br><span class=\"line\">                    obj.wait();</span><br><span class=\"line\">                &#125;catch (Exception e)&#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                System.out.println(sum);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        A.start();</span><br><span class=\"line\">        //睡眠一秒钟，保证线程A已经计算完成，阻塞在wait方法</span><br><span class=\"line\">        Thread.sleep(1000);</span><br><span class=\"line\">        obj.notify();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行这段代码，不难发现这个错误：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Exception in thread &quot;main&quot; java.lang.IllegalMonitorStateException</span><br><span class=\"line\">    at java.lang.Object.notify(Native Method)</span><br></pre></td></tr></table></figure>\n<p>原因很简单，wait和notify/notifyAll方法只能在同步代码块里用(这个有的面试官也会考察)。所以将代码修改为如下就可正常运行了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TestObjWait &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args)throws Exception &#123;</span><br><span class=\"line\">        final Object obj = new Object();</span><br><span class=\"line\">        Thread A = new Thread(new Runnable() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void run() &#123;</span><br><span class=\"line\">                int sum = 0;</span><br><span class=\"line\">                for(int i=0;i&lt;10;i++)&#123;</span><br><span class=\"line\">                    sum+=i;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                try &#123;</span><br><span class=\"line\">                    synchronized (obj)&#123;</span><br><span class=\"line\">                        obj.wait();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;catch (Exception e)&#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                System.out.println(sum);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        A.start();</span><br><span class=\"line\">        //睡眠一秒钟，保证线程A已经计算完成，阻塞在wait方法</span><br><span class=\"line\">        Thread.sleep(1000);</span><br><span class=\"line\">        synchronized (obj)&#123;</span><br><span class=\"line\">            obj.notify();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>那如果咱们换成LockSupport呢？简单得很，看代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TestObjWait &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args)throws Exception &#123;</span><br><span class=\"line\">        Thread A = new Thread(new Runnable() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void run() &#123;</span><br><span class=\"line\">                int sum = 0;</span><br><span class=\"line\">                for(int i=0;i&lt;10;i++)&#123;</span><br><span class=\"line\">                    sum+=i;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                LockSupport.park();</span><br><span class=\"line\">                System.out.println(sum);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        A.start();</span><br><span class=\"line\">        //睡眠一秒钟，保证线程A已经计算完成，阻塞在wait方法</span><br><span class=\"line\">        Thread.sleep(1000);</span><br><span class=\"line\">        LockSupport.unpark(A);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>直接调用就可以了，没有说非得在同步代码块里才能用。简单吧。</p>\n<h3 id=\"二、灵活\"><a href=\"#二、灵活\" class=\"headerlink\" title=\"二、灵活\"></a>二、灵活</h3><p>如果只是LockSupport在使用起来比Object的wait/notify简单，那还真没必要专门讲解下LockSupport。最主要的是灵活性。<br>上边的例子代码中，主线程调用了Thread.sleep(1000)方法来等待线程A计算完成进入wait状态。如果去掉Thread.sleep()调用，代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TestObjWait &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args)throws Exception &#123;</span><br><span class=\"line\">        final Object obj = new Object();</span><br><span class=\"line\">        Thread A = new Thread(new Runnable() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void run() &#123;</span><br><span class=\"line\">                int sum = 0;</span><br><span class=\"line\">                for(int i=0;i&lt;10;i++)&#123;</span><br><span class=\"line\">                    sum+=i;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                try &#123;</span><br><span class=\"line\">                    synchronized (obj)&#123;</span><br><span class=\"line\">                        obj.wait();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;catch (Exception e)&#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                System.out.println(sum);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        A.start();</span><br><span class=\"line\">        //睡眠一秒钟，保证线程A已经计算完成，阻塞在wait方法</span><br><span class=\"line\">        //Thread.sleep(1000);</span><br><span class=\"line\">        synchronized (obj)&#123;</span><br><span class=\"line\">            obj.notify();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>多运行几次上边的代码，有的时候能够正常打印结果并退出程序，但有的时候线程无法打印结果阻塞住了。原因就在于：主线程调用完notify后，线程A才进入wait方法，导致线程A一直阻塞住。由于线程A不是后台线程，所以整个程序无法退出。</p>\n<p>那如果换做LockSupport呢？LockSupport就支持主线程先调用unpark后，线程A再调用park而不被阻塞吗？是的，没错。代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TestObjWait &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args)throws Exception &#123;</span><br><span class=\"line\">        final Object obj = new Object();</span><br><span class=\"line\">        Thread A = new Thread(new Runnable() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void run() &#123;</span><br><span class=\"line\">                int sum = 0;</span><br><span class=\"line\">                for(int i=0;i&lt;10;i++)&#123;</span><br><span class=\"line\">                    sum+=i;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                LockSupport.park();</span><br><span class=\"line\">                System.out.println(sum);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        A.start();</span><br><span class=\"line\">        //睡眠一秒钟，保证线程A已经计算完成，阻塞在wait方法</span><br><span class=\"line\">        //Thread.sleep(1000);</span><br><span class=\"line\">        LockSupport.unpark(A);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>不管你执行多少次，这段代码都能正常打印结果并退出。这就是LockSupport最大的灵活所在。</p>\n<p><strong>总结一下，LockSupport比Object的wait/notify有两大优势</strong>：</p>\n<ul>\n<li>LockSupport不需要在同步代码块里 。所以线程间也不需要维护一个共享的同步对象，实现了线程间的解耦。</li>\n<li>unpark函数可以先于park调用，所以不需要担心线程间的执行的先后顺序。</li>\n</ul>\n<h3 id=\"三、应用广泛\"><a href=\"#三、应用广泛\" class=\"headerlink\" title=\"三、应用广泛\"></a>三、应用广泛</h3><p>LockSupport在Java的工具类用应用很广泛，咱们这里找几个例子感受感受。以Java里最常用的类ThreadPoolExecutor为例。先看如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TestObjWait &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args)throws Exception &#123;</span><br><span class=\"line\">        ArrayBlockingQueue&lt;Runnable&gt; queue = new ArrayBlockingQueue&lt;Runnable&gt;(1000);</span><br><span class=\"line\">        ThreadPoolExecutor poolExecutor = new ThreadPoolExecutor(5,5,1000, TimeUnit.SECONDS,queue);</span><br><span class=\"line\"></span><br><span class=\"line\">        Future&lt;String&gt; future = poolExecutor.submit(new Callable&lt;String&gt;() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public String call() throws Exception &#123;</span><br><span class=\"line\">                TimeUnit.SECONDS.sleep(5);</span><br><span class=\"line\">                return &quot;hello&quot;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        String result = future.get();</span><br><span class=\"line\">        System.out.println(result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> 代码中我们向线程池中扔了一个任务，然后调用Future的get方法，同步阻塞等待线程池的执行结果。<br>这里就要问了：<strong>get方法是如何组塞住当前线程？线程池执行完任务后又是如何唤醒线程的呢？</strong></p>\n<p>咱们跟着源码一步步分析，先看线程池的submit方法的实现：</p>\n<p><img src=\"/2018/01/07/java-lock4/img1.png\" alt=\"image\"></p>\n<p>在submit方法里，线程池将我们提交的基于Callable实现的任务，封装为基于RunnableFuture实现的任务，然后将任务提交到线程池执行，并向当前线程返回RunnableFutrue。</p>\n<p>进入newTaskFor方法，就一句话：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">return new FutureTask&lt;T&gt;(callable);</span><br></pre></td></tr></table></figure>\n<p>所以，咱们主线程调用future的get方法就是FutureTask的get方法，线程池执行的任务对象也是FutureTask的实例。</p>\n<p>接下来看看FutureTask的get方法的实现：</p>\n<p><img src=\"/2018/01/07/java-lock4/img2.png\" alt=\"image\"></p>\n<p>比较简单，就是判断下当前任务是否执行完毕，如果执行完毕直接返回任务结果，否则进入awaitDone方法阻塞等待。</p>\n<p><img src=\"/2018/01/07/java-lock4/img3.png\" alt=\"image\"></p>\n<p>awaitDone方法里，首先会用到上节讲到的cas操作，将线程封装为WaitNode，保存下来，以供后续唤醒线程时用。再就是调用了LockSupport的park/parkNanos组塞住当前线程。</p>\n<p>上边已经说完了阻塞等待任务结果的逻辑，接下来再看看线程池执行完任务，唤醒等待线程的逻辑实现。</p>\n<p>前边说了，咱们提交的基于Callable实现的任务，已经被封装为FutureTask任务提交给了线程池执行，任务的执行就是FutureTask的run方法执行。如下是FutureTask的run方法：</p>\n<p><img src=\"/2018/01/07/java-lock4/img4.png\" alt=\"image\"></p>\n<p>c.call()就是执行我们提交的任务，任务执行完后调用了set方法，进入set方法发现set方法调用了finishCompletion方法，想必唤醒线程的工作就在这里边了，看看代码实现吧：</p>\n<p><img src=\"/2018/01/07/java-lock4/img5.png\" alt=\"image\"></p>\n<p>没错就在这里边，先是通过cas操作将所有等待的线程拿出来，然后便使用LockSupport的unpark唤醒每个线程。</p>\n<p>在使用线程池的过程中，不知道你有没有这么一个疑问：线程池里没有任务时，线程池里的线程在干嘛呢？</p>\n<p>看过我的这篇文章《线程池的工作原理与源码解读》的读者一定知道，线程会调用队列的take方法阻塞等待新任务。那队列的take方法是不是也跟Future的get方法实现一样呢？咱们来看看源码实现。</p>\n<p>以ArrayBlockingQueue为例，take方法实现如下：</p>\n<p><img src=\"/2018/01/07/java-lock4/img6.png\" alt=\"image\"></p>\n<p>与想象的有点出入，他是使用了Lock的Condition的await方法实现线程阻塞。但当我们继续追下去进入await方法，发现还是使用了LockSupport：</p>\n<p><img src=\"/2018/01/07/java-lock4/img7.png\" alt=\"image\"></p>\n<p>限于篇幅，jdk里的更多应用就不再追下去了。</p>\n<h3 id=\"四、LockSupport的实现\"><a href=\"#四、LockSupport的实现\" class=\"headerlink\" title=\"四、LockSupport的实现\"></a>四、LockSupport的实现</h3><p>学习要知其然，还要知其所以然。接下来不妨看看LockSupport的实现。</p>\n<p>进入LockSupport的park方法，可以发现它是调用了Unsafe的park方法，这是一个本地native方法，只能通过openjdk的源码看看其本地实现了：</p>\n<p><img src=\"/2018/01/07/java-lock4/img8.png\" alt=\"image\"></p>\n<p>它调用了线程的Parker类型对象的park方法，如下是Parker类的定义：</p>\n<p><img src=\"/2018/01/07/java-lock4/img9.png\" alt=\"image\"></p>\n<p>类中定义了一个int类型的_counter变量，咱们上文中讲灵活性的那一节说：可以先执行unpark后执行park，就是通过这个变量实现。看下park方法的实现代码(由于方法比较长就不整体截图了)：</p>\n<p><img src=\"/2018/01/07/java-lock4/img10.png\" alt=\"image\"></p>\n<p>park方法会调用Atomic::xchg方法，这个方法会原子性的将_counter赋值为0，并返回赋值前的值。如果调用park方法前，_counter大于0，则说明之前调用过unpark方法，所以park方法直接返回。<br>接着往下看：</p>\n<p><img src=\"/2018/01/07/java-lock4/img11.png\" alt=\"image\"></p>\n<p>实际上Parker类用Posix的mutex，condition来实现的阻塞唤醒。如果对mutex和condition不熟，可以简单理解为mutex就是Java里的synchronized，condition就是Object里的wait/notify操作。</p>\n<p>park方法里调用pthread_mutex_trylock方法，就相当于Java线程进入Java的同步代码块，然后再次判断_counter是否大于零，如果大于零则将_counter设置为零。最后调用pthread_mutex_unlock解锁，相当于Java执行完退出同步代码块。如果_counter不大于零，则继续往下执行pthread_cond_wait方法，实现当前线程的阻塞。</p>\n<p>最后再看看unpark方法的实现吧，这块就简单多了，直接上代码：</p>\n<p><img src=\"/2018/01/07/java-lock4/img12.png\" alt=\"image\"></p>\n<p>图中的1和4就相当于Java的进入synchronized和退出synchronized的加锁解锁操作，代码2将_counter设置为1，同时判断先前_counter的值是否小于1，即这段代码：if(s&lt;1)。如果不小于1，则就不会有线程被park，所以方法直接执行完毕，否则就会执行代码3，来唤醒被阻塞的线程。</p>\n<p>通过阅读LockSupport的本地实现，我们不难发现这么个问题：多次调用unpark方法和调用一次unpark方法效果一样，因为都是直接将_counter赋值为1，而不是加1。简单说就是：线程A连续调用两次LockSupport.unpark(B)方法唤醒线程B，然后线程B调用两次LockSupport.park()方法， 线程B依旧会被阻塞。因为两次unpark调用效果跟一次调用一样，只能让线程B的第一次调用park方法不被阻塞，第二次调用依旧会阻塞。</p>\n<p>到这里,自己实现一把“锁”用到的技术点都已经介绍完了，甚至本节还介绍了锁的具体实现，相信即使没有最后一篇介绍怎么实现“锁”，大家也能动手写个锁了。</p>"},{"title":"数字货币其实没那么牛逼","date":"2018-01-19T03:15:45.000Z","_content":"\n自己一直在北京，从事互联网技术相关的工作。最近，老家里的几个亲戚朋友，向我咨询：比特币是咋回事，什么是去中心化，为什么那么赚钱。\n\n人啊就是这样，看着别人赚钱，自己就跃跃欲试。\n<!--more-->\n![image](szhbmnmnb/img1.jpeg)\n\n以比特币为代表的数字货币，被贴上各种牛逼的标签。本人不才，只想简单地谈谈，在我看来，这些牛逼的标签是不是真的牛逼。\n\n在正式谈这些牛逼的标签之前，我先说一说：什么是财富？\n\n### 财富与货币的关系\n![image](szhbmnmnb/img2.jpeg)\n现实生活中，相当一部分人，把货币(钱)和财富等同为一个东东。但我这里可以向上帝保证：**货币（钱）不是财富**！\n\n货币只是用来度量财富和交易财富的工具，我们可以简单的把货币看作是，人类挑选出来的作为财富的代表。\n\n既然货币是财富的代表，那最好的状态就是一一对应，即一个单位的财富对应一个单位的货币。\n\n当然这只是理论上，现实中不可能达到一比一的比例的。一方面人类在不停地创造财富和消耗财富；另一方面人类也需要根据社会经济情况，适当调整货币和财富的比例。比如，经济不好的时候，人类会通过适当将增加货币的比例，来促进经济发展，也就是适当的通货膨胀。经济过热时，人类可以适当降低货币的比例，从而抑制经济过热而出现泡沫，也就是所谓的适当通货紧缩。\n\n财富和货币的关系，可以很形象的看作是：主人跟狗的关系。财富就是主人，货币就是狗。狗总是跟着主人走，时而走在主人前边，时而走在主人后边，但不能脱离太远。狗适当走在前边，就是适当通货膨胀，督促主人加快点步伐。如果狗走的前边太远，那就面临走丢的风险，对应成货币就是：货币要变的一文不值了。\n\n从社会中的财富总量来说，财富总是随着人类的辛勤努力，慢慢的在增加，很难突然瞬间财富爆膨。所以，能够被用来作为财富代表的物品中，需满足这么几个特点：\n1. 较为稀有，不能瞬间产生很多，也不能少的可怜\n2. 比较容易保存和交换\n\n这也就应了马克思说的：金银天然不是货币，但货币天然是金银。金银就是地球上的一种金属而已，并非生来就是货币。但由于它具有货币的这两个性质，而被人类规定为货币。\n\n为什么人类历史上没有使用石头做货币呢？当然是因为石头太多了嘛。石头想要多少，几乎瞬间就能找到多少。跟财富的量，完全不成比例。如果脑洞一下，古代朝廷强制用石头做货币，会怎么样呢？那肯定是，我拉好几车的石头，来跟你交换一粒大米。\n\n\n说清楚财富和货币的关系，接下来就可以说说，为众人所疯狂且津津乐道的，那几个数字货币的牛逼标签。\n\n\n### 去中心化\n![image](szhbmnmnb/img3.jpeg)\n数字货币，号称是一个去中心化的货币体系，没有中央银行，是安全和自由的保证。这是相较于现有的法定货币来说的一大特点。\n\n现有的法定货币体系，是基于信用的货币体系，由各国的中央银行来控制管理。在更朝换代或者经济出现大危机时，确实会让人的财富存在安全问题；以及央行的监管，也会让贪污或者洗钱行为，变得不自由。但对于最广大的人民群众和现在这样的和平年代，其实并没有因为中心化，而那么的没安全感和缺乏自由。因为，政府虽然会有时出现偏差，但总的来说它还是要为整个国家和人民负责的。而且政府可以适当控制法定货币的比例，以起到“劫富济贫”的效果，这点是去中心化没法做到的。\n\n在[《数字货币因何而值十万块》](/2018/01/15/szhbyhezsw/)中，我也说到了，数字货币跟黄金很像，这里不妨拿黄金来举例。\n\n在我国古代，使用金银作为货币的时期，其本身也是一种去中心化的。只要金银在手，即便是更朝换代，也是安全和自由的，与朝廷没任何关系。\n\n但财富总是遵循二八定律，总有一小部分人，持有大量的金银。在只接受金银进行纳税的朝廷，穷人只能卖掉粮食来纳税。所以当时也会有一帮掌握金银的财团，在秋收之际，囤积金银，哄抬金银价格，来掠取财富。朝廷也往往难以干预。\n\n所以我想说：对我们最为广大的人民群众来说，中心化，有一个负责任的政府监管，反而才是自由和安全的。去中心化，反而并没有想的那么美好。\n\n### 抗通胀\n![image](szhbmnmnb/img4.jpeg)\n数字货币说自己扛通胀，比如比特币，总共就只有2100万枚，听起来似乎比黄金还稀缺。而相较于法定货币，央行确实想印多少有多少。\n\n还是拿黄金类比。在布雷顿森林体系解体之后，黄金就永远的退出了人类货币的历史舞台，被窖藏在了底下金库。或许黄金现在还很值钱，但它不再是货币。\n\n在上文也说了，货币的量总是围绕着财富的量按照一定的比例上下波。黄金退出货币的历史舞台，或许有一定原因是交易不如纸币方便，但主要是，黄金无法跟进入现代化社会后财富的创造量相适应。\n\n以比特币为代表的数字货币也比较稀缺，所以我认为，它根本不可能成为货币。\n\n比特币是不是真的稀缺呢，只能是在比特币这条区块链上稀缺。但是人类可以开发无数个类似于比特币这样的区块链，风险可见一斑。\n\n数字货币主打的抗通胀，确实没问题。通胀确实可以洗劫人们积累的财富。但适当通胀，并没有那么可怕，有时经济的发展就需要一定的通胀来促进。\n\n以数字货币的稀缺性，反而更容易导致通缩。大家都觉着通胀可怕，其实通缩一定也不比通胀差。\n\n通缩，也就是货币升值，大家更容易囤积货币，抑制消费，反而更不利于经济发展。\n\n通缩其实也是一种掠夺财富的方式。通缩时，只要持有货币，就可坐等分享别人努力创造的财富。举个简单地例子，把北京的房子看作是货币，你只要持有北京的房子，每天喝喝茶听听戏，就能轻松身价成百上千万。哪些每天朝九晚九，辛勤为社会创造财富的人，其实在为你打工。\n\n再形象点说：假如你有一个苹果和一块钱，我也有一个苹果和一块钱，我可以用一块钱买你的苹果，同样你也可以买我的苹果。这里钱就是货币，苹果就是财富。假如你通过努力，自己又创造了俩苹果。这时你我总共有四个苹果和两块钱，于是通货紧缩，货币升值为，一块钱可以买俩苹果。\n\n在这个过程中，可以看得出来，我啥也没干，手里就由两个苹果(一个苹果+一块钱买到的一个苹果)变成了三个苹果(一个苹果+一块钱买到的两个苹果)。\n\n\n### 总结\n其实，去中心化，也并不是那么完美无缺，如果没有靠谱的监管，其实更容易沦落为富人洗劫穷人财富的工具。\n\n通胀确实可怕，它会稀释你积攒的财富；但是，通缩同样不可忽视，它会掠夺你正在努力创造的财富。","source":"_posts/szhbmnmnb.md","raw":"---\ntitle: 数字货币其实没那么牛逼\ncategories:\n  - 区块链\ntags:\n  - 数字货币\n  - 通货膨胀\n  - 通货紧缩\ndate: 2018-01-19 11:15:45\n---\n\n自己一直在北京，从事互联网技术相关的工作。最近，老家里的几个亲戚朋友，向我咨询：比特币是咋回事，什么是去中心化，为什么那么赚钱。\n\n人啊就是这样，看着别人赚钱，自己就跃跃欲试。\n<!--more-->\n![image](szhbmnmnb/img1.jpeg)\n\n以比特币为代表的数字货币，被贴上各种牛逼的标签。本人不才，只想简单地谈谈，在我看来，这些牛逼的标签是不是真的牛逼。\n\n在正式谈这些牛逼的标签之前，我先说一说：什么是财富？\n\n### 财富与货币的关系\n![image](szhbmnmnb/img2.jpeg)\n现实生活中，相当一部分人，把货币(钱)和财富等同为一个东东。但我这里可以向上帝保证：**货币（钱）不是财富**！\n\n货币只是用来度量财富和交易财富的工具，我们可以简单的把货币看作是，人类挑选出来的作为财富的代表。\n\n既然货币是财富的代表，那最好的状态就是一一对应，即一个单位的财富对应一个单位的货币。\n\n当然这只是理论上，现实中不可能达到一比一的比例的。一方面人类在不停地创造财富和消耗财富；另一方面人类也需要根据社会经济情况，适当调整货币和财富的比例。比如，经济不好的时候，人类会通过适当将增加货币的比例，来促进经济发展，也就是适当的通货膨胀。经济过热时，人类可以适当降低货币的比例，从而抑制经济过热而出现泡沫，也就是所谓的适当通货紧缩。\n\n财富和货币的关系，可以很形象的看作是：主人跟狗的关系。财富就是主人，货币就是狗。狗总是跟着主人走，时而走在主人前边，时而走在主人后边，但不能脱离太远。狗适当走在前边，就是适当通货膨胀，督促主人加快点步伐。如果狗走的前边太远，那就面临走丢的风险，对应成货币就是：货币要变的一文不值了。\n\n从社会中的财富总量来说，财富总是随着人类的辛勤努力，慢慢的在增加，很难突然瞬间财富爆膨。所以，能够被用来作为财富代表的物品中，需满足这么几个特点：\n1. 较为稀有，不能瞬间产生很多，也不能少的可怜\n2. 比较容易保存和交换\n\n这也就应了马克思说的：金银天然不是货币，但货币天然是金银。金银就是地球上的一种金属而已，并非生来就是货币。但由于它具有货币的这两个性质，而被人类规定为货币。\n\n为什么人类历史上没有使用石头做货币呢？当然是因为石头太多了嘛。石头想要多少，几乎瞬间就能找到多少。跟财富的量，完全不成比例。如果脑洞一下，古代朝廷强制用石头做货币，会怎么样呢？那肯定是，我拉好几车的石头，来跟你交换一粒大米。\n\n\n说清楚财富和货币的关系，接下来就可以说说，为众人所疯狂且津津乐道的，那几个数字货币的牛逼标签。\n\n\n### 去中心化\n![image](szhbmnmnb/img3.jpeg)\n数字货币，号称是一个去中心化的货币体系，没有中央银行，是安全和自由的保证。这是相较于现有的法定货币来说的一大特点。\n\n现有的法定货币体系，是基于信用的货币体系，由各国的中央银行来控制管理。在更朝换代或者经济出现大危机时，确实会让人的财富存在安全问题；以及央行的监管，也会让贪污或者洗钱行为，变得不自由。但对于最广大的人民群众和现在这样的和平年代，其实并没有因为中心化，而那么的没安全感和缺乏自由。因为，政府虽然会有时出现偏差，但总的来说它还是要为整个国家和人民负责的。而且政府可以适当控制法定货币的比例，以起到“劫富济贫”的效果，这点是去中心化没法做到的。\n\n在[《数字货币因何而值十万块》](/2018/01/15/szhbyhezsw/)中，我也说到了，数字货币跟黄金很像，这里不妨拿黄金来举例。\n\n在我国古代，使用金银作为货币的时期，其本身也是一种去中心化的。只要金银在手，即便是更朝换代，也是安全和自由的，与朝廷没任何关系。\n\n但财富总是遵循二八定律，总有一小部分人，持有大量的金银。在只接受金银进行纳税的朝廷，穷人只能卖掉粮食来纳税。所以当时也会有一帮掌握金银的财团，在秋收之际，囤积金银，哄抬金银价格，来掠取财富。朝廷也往往难以干预。\n\n所以我想说：对我们最为广大的人民群众来说，中心化，有一个负责任的政府监管，反而才是自由和安全的。去中心化，反而并没有想的那么美好。\n\n### 抗通胀\n![image](szhbmnmnb/img4.jpeg)\n数字货币说自己扛通胀，比如比特币，总共就只有2100万枚，听起来似乎比黄金还稀缺。而相较于法定货币，央行确实想印多少有多少。\n\n还是拿黄金类比。在布雷顿森林体系解体之后，黄金就永远的退出了人类货币的历史舞台，被窖藏在了底下金库。或许黄金现在还很值钱，但它不再是货币。\n\n在上文也说了，货币的量总是围绕着财富的量按照一定的比例上下波。黄金退出货币的历史舞台，或许有一定原因是交易不如纸币方便，但主要是，黄金无法跟进入现代化社会后财富的创造量相适应。\n\n以比特币为代表的数字货币也比较稀缺，所以我认为，它根本不可能成为货币。\n\n比特币是不是真的稀缺呢，只能是在比特币这条区块链上稀缺。但是人类可以开发无数个类似于比特币这样的区块链，风险可见一斑。\n\n数字货币主打的抗通胀，确实没问题。通胀确实可以洗劫人们积累的财富。但适当通胀，并没有那么可怕，有时经济的发展就需要一定的通胀来促进。\n\n以数字货币的稀缺性，反而更容易导致通缩。大家都觉着通胀可怕，其实通缩一定也不比通胀差。\n\n通缩，也就是货币升值，大家更容易囤积货币，抑制消费，反而更不利于经济发展。\n\n通缩其实也是一种掠夺财富的方式。通缩时，只要持有货币，就可坐等分享别人努力创造的财富。举个简单地例子，把北京的房子看作是货币，你只要持有北京的房子，每天喝喝茶听听戏，就能轻松身价成百上千万。哪些每天朝九晚九，辛勤为社会创造财富的人，其实在为你打工。\n\n再形象点说：假如你有一个苹果和一块钱，我也有一个苹果和一块钱，我可以用一块钱买你的苹果，同样你也可以买我的苹果。这里钱就是货币，苹果就是财富。假如你通过努力，自己又创造了俩苹果。这时你我总共有四个苹果和两块钱，于是通货紧缩，货币升值为，一块钱可以买俩苹果。\n\n在这个过程中，可以看得出来，我啥也没干，手里就由两个苹果(一个苹果+一块钱买到的一个苹果)变成了三个苹果(一个苹果+一块钱买到的两个苹果)。\n\n\n### 总结\n其实，去中心化，也并不是那么完美无缺，如果没有靠谱的监管，其实更容易沦落为富人洗劫穷人财富的工具。\n\n通胀确实可怕，它会稀释你积攒的财富；但是，通缩同样不可忽视，它会掠夺你正在努力创造的财富。","slug":"szhbmnmnb","published":1,"updated":"2018-01-19T03:22:45.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcn41j9h000acfs6at2pey0s","content":"<p>自己一直在北京，从事互联网技术相关的工作。最近，老家里的几个亲戚朋友，向我咨询：比特币是咋回事，什么是去中心化，为什么那么赚钱。</p>\n<p>人啊就是这样，看着别人赚钱，自己就跃跃欲试。<br><a id=\"more\"></a><br><img src=\"/2018/01/19/szhbmnmnb/img1.jpeg\" alt=\"image\"></p>\n<p>以比特币为代表的数字货币，被贴上各种牛逼的标签。本人不才，只想简单地谈谈，在我看来，这些牛逼的标签是不是真的牛逼。</p>\n<p>在正式谈这些牛逼的标签之前，我先说一说：什么是财富？</p>\n<h3 id=\"财富与货币的关系\"><a href=\"#财富与货币的关系\" class=\"headerlink\" title=\"财富与货币的关系\"></a>财富与货币的关系</h3><p><img src=\"/2018/01/19/szhbmnmnb/img2.jpeg\" alt=\"image\"><br>现实生活中，相当一部分人，把货币(钱)和财富等同为一个东东。但我这里可以向上帝保证：<strong>货币（钱）不是财富</strong>！</p>\n<p>货币只是用来度量财富和交易财富的工具，我们可以简单的把货币看作是，人类挑选出来的作为财富的代表。</p>\n<p>既然货币是财富的代表，那最好的状态就是一一对应，即一个单位的财富对应一个单位的货币。</p>\n<p>当然这只是理论上，现实中不可能达到一比一的比例的。一方面人类在不停地创造财富和消耗财富；另一方面人类也需要根据社会经济情况，适当调整货币和财富的比例。比如，经济不好的时候，人类会通过适当将增加货币的比例，来促进经济发展，也就是适当的通货膨胀。经济过热时，人类可以适当降低货币的比例，从而抑制经济过热而出现泡沫，也就是所谓的适当通货紧缩。</p>\n<p>财富和货币的关系，可以很形象的看作是：主人跟狗的关系。财富就是主人，货币就是狗。狗总是跟着主人走，时而走在主人前边，时而走在主人后边，但不能脱离太远。狗适当走在前边，就是适当通货膨胀，督促主人加快点步伐。如果狗走的前边太远，那就面临走丢的风险，对应成货币就是：货币要变的一文不值了。</p>\n<p>从社会中的财富总量来说，财富总是随着人类的辛勤努力，慢慢的在增加，很难突然瞬间财富爆膨。所以，能够被用来作为财富代表的物品中，需满足这么几个特点：</p>\n<ol>\n<li>较为稀有，不能瞬间产生很多，也不能少的可怜</li>\n<li>比较容易保存和交换</li>\n</ol>\n<p>这也就应了马克思说的：金银天然不是货币，但货币天然是金银。金银就是地球上的一种金属而已，并非生来就是货币。但由于它具有货币的这两个性质，而被人类规定为货币。</p>\n<p>为什么人类历史上没有使用石头做货币呢？当然是因为石头太多了嘛。石头想要多少，几乎瞬间就能找到多少。跟财富的量，完全不成比例。如果脑洞一下，古代朝廷强制用石头做货币，会怎么样呢？那肯定是，我拉好几车的石头，来跟你交换一粒大米。</p>\n<p>说清楚财富和货币的关系，接下来就可以说说，为众人所疯狂且津津乐道的，那几个数字货币的牛逼标签。</p>\n<h3 id=\"去中心化\"><a href=\"#去中心化\" class=\"headerlink\" title=\"去中心化\"></a>去中心化</h3><p><img src=\"/2018/01/19/szhbmnmnb/img3.jpeg\" alt=\"image\"><br>数字货币，号称是一个去中心化的货币体系，没有中央银行，是安全和自由的保证。这是相较于现有的法定货币来说的一大特点。</p>\n<p>现有的法定货币体系，是基于信用的货币体系，由各国的中央银行来控制管理。在更朝换代或者经济出现大危机时，确实会让人的财富存在安全问题；以及央行的监管，也会让贪污或者洗钱行为，变得不自由。但对于最广大的人民群众和现在这样的和平年代，其实并没有因为中心化，而那么的没安全感和缺乏自由。因为，政府虽然会有时出现偏差，但总的来说它还是要为整个国家和人民负责的。而且政府可以适当控制法定货币的比例，以起到“劫富济贫”的效果，这点是去中心化没法做到的。</p>\n<p>在<a href=\"/2018/01/15/szhbyhezsw/\">《数字货币因何而值十万块》</a>中，我也说到了，数字货币跟黄金很像，这里不妨拿黄金来举例。</p>\n<p>在我国古代，使用金银作为货币的时期，其本身也是一种去中心化的。只要金银在手，即便是更朝换代，也是安全和自由的，与朝廷没任何关系。</p>\n<p>但财富总是遵循二八定律，总有一小部分人，持有大量的金银。在只接受金银进行纳税的朝廷，穷人只能卖掉粮食来纳税。所以当时也会有一帮掌握金银的财团，在秋收之际，囤积金银，哄抬金银价格，来掠取财富。朝廷也往往难以干预。</p>\n<p>所以我想说：对我们最为广大的人民群众来说，中心化，有一个负责任的政府监管，反而才是自由和安全的。去中心化，反而并没有想的那么美好。</p>\n<h3 id=\"抗通胀\"><a href=\"#抗通胀\" class=\"headerlink\" title=\"抗通胀\"></a>抗通胀</h3><p><img src=\"/2018/01/19/szhbmnmnb/img4.jpeg\" alt=\"image\"><br>数字货币说自己扛通胀，比如比特币，总共就只有2100万枚，听起来似乎比黄金还稀缺。而相较于法定货币，央行确实想印多少有多少。</p>\n<p>还是拿黄金类比。在布雷顿森林体系解体之后，黄金就永远的退出了人类货币的历史舞台，被窖藏在了底下金库。或许黄金现在还很值钱，但它不再是货币。</p>\n<p>在上文也说了，货币的量总是围绕着财富的量按照一定的比例上下波。黄金退出货币的历史舞台，或许有一定原因是交易不如纸币方便，但主要是，黄金无法跟进入现代化社会后财富的创造量相适应。</p>\n<p>以比特币为代表的数字货币也比较稀缺，所以我认为，它根本不可能成为货币。</p>\n<p>比特币是不是真的稀缺呢，只能是在比特币这条区块链上稀缺。但是人类可以开发无数个类似于比特币这样的区块链，风险可见一斑。</p>\n<p>数字货币主打的抗通胀，确实没问题。通胀确实可以洗劫人们积累的财富。但适当通胀，并没有那么可怕，有时经济的发展就需要一定的通胀来促进。</p>\n<p>以数字货币的稀缺性，反而更容易导致通缩。大家都觉着通胀可怕，其实通缩一定也不比通胀差。</p>\n<p>通缩，也就是货币升值，大家更容易囤积货币，抑制消费，反而更不利于经济发展。</p>\n<p>通缩其实也是一种掠夺财富的方式。通缩时，只要持有货币，就可坐等分享别人努力创造的财富。举个简单地例子，把北京的房子看作是货币，你只要持有北京的房子，每天喝喝茶听听戏，就能轻松身价成百上千万。哪些每天朝九晚九，辛勤为社会创造财富的人，其实在为你打工。</p>\n<p>再形象点说：假如你有一个苹果和一块钱，我也有一个苹果和一块钱，我可以用一块钱买你的苹果，同样你也可以买我的苹果。这里钱就是货币，苹果就是财富。假如你通过努力，自己又创造了俩苹果。这时你我总共有四个苹果和两块钱，于是通货紧缩，货币升值为，一块钱可以买俩苹果。</p>\n<p>在这个过程中，可以看得出来，我啥也没干，手里就由两个苹果(一个苹果+一块钱买到的一个苹果)变成了三个苹果(一个苹果+一块钱买到的两个苹果)。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>其实，去中心化，也并不是那么完美无缺，如果没有靠谱的监管，其实更容易沦落为富人洗劫穷人财富的工具。</p>\n<p>通胀确实可怕，它会稀释你积攒的财富；但是，通缩同样不可忽视，它会掠夺你正在努力创造的财富。</p>\n","site":{"data":{"hint":{"new":{"selector":[".menu-reading",".menu-about"]}},"about":{"avatar":"/images/head2.jpg","name":"清泉","tag":"互联网/Java/区块链/金融","desc":"不甘心只懂技术的技术男","skills":{"Java/JVM":9,"Javascript":7,"Go":6,"invisible-split-line-1":-1,"区块链":8,"金融理财":7},"reward":["/images/weixin2.png","/images/zhifubao2.png"]},"link":{"social":{"weibo":"https://weibo.com/u/6182358871?is_all=1","github":"https://github.com/yongzhidai","rss":"/atom.xml"},"extern":{"博客园博客":"http://www.cnblogs.com/metoy/","博客园博客(备)":"http://www.cnblogs.com/qingquanzi/","知乎":"https://www.zhihu.com/people/yongzhi.dyz"}},"reading":{"define":{"readed":"技术类","reading":"金融类","wanted":"其它"},"contents":{"readed":[{"title":"深入理解Java虚拟机（第2版）","cover":"/images/bookImg/java_jvm.jpg","review":"JVM入门必读","score":"8.9","doubanLink":"https://book.douban.com/subject/24722612/"},{"title":"深入浅出MySQL","cover":"/images/bookImg/mysql.jpg","review":"内容通俗易懂，比较不错。","score":"7.7","doubanLink":"https://book.douban.com/subject/25817684/"},{"title":"区块链技术指南","cover":"/images/bookImg/block_chain.jpg","review":"区块链学习指南！","score":"6.3","doubanLink":"https://book.douban.com/subject/26959322/"}],"reading":[{"title":"彼得·林奇的成功投资","cover":"/images/bookImg/bdlq.jpg","review":"","score":"8.7","doubanLink":"https://book.douban.com/subject/1958714/"}],"wanted":[{"title":"人类简史","cover":"/images/bookImg/rljs.jpg","review":"","score":"9.1","doubanLink":"https://book.douban.com/subject/25985021/"},{"title":"三体","cover":"/images/bookImg/santi.jpg","review":"","score":"8.8","doubanLink":"https://book.douban.com/subject/2567698/"}]}},"slider":[{"image":"/images/bg1.jpg","align":"center","title":"欢迎你，朋友！","subtitle":"","link":"/"},{"image":"/images/bg2.jpg","align":"left","title":"我的知识星球圈子","subtitle":"点击微信扫码加入","link":"https://t.zsxq.com/EUn6IIE"},{"image":"/images/bg3.jpg","align":"right","title":"我的微信公众号","subtitle":"","link":null}]}},"excerpt":"<p>自己一直在北京，从事互联网技术相关的工作。最近，老家里的几个亲戚朋友，向我咨询：比特币是咋回事，什么是去中心化，为什么那么赚钱。</p>\n<p>人啊就是这样，看着别人赚钱，自己就跃跃欲试。<br></p>","more":"<br><img src=\"/2018/01/19/szhbmnmnb/img1.jpeg\" alt=\"image\"><p></p>\n<p>以比特币为代表的数字货币，被贴上各种牛逼的标签。本人不才，只想简单地谈谈，在我看来，这些牛逼的标签是不是真的牛逼。</p>\n<p>在正式谈这些牛逼的标签之前，我先说一说：什么是财富？</p>\n<h3 id=\"财富与货币的关系\"><a href=\"#财富与货币的关系\" class=\"headerlink\" title=\"财富与货币的关系\"></a>财富与货币的关系</h3><p><img src=\"/2018/01/19/szhbmnmnb/img2.jpeg\" alt=\"image\"><br>现实生活中，相当一部分人，把货币(钱)和财富等同为一个东东。但我这里可以向上帝保证：<strong>货币（钱）不是财富</strong>！</p>\n<p>货币只是用来度量财富和交易财富的工具，我们可以简单的把货币看作是，人类挑选出来的作为财富的代表。</p>\n<p>既然货币是财富的代表，那最好的状态就是一一对应，即一个单位的财富对应一个单位的货币。</p>\n<p>当然这只是理论上，现实中不可能达到一比一的比例的。一方面人类在不停地创造财富和消耗财富；另一方面人类也需要根据社会经济情况，适当调整货币和财富的比例。比如，经济不好的时候，人类会通过适当将增加货币的比例，来促进经济发展，也就是适当的通货膨胀。经济过热时，人类可以适当降低货币的比例，从而抑制经济过热而出现泡沫，也就是所谓的适当通货紧缩。</p>\n<p>财富和货币的关系，可以很形象的看作是：主人跟狗的关系。财富就是主人，货币就是狗。狗总是跟着主人走，时而走在主人前边，时而走在主人后边，但不能脱离太远。狗适当走在前边，就是适当通货膨胀，督促主人加快点步伐。如果狗走的前边太远，那就面临走丢的风险，对应成货币就是：货币要变的一文不值了。</p>\n<p>从社会中的财富总量来说，财富总是随着人类的辛勤努力，慢慢的在增加，很难突然瞬间财富爆膨。所以，能够被用来作为财富代表的物品中，需满足这么几个特点：</p>\n<ol>\n<li>较为稀有，不能瞬间产生很多，也不能少的可怜</li>\n<li>比较容易保存和交换</li>\n</ol>\n<p>这也就应了马克思说的：金银天然不是货币，但货币天然是金银。金银就是地球上的一种金属而已，并非生来就是货币。但由于它具有货币的这两个性质，而被人类规定为货币。</p>\n<p>为什么人类历史上没有使用石头做货币呢？当然是因为石头太多了嘛。石头想要多少，几乎瞬间就能找到多少。跟财富的量，完全不成比例。如果脑洞一下，古代朝廷强制用石头做货币，会怎么样呢？那肯定是，我拉好几车的石头，来跟你交换一粒大米。</p>\n<p>说清楚财富和货币的关系，接下来就可以说说，为众人所疯狂且津津乐道的，那几个数字货币的牛逼标签。</p>\n<h3 id=\"去中心化\"><a href=\"#去中心化\" class=\"headerlink\" title=\"去中心化\"></a>去中心化</h3><p><img src=\"/2018/01/19/szhbmnmnb/img3.jpeg\" alt=\"image\"><br>数字货币，号称是一个去中心化的货币体系，没有中央银行，是安全和自由的保证。这是相较于现有的法定货币来说的一大特点。</p>\n<p>现有的法定货币体系，是基于信用的货币体系，由各国的中央银行来控制管理。在更朝换代或者经济出现大危机时，确实会让人的财富存在安全问题；以及央行的监管，也会让贪污或者洗钱行为，变得不自由。但对于最广大的人民群众和现在这样的和平年代，其实并没有因为中心化，而那么的没安全感和缺乏自由。因为，政府虽然会有时出现偏差，但总的来说它还是要为整个国家和人民负责的。而且政府可以适当控制法定货币的比例，以起到“劫富济贫”的效果，这点是去中心化没法做到的。</p>\n<p>在<a href=\"/2018/01/15/szhbyhezsw/\">《数字货币因何而值十万块》</a>中，我也说到了，数字货币跟黄金很像，这里不妨拿黄金来举例。</p>\n<p>在我国古代，使用金银作为货币的时期，其本身也是一种去中心化的。只要金银在手，即便是更朝换代，也是安全和自由的，与朝廷没任何关系。</p>\n<p>但财富总是遵循二八定律，总有一小部分人，持有大量的金银。在只接受金银进行纳税的朝廷，穷人只能卖掉粮食来纳税。所以当时也会有一帮掌握金银的财团，在秋收之际，囤积金银，哄抬金银价格，来掠取财富。朝廷也往往难以干预。</p>\n<p>所以我想说：对我们最为广大的人民群众来说，中心化，有一个负责任的政府监管，反而才是自由和安全的。去中心化，反而并没有想的那么美好。</p>\n<h3 id=\"抗通胀\"><a href=\"#抗通胀\" class=\"headerlink\" title=\"抗通胀\"></a>抗通胀</h3><p><img src=\"/2018/01/19/szhbmnmnb/img4.jpeg\" alt=\"image\"><br>数字货币说自己扛通胀，比如比特币，总共就只有2100万枚，听起来似乎比黄金还稀缺。而相较于法定货币，央行确实想印多少有多少。</p>\n<p>还是拿黄金类比。在布雷顿森林体系解体之后，黄金就永远的退出了人类货币的历史舞台，被窖藏在了底下金库。或许黄金现在还很值钱，但它不再是货币。</p>\n<p>在上文也说了，货币的量总是围绕着财富的量按照一定的比例上下波。黄金退出货币的历史舞台，或许有一定原因是交易不如纸币方便，但主要是，黄金无法跟进入现代化社会后财富的创造量相适应。</p>\n<p>以比特币为代表的数字货币也比较稀缺，所以我认为，它根本不可能成为货币。</p>\n<p>比特币是不是真的稀缺呢，只能是在比特币这条区块链上稀缺。但是人类可以开发无数个类似于比特币这样的区块链，风险可见一斑。</p>\n<p>数字货币主打的抗通胀，确实没问题。通胀确实可以洗劫人们积累的财富。但适当通胀，并没有那么可怕，有时经济的发展就需要一定的通胀来促进。</p>\n<p>以数字货币的稀缺性，反而更容易导致通缩。大家都觉着通胀可怕，其实通缩一定也不比通胀差。</p>\n<p>通缩，也就是货币升值，大家更容易囤积货币，抑制消费，反而更不利于经济发展。</p>\n<p>通缩其实也是一种掠夺财富的方式。通缩时，只要持有货币，就可坐等分享别人努力创造的财富。举个简单地例子，把北京的房子看作是货币，你只要持有北京的房子，每天喝喝茶听听戏，就能轻松身价成百上千万。哪些每天朝九晚九，辛勤为社会创造财富的人，其实在为你打工。</p>\n<p>再形象点说：假如你有一个苹果和一块钱，我也有一个苹果和一块钱，我可以用一块钱买你的苹果，同样你也可以买我的苹果。这里钱就是货币，苹果就是财富。假如你通过努力，自己又创造了俩苹果。这时你我总共有四个苹果和两块钱，于是通货紧缩，货币升值为，一块钱可以买俩苹果。</p>\n<p>在这个过程中，可以看得出来，我啥也没干，手里就由两个苹果(一个苹果+一块钱买到的一个苹果)变成了三个苹果(一个苹果+一块钱买到的两个苹果)。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>其实，去中心化，也并不是那么完美无缺，如果没有靠谱的监管，其实更容易沦落为富人洗劫穷人财富的工具。</p>\n<p>通胀确实可怕，它会稀释你积攒的财富；但是，通缩同样不可忽视，它会掠夺你正在努力创造的财富。</p>"},{"title":"数字货币因何而值十万块","date":"2018-01-15T06:20:36.000Z","_content":"最近，数字货币真的是火的不行，不管是叔叔阿姨，还是爷爷奶奶，张口都能唠上几句：区块链啊、去中心化啊。\n<!--more-->\n\n还记得当年的柯达胶卷吧，自从数字摄影技术普及之后，这家公司就半死不活，行将就木，一度淡出公众视野。可就在最近，柯达宣布进入区块链之后，股价更是翻了一倍，就是这么神奇。甚至有些公司，仅仅是将公司名字加上“区块链”几个字，股价就跟脱缰了的野马，一发不可收拾。疯狂到如此程度，不免让人想起当年的郁金香泡沫。\n\n![image](szhbyhezsw/bitebi.jpeg)\n\n但虚拟币到底有什么价值？为什么比特币超过十万一枚？区块链是什么高深技术吗？普通人要不要参与这个趋势发点财呢？接下来我就聊一聊我个人看法。\n\n\n\n首先，先梳理下什么是货币。货币可以被定义为：大部分人都愿意接受的，用来物物交换的中介物，即一般等价物。马克思说：金银天然不是货币，但货币天然是金银。货币为什么天然就是金银呢？是因为在人类的慢慢历史长河中，金银由于其稀缺性，易于储存等性质，而被人类筛选出来作为了货币。\n\n\n\n不知道你有没有思考过，黄金到底有什么价值？耗费大量的人力物力，把黄金开采锻造出来，然后放到消耗巨大财力而修建的地下金库中，还要安排人员轮流看守。黄金不但没有创造价值，而且还在消耗价值。而即便是一块很不起眼的土地，我们都可以通过种植庄家产生价值。想必这也是当初哪些聪明的地主，宁愿把黄金换成土地，也不愿意一直保留黄金的原因吧。\n\n\n\n但为啥大家还对黄金这么趋之若鹜呢？主要两点：稀缺性和大部分人都愿意接受它。\n\n\n\n黄金的稀缺性是客观存在的事实，大家都愿意接受它是一个慢慢的发展的过程。与以比特币为代表的虚拟币类比，比特币由于其设计，也具有稀缺性，同时由于洗钱啊、赌博啊、投机炒作啊等，而慢慢的在人群中变得越来越被接受。所以比特币其实是跟黄金类似的东西。当你再疑惑虚拟币到底有什么价值时，不妨先问问自己，黄金有什么价值。\n\n\n\n但要强调的是，我只是说黄金和虚拟币类似，而不是完全相同，因为我能想到，有一部分人肯定拿黄金可以做首饰，还可以做芯片来反驳我。关于这点的区别我不想多说，我更想说另一个最大的区别：黄金没法被人类复制，地球上有多少黄金就是多少黄金，人类没法再复制出黄金2号、黄金2号。但是虚拟币不同，虽然在比特币这个区块链上，比特币的数量是稀缺没法复制的，但是人类可以再开发出比特币2号，比特币3号，只要你愿意，就可以这么无穷无尽的开发下去。某一区块链上的虚拟货币是稀缺的，但是区块链并不稀缺。\n\n\n\n既然区块链可以无穷无尽的开发复制下去，那自然也能出现越来越多种类的虚拟货币。那在这些种类的虚拟货币中，哪个更值钱呢？很简单：哪个玩家多哪个更值钱。\n\n\n\n比特币当下已达到十万多人民币一枚，之所以达到这么高的价格，除了每个区块链上的货币都会有的稀缺性外，最重要的还是，由于其出现最早、时间最长，参与的玩家最多。那比特币到底值不值十万多一枚呢？这个真不好说，我个人更倾向于有泡沫，与最近区块链、虚拟币等概念被炒得太热，大家都挤破头的参与进来，想投机发财有关。如果有一天，有人开发出比特币2号，大家都来玩这个了，那现在的比特币将会变得一文不值。\n\n\n\n再说说区块链，区块链是新的高深的技术吗？作为一个技术研发人员，可以非常肯定的告诉你：并不是。区块链更多的是一种新的架构思想或者是一种新的设计方案。它所用到的技术，大多数人都多少接触过：\n\n有没有用看快播看过片啊？看过吧，用到了这里的点对点网络技术。\n有没有用过银行的U盾啊？用过吧，用到了这里的加密、数字签名的技术。\n作为技术人员，尤其是互联网从业者，肯定也用过分布式系统吧。\n所以说，区块链技术并不高深，只是设计的巧妙而已。当然我这里并不是说实现起来简单，仅仅是说采用的技术不是很顶尖很有突破。\n\n\n\n虚拟币值不值钱，就看有没有人愿意玩它。但是虚拟币的底层技术，区块链不同。区块链还是有一定的商业用价值的，比如我们阿里内部，就在应用区块链技术，来实现商品溯源。\n\n\n\n现在关于区块链的新闻真是漫天飞舞：什么那几家大型银行投资区块链，什么那几个大型互联网公司布局区块链，还有什么天使基金、风险投资投资区块链啊。似乎区块链真的是一场改变世界的大革命一样，各种牛逼人物、机构纷纷参与。但普通人的你我，不能因为这些大佬们的参与，而失去理智。有一点我觉着有责任对不了解区块链的人说清楚：这些大佬本投资区块链，是看重这块技术对未来商业所产生的价值，并不是投资购买虚拟币。切莫不管三七二十一，冲进去就是买各种币。\n\n\n\n最后再说一说，普通人要不要参与进来，顺势赚点钱呢。我觉着吧，可以适当参与，但不能all in。\n\n\n\n虚拟币其实也不是某些人认为的庞氏骗局，它更多的像是我上边分析的那样，类黄金的东西。只要它有一定的稀缺性，有人接受它，它就有可能会升值会贬值。所以你可以拿出一定比例的收入，当成资产配置一样配置一些。但是前提一定得了解这个项目。毕竟也会有一大部分骗子，打着区块链、虚拟币的幌子，通过一个描述的很美好的白皮书，进行ICO，骗取哪些啥都不懂，是区块链就上的人的钱财。\n\n\n\n所以，投资区块链，最重要的是看项目。看看项目的发起人是否真的有相关的工作背景以及技术背景。还要看看这个项目未来商用性，能否吸引用户来玩，只有未来有人玩了，它才可能值钱有价值，否则什么都不是。再就是通过技术的角度评估其技术上的可行性，这点可能对普通人来说比较有门槛，可以找懂技术的人进行咨询。\n\n\n\n本篇就聊到这吧，回头找时间，我再从程序员的视角，聊聊区块链具体底层的技术实现。\n","source":"_posts/szhbyhezsw.md","raw":"---\ntitle: 数字货币因何而值十万块\ncategories:\n  - 区块链\ntags:\n  - 比特币\n  - 区块链\ndate: 2018-01-15 14:20:36\n---\n最近，数字货币真的是火的不行，不管是叔叔阿姨，还是爷爷奶奶，张口都能唠上几句：区块链啊、去中心化啊。\n<!--more-->\n\n还记得当年的柯达胶卷吧，自从数字摄影技术普及之后，这家公司就半死不活，行将就木，一度淡出公众视野。可就在最近，柯达宣布进入区块链之后，股价更是翻了一倍，就是这么神奇。甚至有些公司，仅仅是将公司名字加上“区块链”几个字，股价就跟脱缰了的野马，一发不可收拾。疯狂到如此程度，不免让人想起当年的郁金香泡沫。\n\n![image](szhbyhezsw/bitebi.jpeg)\n\n但虚拟币到底有什么价值？为什么比特币超过十万一枚？区块链是什么高深技术吗？普通人要不要参与这个趋势发点财呢？接下来我就聊一聊我个人看法。\n\n\n\n首先，先梳理下什么是货币。货币可以被定义为：大部分人都愿意接受的，用来物物交换的中介物，即一般等价物。马克思说：金银天然不是货币，但货币天然是金银。货币为什么天然就是金银呢？是因为在人类的慢慢历史长河中，金银由于其稀缺性，易于储存等性质，而被人类筛选出来作为了货币。\n\n\n\n不知道你有没有思考过，黄金到底有什么价值？耗费大量的人力物力，把黄金开采锻造出来，然后放到消耗巨大财力而修建的地下金库中，还要安排人员轮流看守。黄金不但没有创造价值，而且还在消耗价值。而即便是一块很不起眼的土地，我们都可以通过种植庄家产生价值。想必这也是当初哪些聪明的地主，宁愿把黄金换成土地，也不愿意一直保留黄金的原因吧。\n\n\n\n但为啥大家还对黄金这么趋之若鹜呢？主要两点：稀缺性和大部分人都愿意接受它。\n\n\n\n黄金的稀缺性是客观存在的事实，大家都愿意接受它是一个慢慢的发展的过程。与以比特币为代表的虚拟币类比，比特币由于其设计，也具有稀缺性，同时由于洗钱啊、赌博啊、投机炒作啊等，而慢慢的在人群中变得越来越被接受。所以比特币其实是跟黄金类似的东西。当你再疑惑虚拟币到底有什么价值时，不妨先问问自己，黄金有什么价值。\n\n\n\n但要强调的是，我只是说黄金和虚拟币类似，而不是完全相同，因为我能想到，有一部分人肯定拿黄金可以做首饰，还可以做芯片来反驳我。关于这点的区别我不想多说，我更想说另一个最大的区别：黄金没法被人类复制，地球上有多少黄金就是多少黄金，人类没法再复制出黄金2号、黄金2号。但是虚拟币不同，虽然在比特币这个区块链上，比特币的数量是稀缺没法复制的，但是人类可以再开发出比特币2号，比特币3号，只要你愿意，就可以这么无穷无尽的开发下去。某一区块链上的虚拟货币是稀缺的，但是区块链并不稀缺。\n\n\n\n既然区块链可以无穷无尽的开发复制下去，那自然也能出现越来越多种类的虚拟货币。那在这些种类的虚拟货币中，哪个更值钱呢？很简单：哪个玩家多哪个更值钱。\n\n\n\n比特币当下已达到十万多人民币一枚，之所以达到这么高的价格，除了每个区块链上的货币都会有的稀缺性外，最重要的还是，由于其出现最早、时间最长，参与的玩家最多。那比特币到底值不值十万多一枚呢？这个真不好说，我个人更倾向于有泡沫，与最近区块链、虚拟币等概念被炒得太热，大家都挤破头的参与进来，想投机发财有关。如果有一天，有人开发出比特币2号，大家都来玩这个了，那现在的比特币将会变得一文不值。\n\n\n\n再说说区块链，区块链是新的高深的技术吗？作为一个技术研发人员，可以非常肯定的告诉你：并不是。区块链更多的是一种新的架构思想或者是一种新的设计方案。它所用到的技术，大多数人都多少接触过：\n\n有没有用看快播看过片啊？看过吧，用到了这里的点对点网络技术。\n有没有用过银行的U盾啊？用过吧，用到了这里的加密、数字签名的技术。\n作为技术人员，尤其是互联网从业者，肯定也用过分布式系统吧。\n所以说，区块链技术并不高深，只是设计的巧妙而已。当然我这里并不是说实现起来简单，仅仅是说采用的技术不是很顶尖很有突破。\n\n\n\n虚拟币值不值钱，就看有没有人愿意玩它。但是虚拟币的底层技术，区块链不同。区块链还是有一定的商业用价值的，比如我们阿里内部，就在应用区块链技术，来实现商品溯源。\n\n\n\n现在关于区块链的新闻真是漫天飞舞：什么那几家大型银行投资区块链，什么那几个大型互联网公司布局区块链，还有什么天使基金、风险投资投资区块链啊。似乎区块链真的是一场改变世界的大革命一样，各种牛逼人物、机构纷纷参与。但普通人的你我，不能因为这些大佬们的参与，而失去理智。有一点我觉着有责任对不了解区块链的人说清楚：这些大佬本投资区块链，是看重这块技术对未来商业所产生的价值，并不是投资购买虚拟币。切莫不管三七二十一，冲进去就是买各种币。\n\n\n\n最后再说一说，普通人要不要参与进来，顺势赚点钱呢。我觉着吧，可以适当参与，但不能all in。\n\n\n\n虚拟币其实也不是某些人认为的庞氏骗局，它更多的像是我上边分析的那样，类黄金的东西。只要它有一定的稀缺性，有人接受它，它就有可能会升值会贬值。所以你可以拿出一定比例的收入，当成资产配置一样配置一些。但是前提一定得了解这个项目。毕竟也会有一大部分骗子，打着区块链、虚拟币的幌子，通过一个描述的很美好的白皮书，进行ICO，骗取哪些啥都不懂，是区块链就上的人的钱财。\n\n\n\n所以，投资区块链，最重要的是看项目。看看项目的发起人是否真的有相关的工作背景以及技术背景。还要看看这个项目未来商用性，能否吸引用户来玩，只有未来有人玩了，它才可能值钱有价值，否则什么都不是。再就是通过技术的角度评估其技术上的可行性，这点可能对普通人来说比较有门槛，可以找懂技术的人进行咨询。\n\n\n\n本篇就聊到这吧，回头找时间，我再从程序员的视角，聊聊区块链具体底层的技术实现。\n","slug":"szhbyhezsw","published":1,"updated":"2018-01-18T16:08:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcn41j9j000bcfs607gol50v","content":"<p>最近，数字货币真的是火的不行，不管是叔叔阿姨，还是爷爷奶奶，张口都能唠上几句：区块链啊、去中心化啊。<br><a id=\"more\"></a></p>\n<p>还记得当年的柯达胶卷吧，自从数字摄影技术普及之后，这家公司就半死不活，行将就木，一度淡出公众视野。可就在最近，柯达宣布进入区块链之后，股价更是翻了一倍，就是这么神奇。甚至有些公司，仅仅是将公司名字加上“区块链”几个字，股价就跟脱缰了的野马，一发不可收拾。疯狂到如此程度，不免让人想起当年的郁金香泡沫。</p>\n<p><img src=\"/2018/01/15/szhbyhezsw/bitebi.jpeg\" alt=\"image\"></p>\n<p>但虚拟币到底有什么价值？为什么比特币超过十万一枚？区块链是什么高深技术吗？普通人要不要参与这个趋势发点财呢？接下来我就聊一聊我个人看法。</p>\n<p>首先，先梳理下什么是货币。货币可以被定义为：大部分人都愿意接受的，用来物物交换的中介物，即一般等价物。马克思说：金银天然不是货币，但货币天然是金银。货币为什么天然就是金银呢？是因为在人类的慢慢历史长河中，金银由于其稀缺性，易于储存等性质，而被人类筛选出来作为了货币。</p>\n<p>不知道你有没有思考过，黄金到底有什么价值？耗费大量的人力物力，把黄金开采锻造出来，然后放到消耗巨大财力而修建的地下金库中，还要安排人员轮流看守。黄金不但没有创造价值，而且还在消耗价值。而即便是一块很不起眼的土地，我们都可以通过种植庄家产生价值。想必这也是当初哪些聪明的地主，宁愿把黄金换成土地，也不愿意一直保留黄金的原因吧。</p>\n<p>但为啥大家还对黄金这么趋之若鹜呢？主要两点：稀缺性和大部分人都愿意接受它。</p>\n<p>黄金的稀缺性是客观存在的事实，大家都愿意接受它是一个慢慢的发展的过程。与以比特币为代表的虚拟币类比，比特币由于其设计，也具有稀缺性，同时由于洗钱啊、赌博啊、投机炒作啊等，而慢慢的在人群中变得越来越被接受。所以比特币其实是跟黄金类似的东西。当你再疑惑虚拟币到底有什么价值时，不妨先问问自己，黄金有什么价值。</p>\n<p>但要强调的是，我只是说黄金和虚拟币类似，而不是完全相同，因为我能想到，有一部分人肯定拿黄金可以做首饰，还可以做芯片来反驳我。关于这点的区别我不想多说，我更想说另一个最大的区别：黄金没法被人类复制，地球上有多少黄金就是多少黄金，人类没法再复制出黄金2号、黄金2号。但是虚拟币不同，虽然在比特币这个区块链上，比特币的数量是稀缺没法复制的，但是人类可以再开发出比特币2号，比特币3号，只要你愿意，就可以这么无穷无尽的开发下去。某一区块链上的虚拟货币是稀缺的，但是区块链并不稀缺。</p>\n<p>既然区块链可以无穷无尽的开发复制下去，那自然也能出现越来越多种类的虚拟货币。那在这些种类的虚拟货币中，哪个更值钱呢？很简单：哪个玩家多哪个更值钱。</p>\n<p>比特币当下已达到十万多人民币一枚，之所以达到这么高的价格，除了每个区块链上的货币都会有的稀缺性外，最重要的还是，由于其出现最早、时间最长，参与的玩家最多。那比特币到底值不值十万多一枚呢？这个真不好说，我个人更倾向于有泡沫，与最近区块链、虚拟币等概念被炒得太热，大家都挤破头的参与进来，想投机发财有关。如果有一天，有人开发出比特币2号，大家都来玩这个了，那现在的比特币将会变得一文不值。</p>\n<p>再说说区块链，区块链是新的高深的技术吗？作为一个技术研发人员，可以非常肯定的告诉你：并不是。区块链更多的是一种新的架构思想或者是一种新的设计方案。它所用到的技术，大多数人都多少接触过：</p>\n<p>有没有用看快播看过片啊？看过吧，用到了这里的点对点网络技术。<br>有没有用过银行的U盾啊？用过吧，用到了这里的加密、数字签名的技术。<br>作为技术人员，尤其是互联网从业者，肯定也用过分布式系统吧。<br>所以说，区块链技术并不高深，只是设计的巧妙而已。当然我这里并不是说实现起来简单，仅仅是说采用的技术不是很顶尖很有突破。</p>\n<p>虚拟币值不值钱，就看有没有人愿意玩它。但是虚拟币的底层技术，区块链不同。区块链还是有一定的商业用价值的，比如我们阿里内部，就在应用区块链技术，来实现商品溯源。</p>\n<p>现在关于区块链的新闻真是漫天飞舞：什么那几家大型银行投资区块链，什么那几个大型互联网公司布局区块链，还有什么天使基金、风险投资投资区块链啊。似乎区块链真的是一场改变世界的大革命一样，各种牛逼人物、机构纷纷参与。但普通人的你我，不能因为这些大佬们的参与，而失去理智。有一点我觉着有责任对不了解区块链的人说清楚：这些大佬本投资区块链，是看重这块技术对未来商业所产生的价值，并不是投资购买虚拟币。切莫不管三七二十一，冲进去就是买各种币。</p>\n<p>最后再说一说，普通人要不要参与进来，顺势赚点钱呢。我觉着吧，可以适当参与，但不能all in。</p>\n<p>虚拟币其实也不是某些人认为的庞氏骗局，它更多的像是我上边分析的那样，类黄金的东西。只要它有一定的稀缺性，有人接受它，它就有可能会升值会贬值。所以你可以拿出一定比例的收入，当成资产配置一样配置一些。但是前提一定得了解这个项目。毕竟也会有一大部分骗子，打着区块链、虚拟币的幌子，通过一个描述的很美好的白皮书，进行ICO，骗取哪些啥都不懂，是区块链就上的人的钱财。</p>\n<p>所以，投资区块链，最重要的是看项目。看看项目的发起人是否真的有相关的工作背景以及技术背景。还要看看这个项目未来商用性，能否吸引用户来玩，只有未来有人玩了，它才可能值钱有价值，否则什么都不是。再就是通过技术的角度评估其技术上的可行性，这点可能对普通人来说比较有门槛，可以找懂技术的人进行咨询。</p>\n<p>本篇就聊到这吧，回头找时间，我再从程序员的视角，聊聊区块链具体底层的技术实现。</p>\n","site":{"data":{"hint":{"new":{"selector":[".menu-reading",".menu-about"]}},"about":{"avatar":"/images/head2.jpg","name":"清泉","tag":"互联网/Java/区块链/金融","desc":"不甘心只懂技术的技术男","skills":{"Java/JVM":9,"Javascript":7,"Go":6,"invisible-split-line-1":-1,"区块链":8,"金融理财":7},"reward":["/images/weixin2.png","/images/zhifubao2.png"]},"link":{"social":{"weibo":"https://weibo.com/u/6182358871?is_all=1","github":"https://github.com/yongzhidai","rss":"/atom.xml"},"extern":{"博客园博客":"http://www.cnblogs.com/metoy/","博客园博客(备)":"http://www.cnblogs.com/qingquanzi/","知乎":"https://www.zhihu.com/people/yongzhi.dyz"}},"reading":{"define":{"readed":"技术类","reading":"金融类","wanted":"其它"},"contents":{"readed":[{"title":"深入理解Java虚拟机（第2版）","cover":"/images/bookImg/java_jvm.jpg","review":"JVM入门必读","score":"8.9","doubanLink":"https://book.douban.com/subject/24722612/"},{"title":"深入浅出MySQL","cover":"/images/bookImg/mysql.jpg","review":"内容通俗易懂，比较不错。","score":"7.7","doubanLink":"https://book.douban.com/subject/25817684/"},{"title":"区块链技术指南","cover":"/images/bookImg/block_chain.jpg","review":"区块链学习指南！","score":"6.3","doubanLink":"https://book.douban.com/subject/26959322/"}],"reading":[{"title":"彼得·林奇的成功投资","cover":"/images/bookImg/bdlq.jpg","review":"","score":"8.7","doubanLink":"https://book.douban.com/subject/1958714/"}],"wanted":[{"title":"人类简史","cover":"/images/bookImg/rljs.jpg","review":"","score":"9.1","doubanLink":"https://book.douban.com/subject/25985021/"},{"title":"三体","cover":"/images/bookImg/santi.jpg","review":"","score":"8.8","doubanLink":"https://book.douban.com/subject/2567698/"}]}},"slider":[{"image":"/images/bg1.jpg","align":"center","title":"欢迎你，朋友！","subtitle":"","link":"/"},{"image":"/images/bg2.jpg","align":"left","title":"我的知识星球圈子","subtitle":"点击微信扫码加入","link":"https://t.zsxq.com/EUn6IIE"},{"image":"/images/bg3.jpg","align":"right","title":"我的微信公众号","subtitle":"","link":null}]}},"excerpt":"<p>最近，数字货币真的是火的不行，不管是叔叔阿姨，还是爷爷奶奶，张口都能唠上几句：区块链啊、去中心化啊。<br></p>","more":"<p></p>\n<p>还记得当年的柯达胶卷吧，自从数字摄影技术普及之后，这家公司就半死不活，行将就木，一度淡出公众视野。可就在最近，柯达宣布进入区块链之后，股价更是翻了一倍，就是这么神奇。甚至有些公司，仅仅是将公司名字加上“区块链”几个字，股价就跟脱缰了的野马，一发不可收拾。疯狂到如此程度，不免让人想起当年的郁金香泡沫。</p>\n<p><img src=\"/2018/01/15/szhbyhezsw/bitebi.jpeg\" alt=\"image\"></p>\n<p>但虚拟币到底有什么价值？为什么比特币超过十万一枚？区块链是什么高深技术吗？普通人要不要参与这个趋势发点财呢？接下来我就聊一聊我个人看法。</p>\n<p>首先，先梳理下什么是货币。货币可以被定义为：大部分人都愿意接受的，用来物物交换的中介物，即一般等价物。马克思说：金银天然不是货币，但货币天然是金银。货币为什么天然就是金银呢？是因为在人类的慢慢历史长河中，金银由于其稀缺性，易于储存等性质，而被人类筛选出来作为了货币。</p>\n<p>不知道你有没有思考过，黄金到底有什么价值？耗费大量的人力物力，把黄金开采锻造出来，然后放到消耗巨大财力而修建的地下金库中，还要安排人员轮流看守。黄金不但没有创造价值，而且还在消耗价值。而即便是一块很不起眼的土地，我们都可以通过种植庄家产生价值。想必这也是当初哪些聪明的地主，宁愿把黄金换成土地，也不愿意一直保留黄金的原因吧。</p>\n<p>但为啥大家还对黄金这么趋之若鹜呢？主要两点：稀缺性和大部分人都愿意接受它。</p>\n<p>黄金的稀缺性是客观存在的事实，大家都愿意接受它是一个慢慢的发展的过程。与以比特币为代表的虚拟币类比，比特币由于其设计，也具有稀缺性，同时由于洗钱啊、赌博啊、投机炒作啊等，而慢慢的在人群中变得越来越被接受。所以比特币其实是跟黄金类似的东西。当你再疑惑虚拟币到底有什么价值时，不妨先问问自己，黄金有什么价值。</p>\n<p>但要强调的是，我只是说黄金和虚拟币类似，而不是完全相同，因为我能想到，有一部分人肯定拿黄金可以做首饰，还可以做芯片来反驳我。关于这点的区别我不想多说，我更想说另一个最大的区别：黄金没法被人类复制，地球上有多少黄金就是多少黄金，人类没法再复制出黄金2号、黄金2号。但是虚拟币不同，虽然在比特币这个区块链上，比特币的数量是稀缺没法复制的，但是人类可以再开发出比特币2号，比特币3号，只要你愿意，就可以这么无穷无尽的开发下去。某一区块链上的虚拟货币是稀缺的，但是区块链并不稀缺。</p>\n<p>既然区块链可以无穷无尽的开发复制下去，那自然也能出现越来越多种类的虚拟货币。那在这些种类的虚拟货币中，哪个更值钱呢？很简单：哪个玩家多哪个更值钱。</p>\n<p>比特币当下已达到十万多人民币一枚，之所以达到这么高的价格，除了每个区块链上的货币都会有的稀缺性外，最重要的还是，由于其出现最早、时间最长，参与的玩家最多。那比特币到底值不值十万多一枚呢？这个真不好说，我个人更倾向于有泡沫，与最近区块链、虚拟币等概念被炒得太热，大家都挤破头的参与进来，想投机发财有关。如果有一天，有人开发出比特币2号，大家都来玩这个了，那现在的比特币将会变得一文不值。</p>\n<p>再说说区块链，区块链是新的高深的技术吗？作为一个技术研发人员，可以非常肯定的告诉你：并不是。区块链更多的是一种新的架构思想或者是一种新的设计方案。它所用到的技术，大多数人都多少接触过：</p>\n<p>有没有用看快播看过片啊？看过吧，用到了这里的点对点网络技术。<br>有没有用过银行的U盾啊？用过吧，用到了这里的加密、数字签名的技术。<br>作为技术人员，尤其是互联网从业者，肯定也用过分布式系统吧。<br>所以说，区块链技术并不高深，只是设计的巧妙而已。当然我这里并不是说实现起来简单，仅仅是说采用的技术不是很顶尖很有突破。</p>\n<p>虚拟币值不值钱，就看有没有人愿意玩它。但是虚拟币的底层技术，区块链不同。区块链还是有一定的商业用价值的，比如我们阿里内部，就在应用区块链技术，来实现商品溯源。</p>\n<p>现在关于区块链的新闻真是漫天飞舞：什么那几家大型银行投资区块链，什么那几个大型互联网公司布局区块链，还有什么天使基金、风险投资投资区块链啊。似乎区块链真的是一场改变世界的大革命一样，各种牛逼人物、机构纷纷参与。但普通人的你我，不能因为这些大佬们的参与，而失去理智。有一点我觉着有责任对不了解区块链的人说清楚：这些大佬本投资区块链，是看重这块技术对未来商业所产生的价值，并不是投资购买虚拟币。切莫不管三七二十一，冲进去就是买各种币。</p>\n<p>最后再说一说，普通人要不要参与进来，顺势赚点钱呢。我觉着吧，可以适当参与，但不能all in。</p>\n<p>虚拟币其实也不是某些人认为的庞氏骗局，它更多的像是我上边分析的那样，类黄金的东西。只要它有一定的稀缺性，有人接受它，它就有可能会升值会贬值。所以你可以拿出一定比例的收入，当成资产配置一样配置一些。但是前提一定得了解这个项目。毕竟也会有一大部分骗子，打着区块链、虚拟币的幌子，通过一个描述的很美好的白皮书，进行ICO，骗取哪些啥都不懂，是区块链就上的人的钱财。</p>\n<p>所以，投资区块链，最重要的是看项目。看看项目的发起人是否真的有相关的工作背景以及技术背景。还要看看这个项目未来商用性，能否吸引用户来玩，只有未来有人玩了，它才可能值钱有价值，否则什么都不是。再就是通过技术的角度评估其技术上的可行性，这点可能对普通人来说比较有门槛，可以找懂技术的人进行咨询。</p>\n<p>本篇就聊到这吧，回头找时间，我再从程序员的视角，聊聊区块链具体底层的技术实现。</p>"}],"PostAsset":[{"_id":"source/_posts/java-lock4/img5.png","slug":"img5.png","post":"cjcn41j9d0006cfs6ty880dk5","modified":1,"renderable":0},{"_id":"source/_posts/java-lock4/img7.png","slug":"img7.png","post":"cjcn41j9d0006cfs6ty880dk5","modified":1,"renderable":0},{"_id":"source/_posts/java-lock4/img12.png","slug":"img12.png","post":"cjcn41j9d0006cfs6ty880dk5","modified":1,"renderable":0},{"_id":"source/_posts/java-lock4/img4.png","slug":"img4.png","post":"cjcn41j9d0006cfs6ty880dk5","modified":1,"renderable":0},{"_id":"source/_posts/java-lock4/img9.png","slug":"img9.png","post":"cjcn41j9d0006cfs6ty880dk5","modified":1,"renderable":0},{"_id":"source/_posts/java-lock4/img3.png","slug":"img3.png","post":"cjcn41j9d0006cfs6ty880dk5","modified":1,"renderable":0},{"_id":"source/_posts/java-lock4/img8.png","slug":"img8.png","post":"cjcn41j9d0006cfs6ty880dk5","modified":1,"renderable":0},{"_id":"source/_posts/java-loc5/imag1.png","post":"cjcn41j8y0000cfs6ie9fdkg3","slug":"imag1.png","modified":1,"renderable":1},{"_id":"source/_posts/szhbyhezsw/bitebi.jpeg","post":"cjcn41j9j000bcfs607gol50v","slug":"bitebi.jpeg","modified":1,"renderable":1},{"_id":"source/_posts/java-lock3/imag1.png","post":"cjcn41j9b0005cfs6qgdbuvcq","slug":"imag1.png","modified":1,"renderable":1},{"_id":"source/_posts/java-lock3/imag2.png","post":"cjcn41j9b0005cfs6qgdbuvcq","slug":"imag2.png","modified":1,"renderable":1},{"_id":"source/_posts/szhbmnmnb/img1.jpeg","post":"cjcn41j9h000acfs6at2pey0s","slug":"img1.jpeg","modified":1,"renderable":1},{"_id":"source/_posts/szhbmnmnb/img2.jpeg","post":"cjcn41j9h000acfs6at2pey0s","slug":"img2.jpeg","modified":1,"renderable":1},{"_id":"source/_posts/szhbmnmnb/img3.jpeg","post":"cjcn41j9h000acfs6at2pey0s","slug":"img3.jpeg","modified":1,"renderable":1},{"_id":"source/_posts/szhbmnmnb/img4.jpeg","post":"cjcn41j9h000acfs6at2pey0s","slug":"img4.jpeg","modified":1,"renderable":1},{"_id":"source/_posts/java-lock2/image2.png","post":"cjcn41j990004cfs6mt0my1b4","slug":"image2.png","modified":1,"renderable":1},{"_id":"source/_posts/java-lock2/image3.png","post":"cjcn41j990004cfs6mt0my1b4","slug":"image3.png","modified":1,"renderable":1},{"_id":"source/_posts/java-lock2/image4.png","post":"cjcn41j990004cfs6mt0my1b4","slug":"image4.png","modified":1,"renderable":1},{"_id":"source/_posts/java-lock2/image5.png","post":"cjcn41j990004cfs6mt0my1b4","slug":"image5.png","modified":1,"renderable":1},{"_id":"source/_posts/java-lock2/test1.png","post":"cjcn41j990004cfs6mt0my1b4","slug":"test1.png","modified":1,"renderable":1},{"_id":"source/_posts/java-lock4/img1.png","post":"cjcn41j9d0006cfs6ty880dk5","slug":"img1.png","modified":1,"renderable":1},{"_id":"source/_posts/java-lock4/img10.png","post":"cjcn41j9d0006cfs6ty880dk5","slug":"img10.png","modified":1,"renderable":1},{"_id":"source/_posts/java-lock4/img11.png","slug":"img11.png","post":"cjcn41j9d0006cfs6ty880dk5","modified":1,"renderable":0},{"_id":"source/_posts/java-lock4/img2.png","post":"cjcn41j9d0006cfs6ty880dk5","slug":"img2.png","modified":1,"renderable":1},{"_id":"source/_posts/java-lock4/img6.png","post":"cjcn41j9d0006cfs6ty880dk5","slug":"img6.png","modified":1,"renderable":1}],"PostCategory":[{"post_id":"cjcn41j9b0005cfs6qgdbuvcq","category_id":"cjcn41j960002cfs66i761t57","_id":"cjcn41j9u000kcfs6ed1wrs4b"},{"post_id":"cjcn41j9b0005cfs6qgdbuvcq","category_id":"cjcn41j9r000ecfs65xcuvm4b","_id":"cjcn41j9v000ncfs62cuic607"},{"post_id":"cjcn41j8y0000cfs6ie9fdkg3","category_id":"cjcn41j960002cfs66i761t57","_id":"cjcn41j9v000qcfs6zsls5joq"},{"post_id":"cjcn41j8y0000cfs6ie9fdkg3","category_id":"cjcn41j9r000ecfs65xcuvm4b","_id":"cjcn41j9w000rcfs6g63z4vl5"},{"post_id":"cjcn41j9d0006cfs6ty880dk5","category_id":"cjcn41j960002cfs66i761t57","_id":"cjcn41j9w000tcfs6qwrclcei"},{"post_id":"cjcn41j9d0006cfs6ty880dk5","category_id":"cjcn41j9r000ecfs65xcuvm4b","_id":"cjcn41j9x000vcfs6s9faao1b"},{"post_id":"cjcn41j9h000acfs6at2pey0s","category_id":"cjcn41j9v000pcfs6h9q3hnqh","_id":"cjcn41j9y000zcfs65oeuaftz"},{"post_id":"cjcn41j940001cfs6fd96hmcm","category_id":"cjcn41j960002cfs66i761t57","_id":"cjcn41j9z0014cfs6gmo57by6"},{"post_id":"cjcn41j940001cfs6fd96hmcm","category_id":"cjcn41j9r000ecfs65xcuvm4b","_id":"cjcn41ja00015cfs6wnnicx09"},{"post_id":"cjcn41j9j000bcfs607gol50v","category_id":"cjcn41j9v000pcfs6h9q3hnqh","_id":"cjcn41ja00017cfs6satt6xf9"},{"post_id":"cjcn41j990004cfs6mt0my1b4","category_id":"cjcn41j960002cfs66i761t57","_id":"cjcn41ja1001bcfs6pioaj5zx"},{"post_id":"cjcn41j990004cfs6mt0my1b4","category_id":"cjcn41j9r000ecfs65xcuvm4b","_id":"cjcn41ja1001ccfs6f60ftjmx"}],"PostTag":[{"post_id":"cjcn41j8y0000cfs6ie9fdkg3","tag_id":"cjcn41j980003cfs62zylis4v","_id":"cjcn41j9g0009cfs6a3og2cjw"},{"post_id":"cjcn41j940001cfs6fd96hmcm","tag_id":"cjcn41j9e0008cfs6lgx5xp5g","_id":"cjcn41j9t000icfs68pkfiuw3"},{"post_id":"cjcn41j940001cfs6fd96hmcm","tag_id":"cjcn41j9n000dcfs67cmijyv6","_id":"cjcn41j9u000lcfs67giq15zg"},{"post_id":"cjcn41j940001cfs6fd96hmcm","tag_id":"cjcn41j9r000fcfs60yys20dt","_id":"cjcn41j9v000ocfs6xfsd9zpp"},{"post_id":"cjcn41j990004cfs6mt0my1b4","tag_id":"cjcn41j9t000hcfs6amjzcx5d","_id":"cjcn41j9y000xcfs6nnh5qk0b"},{"post_id":"cjcn41j990004cfs6mt0my1b4","tag_id":"cjcn41j9u000mcfs6bc7255u0","_id":"cjcn41j9z0010cfs6w7drjxa0"},{"post_id":"cjcn41j990004cfs6mt0my1b4","tag_id":"cjcn41j9w000scfs6ymaunpyq","_id":"cjcn41j9z0012cfs6c85f2nej"},{"post_id":"cjcn41j9b0005cfs6qgdbuvcq","tag_id":"cjcn41j9y000wcfs67a938ehz","_id":"cjcn41ja10018cfs6otvg2y5x"},{"post_id":"cjcn41j9b0005cfs6qgdbuvcq","tag_id":"cjcn41j9z0011cfs6ffzagh2j","_id":"cjcn41ja10019cfs6nz0rwgg4"},{"post_id":"cjcn41j9d0006cfs6ty880dk5","tag_id":"cjcn41ja00016cfs6ujjkel4z","_id":"cjcn41ja2001ecfs6wk8bjceu"},{"post_id":"cjcn41j9d0006cfs6ty880dk5","tag_id":"cjcn41ja1001acfs63p1vpwjj","_id":"cjcn41ja2001fcfs65aea2bye"},{"post_id":"cjcn41j9h000acfs6at2pey0s","tag_id":"cjcn41ja2001dcfs6hjj46jwx","_id":"cjcn41ja5001jcfs60nqu8h4r"},{"post_id":"cjcn41j9h000acfs6at2pey0s","tag_id":"cjcn41ja3001gcfs68p9b7rsm","_id":"cjcn41ja6001kcfs6p6ezhiia"},{"post_id":"cjcn41j9h000acfs6at2pey0s","tag_id":"cjcn41ja3001hcfs6x1jxh8wi","_id":"cjcn41ja6001mcfs61a663ueo"},{"post_id":"cjcn41j9j000bcfs607gol50v","tag_id":"cjcn41ja4001icfs62un5xqj7","_id":"cjcn41ja7001ncfs6f665i3kt"},{"post_id":"cjcn41j9j000bcfs607gol50v","tag_id":"cjcn41ja6001lcfs6jkvpmiyq","_id":"cjcn41ja7001ocfs6gkoadde9"}],"Tag":[{"name":"锁","_id":"cjcn41j980003cfs62zylis4v"},{"name":"synchronized","_id":"cjcn41j9e0008cfs6lgx5xp5g"},{"name":"同步","_id":"cjcn41j9n000dcfs67cmijyv6"},{"name":"多线程","_id":"cjcn41j9r000fcfs60yys20dt"},{"name":"内存模型","_id":"cjcn41j9t000hcfs6amjzcx5d"},{"name":"可见性","_id":"cjcn41j9u000mcfs6bc7255u0"},{"name":"volatile","_id":"cjcn41j9w000scfs6ymaunpyq"},{"name":"cas","_id":"cjcn41j9y000wcfs67a938ehz"},{"name":"原子性","_id":"cjcn41j9z0011cfs6ffzagh2j"},{"name":"locksupport","_id":"cjcn41ja00016cfs6ujjkel4z"},{"name":"线程池","_id":"cjcn41ja1001acfs63p1vpwjj"},{"name":"数字货币","_id":"cjcn41ja2001dcfs6hjj46jwx"},{"name":"通货膨胀","_id":"cjcn41ja3001gcfs68p9b7rsm"},{"name":"通货紧缩","_id":"cjcn41ja3001hcfs6x1jxh8wi"},{"name":"比特币","_id":"cjcn41ja4001icfs62un5xqj7"},{"name":"区块链","_id":"cjcn41ja6001lcfs6jkvpmiyq"}]}}